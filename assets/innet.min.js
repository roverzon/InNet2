;(function(){
	'use strict';
	angular.module('app',[
		'app.router',
		'app.topnav',
		'app.case',
		'app.car',
		'app.branch',
		'app.map',
		'app.member',
		'app.strikeTeam',
		'app.socket',
		'app.user',
		'app.timer',
		'app.notification'
	])
})();


(function(){
	'use strict';
	/**
	* app.car Module
	*
	* Description
	*/
	angular.module('app.car', [])
})();
(function(){
	'use strict';
	/**
	* app.branch Module
	*
	* Description
	*/
	angular
		.module('app.branch',[])
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular.module('app.case', [
		'ui.router',
		'ui.bootstrap'
	])
})();
(function(){
	/**
	* app.dashboard Module
	*
	* Description
	*/
	angular
		.module('app.dashboard',[]);
})();
(function(){
	'use strict';
	/**
	* app.director Module
	*
	* Description
	*/
	angular.module('app.director', [])

})();
(function(){
	'use strict';
	/**
	* app.dispatch Module
	*
	* Description
	*/
	angular.module('app.dispatch', [])
})();
(function(){
	'use strict';
	/**
	* app.dutylist Module
	*
	* Description
	*/
	angular.module('app.dutylist', [])
})();
(function(){
	'use strict';
	/**
	* app.geo Module
	*
	* Description
	*/
	angular.module('app.geo', []);
})();
(function(){
	/**
	* app.map Module
	*
	* Description
	*/
	angular.module('app.map', [])
})();
(function(){
	/**
	* app.member Module
	*
	* Description
	*/
	angular.module('app.member', [])
})();
(function(){
	'use strict';
	/**
	* app.notification Module
	*
	* Description
	*/
	angular.module('app.notification', []);
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular.module('app.safety',[])
})();
(function(){
	'use strict';
	/**
	* app.socket Module
	*
	* Description
	*/
	angular.module('app.socket', []);
})();
(function(){
	'use strict';
	/**
	* app.strikeTeam Module
	*
	* Description
	*/
	angular.module('app.strikeTeam',[]);
})();
(function(){
	'use strict';
	/**
	* app.timer Module
	*
	* Description
	*/
	angular.module('app.timer', [])
})();
(function(){
	'use strict';
	/**
	* app.summary Module
	*
	* Description
	*/
	angular.module('app.summary',[]);
})();
(function(){
	'use strict';
	/**
	* app.user Module
	*
	* Description
	*/
	angular.module('app.user', []);
});
(function(){
	'use strict';
	/**
	* app.car Module
	*
	* Description
	*/
	angular
		.module('app.car')
		.controller('CarEditController',CarEditController);

	CarEditController.$inject = [];
	function CarEditController(){

	};

})();
(function(){
	'use strict';
	/**
	* app.car Module
	*
	* Description
	*/
	angular
		.module('app.car')
		.controller('CarIndexController',CarIndexController);

	CarIndexController.$inject = [];
	function CarIndexController(){

	};

})();
(function(){
	'use strict';

	/**
	* app.car Module
	*
	* Description
	*/
	angular
		.module('app.car')
		.serice('CarSvc',CarSvc);

	CarSvc.$inject = ['$http'];
	
	function CarSvc($http){
		var vm = this; 
		vm.fetchByCorps  = fetchByCorps;
		vm.fetchByBranch = fetchByBranch;
		vm.update 		 = update; 

		function fetchByCorps(corps){
			return $http.get('/api/cars?corps=' + corps);
		};

		function fetchByBranch( branch ){
			return $http.get('/api/cars?branch=' + branch );
		};
		
		function update(data){
			return $http.put('/api/cars/' + data.id , data);
		};
	};
})();
(function(){

	/**
	* app.branch Module
	*
	* Description
	*/
	angular
		.module('app.branch')
		.controller('BranchSvc',BranchSvc);

	BranchSvc.$inject = ['$http'];
	function BranchSvc($http){
		var svc = this;
		svc.fetchByCorps 	= fetchByCorps;
		svc.fetchByName 	= fetchByName;
		svc.totalListFindByName = totalListFindByName;
		svc.getDetails 		= getDetails;
		svc.fetchOnDutyBranches = fetchOnDutyBranches;
		svc.update 			= update;
		svc.updateMission 	= updateMission;
		
		function fetchByCorps(corps){
			return $http.get('/api/branches?corps=' + corps);
		};
		
		function fetchByName(branch){
			return $http.get('/api/branches?branch=' + branch);
		};

		function totalListFindByName(branch){
			return $http.get('/api/branches/' + branch)
		}

		function getDetails(id){
			return $http.get('/api/branches/' + id);
		};

		function fetchOnDutyBranches(branches){
			return $http.post('/api/branches/onduty',branches);
		};
	
		function update(data){
			return $http.put('/api/branches/' + data.branch , data);
		};

		function updateMission(data){
			return $http.put('/api/branches?branch=' + data.branch, data);
		};
	};

})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseConfirmController',CaseConfirmController);

	CaseConfirmController.$inject = ['UserSvc', 'CaseSvc', '$stateParams','$state','$modalInstance'];
	function CaseConfirmController(UserSvc, CaseSvc, $stateParams,$state,$modalInstance){
		var vm = this;
		
		vm.user = {};
		vm.send = send; 
		vm.caseInfo = {
			id : $stateParams.id,
			endAt : moment().format('YYYY-MMM-DD, h:mm:ss a')
		}; 

		function send(){
			UserSvc.login(vm.user).success(function(data){
				CaseSvc.closeCase(vm.caseInfo).success(function(){
					$modalInstance.dismiss('cancel');
					$state.go('dutyDesk.case.index');
				})
			});
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseEditController',CaseEditController);

	CaseEditController.$inject = ['$stateParams', 'CaseSvc', 'CarSvc', 'UserSvc', 'BranchSvc', '$window', '$modal','NtfSvc'];

	function CaseEditController($stateParams, CaseSvc, CarSvc, UserSvc, BranchSvc, $window, $modal,NtfSvc){
		var vm = this; 
		var dispatchCars  = [];
		vm.terminateCase  = terminateCase;
		vm.dispatch 	  = dispatch;
		vm.selectBranch   = selectBranch;
		vm.cancelDispatch = cancelDispatch;
		vm.save 		  = save; 

		angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 17
	        },
	        controls: {
	            draw: {}
	        }
	    });

		var caseId = $stateParams.id;

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		    vm.currentBranch = branches[0].name
		});

		function selectBranch(branch){
	    	vm.currentBranch = branch.name;
	    };

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		    vm.currentBranch = branches[0].name
		})

		CaseSvc.fetchById(caseId).success(function(_case){
			vm.currentCase = _case;
			vm.dispatchList = _.pluck(_case.cars, 'radioCode').join(' ')
			vm.currentCase.carIds = _.pluck(_case.cars,'_id');
		}).then(function(){
			CarSvc.fetchByCorps(UserSvc.userCorps()).success(function(cars){
				vm.cars = cars
				for (var i = 0; i < vm.cars.length; i++) {
					if ( vm.currentCase.carIds.indexOf(vm.cars[i]._id) > -1 ) {
						vm.cars[i].isChecked = true;
						dispatchCars.push(vm.cars[i]);
					};
				};
			});

			NtfSvc.fetch().success(function(ntfs){
				vm.ntfs = ntfs;
				vm.currentCase.ntfs = _.pluck(ntfs,'type')
				vm.currentCase.ntf  = vm.currentCase.ntfs[0];
			});
		});

		function getBranchId(branchesList){
			var branches = _.unique(branchesList);
			var branchIds = [];
			for (var i = 0; i < vm.branches.length; i++) {
				if (branches.indexOf(vm.branches[i].name) > -1) {
					branchIds.push(vm.branches[i]._id);
				};
			};
			return  branchIds;
		};

		function dispatch( car ){
			car.isChecked = true; 
			dispatchCars.push(car);
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ")
		};

		function cancelDispatch(car){
			car.isChecked = false;
			dispatchCars.splice(_.pluck(dispatchCars, '_id').indexOf(car._id),1)
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ")
		};

		function save(){
			var currentNtf;

			vm.ntfs.forEach(function(ntf,id){
				if (ntf.type == vm.currentCase.ntf ) {
					currentNtf  = vm.ntfs[id];
				};
			});
			CaseSvc.update({
				caseId    : vm.currentCase._id,
				address   : vm.currentCase.address || "測試",
				officerReceiver : UserSvc.currentUser() ||  "劉曉曼",
				type      : vm.currentCase.type || "火警",
				types 	  : vm.currentCase.types,
				phone     : vm.currentCase.phone || "測試",
				branches  : _.unique(_.pluck(dispatchCars, 'branch')),
				branchIds : getBranchId(vm.currentCase.branches),
		  		cars      : _.pluck(dispatchCars,'_id'),
				isOngoing : true,
				corps 	  : UserSvc.userCorps(),
				env 	  : vm.currentCase.env,
				envs 	  : vm.currentCase.envs,
				floor 	  : vm.currentCase.floor,
				ntf       : currentNtf._id,
				lastUpdate : moment().format('YYYY-MMM-DD h:mm:ss a')
			}).success(function(){
				$window.history.back();
			})
		};

		function terminateCase (){
			var modalInstance = $modal.open({
			  	templateUrl: 'views/case/case.confirm.modal.html',
			    controller: 'CaseConfirmCtrl',
			    size: "md"	    
			});
		};
	}
})();
(function(){
	'use strict';

	angular
		.module('app.case')
		.controller('CaseController',CaseController);
	
	CaseController.$inject = ['$stateParams','$modal','CaseSvc', '$log', 'SocketSvc', 'UserSvc', '$location'];
	function CaseController($stateParams,$modal,CaseSvc, $log, SocketSvc, UserSvc, $location){
		var vm = this; 
		vm.maxSize 		= 5; 
		vm.itemsPerPage = 3;
		vm.currentPage  = 1;
		vm.pageChanged  = pageChanged;
		vm.queryCases   = queryCases;
		vm.choose 		= choose;
		
		vm.queryCases();

		function pageChanged(){
			CaseSvc.fetch(UserSvc.userCorps(), vm.currentPage , vm.itemsPerPage ).success(function(data){
				vm.cases = data.cases;
			});
		};

		function queryCases(){
			CaseSvc.fetch(UserSvc.userCorps(), vm.currentPage, vm.itemsPerPage).success(function(data){
				vm.cases = data.cases;
				vm.totalItems = data.totalCases;
			});
		};

		function choose(id){
			CaseSvc.fetchById(vm.cases[id]._id).success(function(_case){
					vm.caseDetails = _case;
			});
		};

		SocketSvc.on('newCase',function(_case){
			vm.cases.unshift(_case);
		});

		SocketSvc.on('caseModified',function(_case){
			vm.cases[_case.caseId-1] = _case;
		});
	};

})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseModalController',CaseModalController);

	CaseModalController.$inject = ['CarSvc', '$modalInstance', 'CaseSvc','$state', 'caseId','caseDetails', 'StSvc', '$window', 'BranchSvc', 'UserSvc', 'NtfSvc'];

	function CaseModalController(CarSvc, $modalInstance, CaseSvc,$state, caseId,caseDetails, StSvc, $window, BranchSvc, UserSvc, NtfSvc){
		var vm = this; 
		vm.nftOption = {};
		vm.dispatchList = vm.caseObj.dispatchList.join(" ");
		vm.caseObj = {
			address : caseDetails.address || null,
			phone : caseDetails.phone || null,
		    type : caseDetails.type ||  "火警", 
		    types : [ "火警", "救護", "災害", "檢舉","其他"],
		    env   : "住宅火警",
		    envs  : ["住宅火警","高樓、地下與工廠","搶救困難區","其他"],
		    floor : 1, 
		    carIds : getCarsDetail(caseDetails).carIds  || [],
		    dispatchList : getCarsDetail(caseDetails).dispatchList ||  [],
		    branches : getCarsDetail(caseDetails).branches ||  []
		};
		vm.update 	 = update;
		vm.getCars 	 = getCars;
		vm.cancel 	 = cancel;
		vm.cancelDispatch = cancelDispatch;
		vm.dispatch  = dispatch;
		vm.closeCase = closeCase;
		vm.save 	 = save;

		if (_.isEmpty(caseDetails)) {
			vm.isNew = true;
			carObjs = [];
		}else{
			vm.isNew = false;
			var carObjs = caseDetails.cars;
		};

		NtfSvc.fetch().success(function(nfts){
			vm.nftOption.nfts = nfts;
		}).then(function(){
			vm.nftOption.nft = vm.nftOption.nfts[0];
		})

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		});

		function getCarsDetail(obj){
			var dispatchList = [];
			var carIds = [];
			var branches = [];

			if (obj.cars) {
				for (var i = obj.cars.length - 1; i >= 0; i--) {
					dispatchList.push(obj.cars[i].radioCode);
					carIds.push(obj.cars[i]._id);
					branches.push(obj.cars[i].branch); 
				};
				return {dispatchList : dispatchList , carIds : carIds , branches :  branches}

			}else{
				return {};
			};
		};

		function getBranchId(branchesList){
			var branches = _.unique(branchesList);
			var branchIds = [];
			for (var i = 0; i < vm.branches.length; i++) {
				if (branches.indexOf(vm.branches[i].name) > -1) {
					branchIds.push(vm.branches[i]._id);
				};
			};
			return  branchIds;
		};
		
		function getCars( branch ){
			 CarSvc.fetchByBranch(branch.name).success(function(cars){
			 	for (var i = cars.length - 1; i >= 0; i--) {
			 		if (vm.caseObj.carIds.indexOf(cars[i]._id) > -1 ) {
			 			cars[i].isChecked = true; 
			 		};
			 	};
			 	vm.cars = cars;
			 });
		};

		function cancel() {
			$modalInstance.dismiss('cancel');
		};

		function cancelDispatch(car){
			car.isChecked = false;
			carObjs.splice(carObjs.indexOf(car),1)
			vm.caseObj.carIds.splice(vm.caseObj.dispatchList.indexOf(car._id),1);
			vm.caseObj.dispatchList.splice(vm.caseObj.dispatchList.indexOf(car.radioCode),1);
			vm.caseObj.branches.splice(vm.caseObj.dispatchList.indexOf(car.branch),1);
			vm.dispatchList = vm.caseObj.dispatchList.join(" ");
		};
		
		function dispatch( car ){
			car.isChecked = true; 
			carObjs.push(car);
			vm.caseObj.carIds.push(car._id);
			vm.caseObj.dispatchList.push(car.radioCode);
			vm.caseObj.branches.push(car.branch);
			vm.dispatchList = vm.caseObj.dispatchList.join(" ");
		};

		function closeCase(){
			StSvc.count(caseDetails._id).success(function(total){
				if (total > 0 ) {
					$window.alert("尚有隊員在安全管制")
				}else{
					CaseSvc.closeCase({
						id : caseDetails._id,
						isOngoing : false
					}).success(function(msg){
						console.log(msg)
					});
					$modalInstance.dismiss('cancel');
					$state.reload()
				};
			});
		};

		function save(){
			CaseSvc.create({
				caseId   : caseId + 1, 
				address   : vm.caseObj.address || "測試",
				officerReceiver : UserSvc.currentUser() ||  "劉曉曼",
				type      : vm.caseObj.type || "救護",
				phone     : vm.caseObj.phone || "測試",
				branches  : _.unique(vm.caseObj.branches),
				branchIds : getBranchId(vm.caseObj.branches),
		  		cars      : vm.caseObj.carIds,
				isOngoing : true,
				corps 	  : UserSvc.userCorps(),
				env 	  : vm.caseObj.env,
				floor 	  : vm.caseObj.floor
			}).success(function(newCase){
				$modalInstance.close(newCase)
			});
		};

		function update(){
			var content = {
				id : caseDetails._id,
				caseId   : caseId, 
				address   : vm.caseObj.address,
				officerReceiver : UserSvc.currentUser() || "劉曉曼",
				type      : vm.caseObj.type,
				phone     : vm.caseObj.phone,
				branches  : _.unique(vm.caseObj.branches),
				branchIds : getBranchId(vm.caseObj.branches),
		  		cars      : vm.caseObj.carIds,
				isOngoing : true,
				env 	  : vm.caseObj.env,
				floor 	  : vm.caseObj.floor
			};
			
			CaseSvc.update(content);
			$modalInstance.dismiss('cancel');
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseNewController',CaseNewController);

	CaseNewController.$inject = ['CarSvc', 'BranchSvc', 'NtfSvc', 'UserSvc','$location','leafletData', '$stateParams', 'CaseSvc', '$window', '$state', 'GeoSvc'];

	function CaseNewController(CarSvc, BranchSvc, NtfSvc, UserSvc,$location,leafletData, $stateParams, CaseSvc, $window, $state, GeoSvc){
		var vm = this;
		vm.selectBranch = selectBranch;
		vm.save = save;
		vm.locateAddress = locateAddress;
		vm.cancelDispatch = cancelDispatch;
		vm.dispatch = dispatch;
		vm.currentTime =  moment().format('h:mm:ss a'); 
		var battleRadiuss = [];
		var dispatchCars = [];
		var notifications;
		vm.dispatchList = vm.currentCase.dispatchList.join(' ');
		
		vm.currentCase = {
			phone 	: null,
		    type 	: '火警', 
		    types 	: [ '火警', '救護', '災害', '檢舉','其他'],
		    env   	: '住宅火警',
		    envs  	: ['住宅火警','高樓、地下與工廠','搶救困難區','其他'],
		    floor 	: 1, 
		    carIds  : [],
		    dispatchList : [],
		    branches :  [],
		    location : GeoSvc.defaultLocation()
		}; 

		GeoSvc.fetchBaseLocation(UserSvc.userCorps()).success(function(locations){
			vm.locations = locations;
		});

	    angular.extend(vm, {
	        nowPos: {
	            lat: GeoSvc.defaultLocation().lat,
	            lng: GeoSvc.defaultLocation().lng,
	            zoom: 17
	        },
	       markers: {},
	    });

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		    vm.currentBranch = branches[0].name
		});

		CarSvc.fetchByCorps(UserSvc.userCorps()).success(function(cars){
			vm.cars = cars; 
		});

		NtfSvc.fetch().success(function(ntfs){
			notifications = ntfs;
			vm.currentCase.ntfs = _.pluck(ntfs,'type')
			vm.currentCase.ntf  = vm.currentCase.ntfs[0];
		});

		function locateAddress(){
			if (vm.currentCase.address) {
				GeoSvc.getGeoEncodedInfo(vm.currentCase.address).then(function(res){
			        vm.nowPos.lat = res.J;
			        vm.nowPos.lng = res.M;
		            vm.markers.mainMarker = {
		            	lat: res.J,
		                lng: res.M,
		                focus: true,
		                message: "案件標的",
		            };

		            if (res) {
		            	vm.locations.forEach(function(location){
			            	var r = GeoSvc.getDistance( location, { lat : res.J , lng : res.M } );
			            	var battleRadius =  { base : location.branch,  to : { lat : res.J, lng :  res.M }, from : { lat : location.lat, lng : location.lng }, d : r }; 
			            	battleRadiuss.push( JSON.stringify(battleRadius));
			            });
		            };
				});
			};
		};

		function selectBranch(branch){
	    	vm.currentBranch = branch.name;
	    };

		function dispatch( car ){
			car.isChecked = true; 
			dispatchCars.push(car);
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ");
		};

		function cancelDispatch(car){
			car.isChecked = false;
			dispatchCars.splice(_.pluck(dispatchCars, '_id').indexOf(car._id),1);
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ");
			vm.dispatchList = vm.currentCase.dispatchList.join(" ");
		};
	
		function save(){
			var currentNtf;
			var branches  = _.unique(_.pluck(dispatchCars, 'branch'));
			var dispatch = vm.branches.filter(function(branch) { return branches.indexOf(branch.name) > -1 });

			notifications.forEach(function(ntf,id){
				if (ntf.type == vm.currentCase.ntf ){
					currentNtf  = notifications[id]
				};
			});

			CaseSvc.create({
				officerReceiver : UserSvc.currentUser() ||  '劉曉曼',
				type      		: vm.currentCase.type || '火警',
				types 	  		: vm.currentCase.types,
				phone     		: vm.currentCase.phone || '測試',
				branches  		: _.unique(_.pluck(dispatchCars, 'branch')),
				branchIds 		: _.pluck(dispatch, '_id'),
		  		cars      		: _.pluck(dispatchCars,'_id'),
				corps 	  		: UserSvc.userCorps(),
				env 	  		: vm.currentCase.env,
				envs 	  		: vm.currentCase.envs,
				floor 	  		: vm.currentCase.floor,
				ntf       		: currentNtf._id,
				createAt  		: moment().format('YYYY-MMM-DD, h:mm:ss a'),
				lastUpdate 		: moment().format('YYYY-MMM-DD, h:mm:ss a'),
				location  		:  {
					lat 	: vm.currentCase.location.lat,
					lng 	: vm.currentCase.location.lng,
					address : vm.currentCase.location.address || '測試'
				},
				battleRadiuss 	: battleRadiuss
			}).success(function(){
				$window.history.back();
			});
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.service('CaseSvc', CaseSvc);

	CaseSvc.$inject = ['$http'];

	function CaseSvc( $http ) {
		var svc = this;
		svc.fetch 		= fetch;
		svc.fetchAll 	= fetchAll;
		svc.closeCase 	= closeCase;
		svc.fetchRelativeCase = fetchRelativeCase; 
		svc.fetchDetails = fetchDetails;
		svc.fetchById 	= fetchById;
		svc.create 		= create;
		svc.delete 		= deleteCase;
		svc.update 		= update;
		
		function fetch(corps, page, itemsPerPage){
			return $http.get('/api/cases?corps=' + corps + '&page=' + page + '&ipp=' + itemsPerPage );
		};

		function fetchAll(){
			return $http.get('/api/cases/details');
		};
		
		function fetchRelativeCase(con){
			return $http.get('/api/cases/branch?branch=' + con.branch + '&accessLevel=' + con.accessLevel + '&corps=' + con.corps );
		};
		
		function fetchDetails(caseId){
			return $http.get('/api/cases/details/' + caseId);
		};

		function fetchById( caseId ){
			return $http.get('/api/cases/' + caseId );
		};
		
		function create(case_info){
			return $http.post('/api/cases', case_info);
		};

		function deleteCase(caseId){
			return $http.post('/api/cases/' + caseId);
		};

		function update(updated_case){
			return $http.put('/api/cases/' + updated_case.caseId , updated_case);
		};
		
		function closeCase(data){
			return $http.put('/api/cases/close?id=' + data.id, data );
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseShowController', CaseShowController);

		CaseShowController.$inject =  [ 'StSvc', '$stateParams', '$interval', '$state', 'SocketSvc', 'CaseSvc', 'BranchSvc', 'StMissionFac'];

		function CaseShowController(){
			var vm = this; 
			vm.isCollapsed = true ;
			vm.members = [];
			vm.positions = StMissionFac.position().poss;

			SocketSvc.on('newSt', function(st){
				if ( angular.equals(caseId,st.caseId)) {
					var newSt = angular.copy(st);
					vm.strikeTeams.push(newSt);
				};
				vm.deploys = initTable(vm.strikeTeams);
				vm.deployDetails = initDeploy(vm.strikeTeams);
			});

			SocketSvc.on('updateSt', function(data){
				StSvc.fetchByCase(caseId).success(function(strikeTeams){
					vm.strikeTeams = strikeTeams;
					vm.strikeTeams.forEach(function(st){
						st.limitTime = moment.duration(st.workingTime,'seconds');
					});
					vm.deploys = initTable(vm.strikeTeams);
					vm.deployDetails = initDeploy(vm.strikeTeams);
				});

			})

			SocketSvc.on('dismiss', function(data){
				StSvc.fetchByCase(caseId).success(function(strikeTeams){
					vm.strikeTeams 	 = strikeTeams;
					vm.deploys 		 = initTable(vm.strikeTeams);
					vm.deployDetails = initDeploy(vm.strikeTeams);
				});
			});


			var caseId = $stateParams.id;
			CaseSvc.fetchDetails(caseId).success(function(_case){
				_case.env == '住宅火警' ? vm.apartment = true : vm.apartment = false;
				vm.caseDetail = _case;
				vm.position = {
					defaultPos 	: "第一面",
					positions 	: ["第一面","第二面","第三面","第四面"],
					floor 		: vm.caseDetail.floor,
					floors  	: vm.caseDetail.floor < 5? _.range(1,6,1) : _.range(vm.caseDetail.floor-2,vm.caseDetail.floor+3,1)
				};
			});

			StSvc.fetchByCase(caseId).success(function(strikeTeams){
				if (strikeTeams) {
					vm.strikeTeams = strikeTeams;
					vm.strikeTeams.forEach(function(st){
						st.limitTime = moment.duration(st.workingTime,'seconds');
					});
					vm.deploys = initTable(vm.strikeTeams);
					vm.deployDetails =initDeploy(vm.strikeTeams);
					
				} else {
					return 
				};
			});


			var initDeploy = function(strikeTeams){
				return  _.groupBy(strikeTeams,function(st){
						return st.position;
				});
			};

			var initTable =  function(strikeTeams){
			  	var deployArray = _.range(4).map(function () {
			        return _.range(5).map(function () {
			            return { totalMember : 0, stTotal : 0 , sts : [] } ;
			        });
			    });

				if ( strikeTeams ){
					for (var i = strikeTeams.length - 1; i >= 0; i--) {
						var totalMember = 0;
						var y = null;
						var st = 0;
						var x = _.indexOf(strikeTeams[i].positions, strikeTeams[i].position);
						vm.apartment ? y = _.indexOf(strikeTeams[i].floors, strikeTeams[i].floor) : y = _.indexOf(strikeTeams[i].areas, strikeTeams[i].area)
						deployArray[x][y].stTotal += 1;
						deployArray[x][y].totalMember += strikeTeams[i].members.length;
						var stInFo = {};
						stInFo.id = strikeTeams[i].branch + strikeTeams[i].id
						stInFo.number = strikeTeams[i].members.length;
						stInFo.group = strikeTeams[i].group;
						deployArray[x][y].sts.push(stInFo);
					};
				}
				return deployArray
			};
			
			vm.$on('$destroy', function (event) {
		        SocketSvc.removeAllListeners();
		    });
		}
})();
;(function(){
	'use strict';
	/**
	* app Module
	*
	* Description
	*/
	angular
		.module('app')
		.controller('LoginController',LoginController);

		LoginController.$inject = ['UserSvc', 'store', '$state','jwtHelper','$http', 'SocketSvc'];

		function LoginController(UserSvc, store, $state,jwtHelper,$http, SocketSvc ){
			var vm 	 = this; 
			vm.login = login;
			vm.user  = {};

			function login(){
				UserSvc.login(vm.user).success(function(data){
					if (data.success) {
						store.set('jwt',data.token);
						$http.defaults.headers.common['x-access-token'] = data.token;
						return data.token; 
					} else { 
						return console.log("password is not existed");
					}
				}).then(function(token){
					SocketSvc.init(token);
					SocketSvc.emit('login');
				}).then(function(){
					if (jwtHelper.decodeToken(token).role == "admin") {
						var userBranch = jwtHelper.decodeToken(token).branch;
						if (userBranch.slice(userBranch.length-2 ,userBranch.length) == "大隊") {
							return $state.go('dutyDesk.corps')
						} else{
							return $state.go('dutyDesk.branch')
						};
					}else{
						return $state.go('director.safety.index')
					}
				})
			};
		};
})();
;(function(){
	'use strict';
	angular
		.module('app.router',['ui.router'])
		.config(routerConfig)

		routerConfig.$inject = ['$stateProvider','$urlRouterProvider','$locationProvider'];
		
		function routerConfig($stateProvider,$urlRouterProvider, $locationProvider) {
		    $urlRouterProvider
    			.otherwise('/login');

		    $stateProvider
		        .state('anon',{
		            url : "",
		            abstract : true,
		            template : "<ui-view>",
		        })
		        .state('anon.login',{
		            url : "/login",
		            templateUrl :"login.html",
		            controller : "LoginController",
		            controllerAs : "LoginCtrl"
		        })
		        .state('anon.404',{
		            url : "/404",
		            templateUrl : "404.html"
		        })

    			// duty desk 
			// $stateProvider
			// 	.state('dutyDesk', {
		 //            abstract: true,
		 //            url: "/dutyDesk",
		 //            templateUrl: "views/common/content.html",
		 //            data : {
		 //                requiredLogin : true,
		 //                role : ["admin"]
		 //            }
		 //        })
		 //        .state('dutyDesk.corps', {
		 //            url: "/corps",
		 //            templateUrl: "views/dashboard/corps.dashboard.html",
		 //            controller : "DashboardController",
		 //            controllerAs : "DashboardCtrl",
		 //            data : {
		 //                requiredLogin : true,
		 //                role : ["admin"]
		 //            }
		 //        })
		 //        .state('dutyDesk.branch',{
		 //            url : "/branch",
		 //            templateUrl : "views/dashboard/branch.dashboard.html",
		 //            controller : "DashboardController",
		 //            controllerAs : "DashboardCtrl",
		 //            date : {
		 //                requiredLogin : true,
		 //                role : ["admin"]
		 //            }
		 //        })
		 //        .state('dutyDesk.case',{
		 //            abstract : true,
		 //            template : "<ui-view>"
		 //        })
		 //        .state('dutyDesk.case.index', {
		 //            url: "/case",
		 //            templateUrl: "case/case.index.html",
		 //            controller : "CaseController",
		 //            controllerAs : "CaseCtrl"
		 //        })
		 //        .state('dutyDesk.case.new',{
		 //            url : "/case/new",
		 //            templateUrl : "case/case.new.html",
		 //            controller : "CaseNewController",
		 //            controllerAs : "CaseNewCtrl"
		 //        })
		 //        .state('dutyDesk.case.show',{
		 //            url : "/case/:id/show",
		 //            templateUrl : "case/case.show.html",
		 //            controller : "CaseShowController",
		 //            controllerAs : "CaseShowCtrl"
		 //        })
		 //        .state('dutyDesk.case.edit',{
		 //            url : "/case/:id/edit",
		 //            templateUrl : "case/case.edit.html",
		 //            controller : "CaseEditController",
		 //            controllerAs : "CaseEditCtrl"
		 //        })
		 //        .state('dutyDesk.safety',{
		 //            url : "/case/:id",
		 //            templateUrl : "summary/summary.index.html",
		 //            controller : "SummaryController",
		 //            controllerAs : "SummaryCtrl"
		 //        })
		 //        .state('dutyDesk.dutylist',{
		 //            abstract : true,
		 //            template : "<ui-view>"
		 //        })
		 //        .state('dutyDesk.dutylist.index', {
		 //            url: "/dutylist/:branch",
		 //            templateUrl: "views/dutylist/dutylist.index.html",
		 //            controller : "DutyListController",
		 //            controllerAs : "DutyListCtrl"
		 //        })
		 //        .state('dutyDesk.dutylist.show',{
		 //        	url : "/dutylist/:branch/index",
		 //        	template : "<h2> show </h2>"
		 //        })
		 //        .state('dutyDesk.dutylist.edit', {
		 //            url: "/dutylist/:branch/edit",
		 //            templateUrl  : "views/dutylist/dutylist.edit.html",
		 //            controller   : "DutyListEditController",
		 //            controllerAs : "DutyListEditCtrl"
		 //        })
		 //        .state('dutyDesk.member',{
		 //            abstract : true,
		 //            template : "<ui-view>"
		 //        })
		 //        .state('dutyDesk.member.show', {
		 //            url: "/member/:branch",
		 //            templateUrl  : "views/member/member.index.html",
		 //            controller   : "MemberController",
		 //            controllerAs : "MemberCtrl"
		 //        })
		 //        .state('dutyDesk.member.edit', {
		 //            url: "/member/:branch/edit",
		 //            templateUrl  : "views/member/member.edit.html",
		 //            controller 	 : "MemberEditController",
		 //            controllerAs : "MemberEditCtrl"
		 //        })
		 //        .state('dutyDesk.car', {
		 //            abstract : true,
		 //            template : "<ui-view>"
		 //        })
		 //        .state('dutyDesk.car.show',{
		 //            url: "/car/:branch",
		 //            templateUrl : "views/cars/car.index.html",
		 //            controller : "CarIndexController",
		 //            controllerAs : "CarIndexCtrl"
		 //        })
		 //        .state('dutyDesk.car.edit',{
		 //            url: "/car/:branch/edit",
		 //            templateUrl : "views/cars/car.edit.html",
		 //            controller : "CarEditController",
		 //            controllerAs : "CarEditCtrl"
		 //        })
		}
})();

(function(){
	'use strict';
	/**
	* app Module
	*
	* Description
	*/
	angular
		.module('app.topnav', [])
		.controller('TopNavController',TopNavController);

	TopNavController.$inject = [];
	function TopNavController($location,$state, $interval, store, SocketSvc, UserSvc, $window){
		var vm = this; 
		vm.currentTime =  moment().format('MMM Do, h:mm:ss a');
		vm.logout = logout;


		$interval(function(){
			moment.locale('zh-tw');
			vm.currentTime =  moment().format('MMM Do, h:mm:ss a');
		}, 1000);
		 
		function logout(){
			var account = UserSvc.currentAccount();
			SocketSvc.emit('logout');
			$state.go('anon.login');
		};
	}

})();
(function(){
	/**
	* app.dashboard Module
	*
	* Description
	*/
	angular
		.module('app.dashboard')
		.controller('DashboardController',DashboardController);

	DashboardController.$inject = ['$location', 'SocketSvc', 'UserSvc', 'BranchSvc'];
	function DashboardController($location, SocketSvc, UserSvc, BranchSvc){
		var vm = this; 

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
			return vm.branches = branches;
		});

		UserSvc.fetchOnlineUser().success(function(users){
			return vm.users = users;
		});

		SocketSvc.on('userLogin',function(user){
			return vm.users.push(user);
		});

		SocketSvc.on('userDisconnect',function(disconnectUser){
			vm.users = vm.users.filter(function(user) {
				return user.username != disconnectUser.username
			});
		});

		SocketSvc.on('userLogout',function(logoutUser){
			vm.users = vm.users.filter(function(user) {
				return user.username != logoutUser.username
			});
		});

		vm.$on('$destroy', function (event) {
	        return SocketSvc.removeAllListeners();
	    });
	}
})();
(function(){
	'use strict';
	/**
	* app.director Module
	*
	* Description
	*/
	angular
		.module('app.director')
		.controller('DirDutyListController',DirDutyListController);

	DirDutyListController.$inject = ['UserSvc', 'BranchSvc'];

	function DirDutyListController( UserSvc , BranchSvc ){
		var vm = this;
		var branch = UserSvc.userBranch();
		
		BranchSvc.fetchByName(branch).success(function(branch){
			vm.branch 		= branch;
			vm.onDutyTotal 	= vm.branch.members.filter(function(member) {
				return member.onDuty == true 
			});
		}); 
	};
})();
(function(){
	'use strict';
	/**
	* app.dashboard Module
	*
	* Description
	*/
	angular
		.module('app.director')
		.controller('DirDutyListEditController',DirDutyListEditController);

	DirDutyListEditController.$inject = ['BranchSvc', '$stateParams','MemberSvc', '$location', '$window', 'UserSvc', 'CarSvc', 'StMissionFac'];

	function DirDutyListEditController(BranchSvc, $stateParams,MemberSvc, $location, $window, UserSvc, CarSvc, StMissionFac){
		var vm = this;
		var branch 	= UserSvc.userBranch();
		vm.check 	= check;
		vm.save 	= save;   

		BranchSvc.fetchByName(branch).success(function(branch){
			vm.branch = branch;
			vm.isCorps =  true ? branch.name.split("救災救護")[1] : false 
			var members = _.pluck(branch.members.filter(function(member) { return member.level < 2.4 }), 'name')
			vm.branch.safetyManager 	= branch.safetyManager;
			vm.branch.safetyManagers 	= members;
			vm.onDutyTotal = 0;
			_.map(vm.branch.members,function(member){ 
				member.groupIds = _.range(1,Math.round(vm.branch.members.length/6),1);
				member.groupID = member.group + member.groupId 
			})
		})

		function check(member){
			member.onDuty 	 = !member.onDuty;
			member.isChecked = !member.isChecked;
			member.groupID 	 = member.group + member.groupId
		};

		
		function save(){
			var DispatchNumber = vm.branch.members.filter(function(member) {
				return member.onDuty
			});

			BranchSvc.updateMission({
				branch   		: vm.branch.name,
				director 		: vm.branch.director,
				dispatchNum 	: DispatchNumber.length,
				safetyManager 	: vm.branch.safetyManager,
				members 		: vm.branch.members
			});
			$window.history.back();
		};
	};

})();
(function(){
	'use strict';

	/**
	* app.dispatch Module
	*
	* Description
	*/
	angular
		.module('app.dispatch', [])
		.controller('DispatchController',DispatchController);

	DispatchController.$inject = ['$stateParams','$modal','CaseSvc','BranchSvc', 'CarSvc', 'UserSvc'];
	function DispatchController($stateParams,$modal,CaseSvc,BranchSvc, CarSvc, UserSvc){
		var vm = this; 
		CaseSvc.fetch(UserSvc.userCorps()).success(function(cases){
			vm.cases = cases;
			CaseSvc.fetchById(vm.cases[$stateParams.caseId]._id).success(function(_case){
					return vm.caseDetails = _case;
			});
		});

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    return vm.branchList = branches;
		 });

		CarSvc.fetch().success(function(data){
		    return vm.carsData = data;
		});

		vm.addNewCase = function () {
		  	var modalInstance = $modal.open({
			    templateUrl: '/partials/casePanel/caseAddModal',
			    controller: 'CaseAddModalCtrl',
			    size: "lg",
			    resolve : {
			    	caseId : function(){
			    		return vm.id = "新增案件"
			    	},
			    	branchList : function(){
			    		return vm.branchList;
			    	},
			    	carsData : function(){
			    		return vm.carsData;
			    	},
			    	isNew : function(){
			    		return true;
			    	},
			    	caseDetails : function(){
			    		return {}
			    	}
			    }
		    });
		 };

		 vm.editCase = function(){
		 	var modalInstance = $modal.open({
			    templateUrl: '/partials/casePanel/caseAddModal',
			    controller: 'CaseAddModalCtrl',
			    size: "lg",
			    resolve : {
			    	caseId : function(){
			    		return vm.id = vm.cases[$stateParams.caseId].caseId; 
			    	},
			    	branchList : function(){
			    		return vm.branchList;
			    	},
			    	carsData : function(){
			    		for (var i = vm.carsData.length - 1; i >= 0; i--) {
			    			for (var j = vm.caseDetails.cars.length - 1; j >= 0; j--) {
			    				if ( vm.carsData[i].radioCode === vm.caseDetails.cars[j].radio_code) {
			    					return vm.carsData[i].isChecked = true ;
			    				};
			    			};		    			
			    		};
			    		return vm.carsData;
			    	},
			    	isNew : function(){
			    		return false; 
			    	},
			    	caseDetails : function(){
			    		return vm.caseDetails;
			    	}
			    }
		    });
		 };
	}
})();
(function(){
	/**
	* app.dutylist Module
	*
	* Description
	*/
	angular
		.module('app.dutylist', [])
		.controller('DutyListController',DutyListController);

	DutyListController.$inject = ['BranchSvc', '$stateParams', 'SocketSvc', 'UserSvc', '$q'];
	function DutyListController(BranchSvc, $stateParams, SocketSvc, UserSvc, $q){
		var vm = this; 
		var branchId = $stateParams.branch;
		
		BranchSvc.totalListFindByName(branchId).success(function(branch){
			vm.branch = branch;
			vm.onDutyTotal = vm.branch.members.filter(function(member) {
				return member.onDuty == true
			});
		});
	}

})();
(function(){
	'use strict';
	/**
	* app.geo Module
	*
	* Description
	*/
	angular
		.module('app.geo')
		.service('GeoSvc',GeoSvc);

	GeoSvc.$inject = ['$q','$http'];

	function GeoSvc(){
		var svc = this; 
		svc.getGeolocationCoordinates = function() {
	        var deferred = $q.defer();
	        navigator.geolocation.getCurrentPosition(
	            function(position) { deferred.resolve(position.coords); },
	            function(error) { deferred.resolve(null); }
	        );
	        return deferred.promise;
	    };

	    svc.getGeoEncodedInfo = function(address){
	    	var deferred = $q.defer();
	    	// return $http.get('https://maps.googleapis.com/maps/api/geocode/json?address='+ address +'&key=AIzaSyAxq-ZkxRr1ZArBXFDOo8xgi4Cl2PeitAo')
	    	var geocoder = new google.maps.Geocoder();
	    	if (geocoder) {
		      geocoder.geocode({ 'address': address }, function (results, status) {
		         if (status == google.maps.GeocoderStatus.OK) {
		            deferred.resolve(results[0].geometry.location) 
		         }
		         else {
		            deferred.resolve( "Geocoding failed: " + status )
		         }
		      });
		   } 
		   return deferred.promise;  
	    };

	    svc.fetchBaseLocation = function(corps){
	    	return $http.get('/api/geolocations?corps=' + corps)
	    };

	    svc.getDistance = function( from_loc , to_loc ){

	    	if (typeof(Number.prototype.toRad) === "undefined") {
			  Number.prototype.toRad = function() {
			    return svc * Math.PI / 180;
			  }
			}
			var R = 6371; // Radius of the earth in km
			var dLat = (to_loc.lat - from_loc.lat ).toRad();  // Javascript functions in radians
			var dLon = (to_loc.lng - from_loc.lng ).toRad(); 
			var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
			        Math.cos(from_loc.lat.toRad()) * Math.cos(to_loc.lat.toRad()) * 
			        Math.sin(dLon/2) * Math.sin(dLon/2); 
			var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
			return R * c;
	    };

	    svc.defaultLocation = function(){
	    	return { lat : 25.0927297 , lng :  121.4608639, address : null};
	    };
	};
})();
(function(){
	'use strict';
	/**
	* app.map Module
	*
	* Description
	*/
	angular
		.module('app.map', [])
		.controller('MapIndexController',MapIndexController);

	MapIndexController.$inject = ['leafletData', 'GeoSvc'];
	function MapIndexController(leafletData, GeoSvc){
		var vm = this; 

		GeoSvc.getGeolocationCoordinates().then(function(coord){
	        vm.nowPos.lat = coord.latitude;
	        vm.nowPos.lng = coord.longitude;
	        vm.nowPos.zoom = 17;
	    })

	    angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 17
	        },
	        controls: {
	            draw: {}
	        }
	    })

	    leafletData.getMap().then(function(map) {
	      var drawnItems = vm.controls.edit.featureGroup;
	      map.on('draw:created', function (e) {
	        var layer = e.layer;
	        drawnItems.addLayer(layer);
	        
	        FeatureCollections.push(layer.toGeoJSON())
	        
	      });
	    })
	}
})();
(function(){
	'use strict';
	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.controller('MemberAccountModalController',MemberAccountModalController);

	MemberAccountModalController.$inject = ['UserSvc', 'MemberSvc', 'member', '$modalInstance'];
	function MemberAccountModalController(UserSvc, MemberSvc, member, $modalInstance){
		var vm = this; 
		vm.user = member;
		vm.save = save;
		vm.cancel = cancel; 

		function save(){
			if (_.isEmpty(vm.user)) {
				console.log("please enter your account and password!")
			} else{
				if (!vm.user.account) {
					console.log("account can't be blank!")
					if (!vm.user.password) {
						console.log("passwod can't be blank!")
					};
				} else if (!vm.user.password) {
					console.log("password can't be blank")
				}else{
					UserSvc.activate(vm.user);
					MemberSvc.updateUser(member.name);
					$modalInstance.close(vm.user);
				};
			};
		};

		function cancel(){
			$modalInstance.dismiss('cancel');
		};
	};
})();
(function(){
	'use strict';

	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.controller('MemberEditController',MemberEditController);
	
	MemberEditController.$inject = ['MemberSvc', 'BranchSvc', '$stateParams', '$window','$modal', '$state', 'UserSvc'];
	
	function MemberEditController( MemberSvc, BranchSvc, $stateParams, $window,$modal, $state, UserSvc){
		var vm = this; 

		vm.alerts = [];
		vm.memberDeleted = false;
		var tempDelMember = null;
		vm.accessLevel = UserSvc.accessLevel();
		vm.closeAlert = closeAlert;
		vm.save = save;
		vm.addNewMember = addNewMember;
		vm.update = update;
		vm.activateAccount = activateAccount;
		vm.deleteAlert = deleteAlert;
		vm.deActivateAlert = deActivateAlert;
		
		var memberInit = function(){
			MemberSvc.findByBranch($stateParams.branch).success(function(members){
				vm.members = members;
				vm.members.forEach(function(member){
					member.workingTime = moment.duration(member.workingTime,'seconds');
				});
			});
		};

		memberInit();

		var deActivateAccount = function(index){
			UserSvc.removeUser(tempDelMember.name).success(function(user){
				MemberSvc.removeUser(user.username);
				vm.closeAlert(index);
				memberInit();
			});
		};

		var deleteMember = function(index){
			vm.memberDeleted = true;
			MemberSvc.deleteMember(tempDelMember).success(function(){
				vm.memberDeleted = false;
			});
			vm.closeAlert(index);
			memberInit();
		};

		var cancelDel = function(index){
			vm.memberDeleted = false;
			vm.closeAlert(index);
		};

		function save(){
			var directors = _.pluck( vm.members.filter(function(member) { return member.level > 1.3  }) , 'name');
			BranchSvc.update({
				branch : $stateParams.branch,
				members : _.pluck( vm.members , '_id'),
				directors : directors,
				director : directors[0],
				safetyManager : directors[0]
			}).success(function(){
				$window.history.back();
			});		
		};

		function addNewMember(){
			var modalInstance = $modal.open({
			    templateUrl: 'views/member/member.modal.html',
			    controller: 'MemberModalCtrl',
			    size: "md",
			    resolve : {
			    	branch : function(){
			    		return $stateParams.branch 
			    	},
			    	member : function(){
			    		return { workingTime : null };
			    	}
			    }
		    });

		    modalInstance.result.then(function(member){
		    	if (member) {
		    		memberInit();
		    	}
		    	vm.alerts.push({ type : "success" ,  msg: '人員新增成功！ ' + member.name + ' 已加入 ' + member.branch});
		    })
		};

		function update(member){
			var oldMember = member;
			var modalInstance = $modal.open({
			    templateUrl: 'views/member/member.modal.html',
			    controller: 'MemberModalCtrl',
			    size: "md",
			    resolve : {
			    	branch : function(){
			    		return $stateParams.branch 
			    	},
			    	member : function(){
			    		return {
			    			memberId : member._id,
			    			id : member.id,
			    			name : member.name,
			    			title : member.title,
			    			branches : member.branches,
			    			corps : member.corps,
			    			radioCode : member.radioCode, 
			    			workingTime : member.workingTime.minutes() * 60 + member.workingTime.seconds()
			    		}
			    	}
			    }
		    });

		    modalInstance.result.then(function(member){
		    	memberInit();
		    	vm.alerts.push({ type : "info" ,  msg:  oldMember.name + '修改成功!' });
		    });
		};

		function activateAccount(member){
			var users = vm.members.filter(function(member) {
				return member.isUser;
			});

			if (users.length < 3 ) {
				var modalInstance = $modal.open({
				    templateUrl: 'views/member/member.account.html',
				    controller: 'MemberAccountModalCtrl',
				    size: "md",
				    resolve : {
				    	member : function(){
				    		return member
				    	}
				    }
				});

				modalInstance.result.then(function(member){
					memberInit();
					vm.alerts.push({ type : "info" , msg : member.name + " 已開通為使用者" })
				});
			} else {
				vm.alerts.push({ type : "warning" , msg : "無法開通" + member.name + " 因為使用者已超過3位，請解除其他人帳號後再開通 "});
			};
		};

		function deleteAlert(member){
			vm.alerts.push({ 	
				type : "danger" ,  
				msg: '是否確定要刪除！' + member.name, 
				execute : deleteMember,
				cancel :  cancelDel
			});
			tempDelMember = member;
		};

		function deActivateAlert(member){
			var users = vm.members.filter(function(member) {
				return member.isUser;
			});
			if (users.length == 1 ) {
				vm.alerts.push({ 
					type : "warning",  
					msg: '每分隊至少要有1個使用者，無法取消' + member.name + "的登入權限",
				});
			} else{
				vm.alerts.push({ 
					type : "danger",  
					msg: '是否確定要解除' + member.name + "登入權限",
					execute : deActivateAccount,
					cancel : cancelDel
				});
				tempDelMember = member;
			};
		};
	
		function closeAlert(index){
			vm.alerts.splice(index,1)
		};
	}
})();
(function(){
	'use strict';

	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member', [])
		.controller('MemberIndexController',MemberIndexController);

	MemberIndexController.$inject = [ MemberSvc , $stateParams ];
	function MemberIndexController( MemberSvc , $stateParams ){
		var vm = this; 

		vm.branch = $stateParams.branch;
		MemberSvc.findByBranch($stateParams.branch).success(function(members){
			vm.members = members;
			vm.members.forEach(function(member){
				return member.workingTime = moment.duration(member.workingTime,'seconds');
			});
		});
	};
})();
(function(){
	'use strict';
	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.controller('MemberModalController',MemberModalController);

	MemberModalController.$inject = ['branch', 'MemberSvc', '$modalInstance', '$state', 'member','BranchSvc', 'UserSvc'];
	function MemberModalController(branch, MemberSvc, $modalInstance, $state, member,BranchSvc, UserSvc){
		var vm = this; 
		vm.alerts = [];
		vm.isNew  = _.isNull(member.workingTime);
		vm.save   = save;
		vm.update = update;
		vm.cancel = canel;

		vm.member = {
			id 		 	: member.id ||  "", 
			name 	 	: member.name || null , 
			title    	: "消防隊員",
			titles   	: ["消防隊員","小隊長","分隊長","中隊長","大隊長","副大隊長"],
			branch   	: member.branch || branch,
			workingTime : member.workingTime ||  1200,
			radioCode 	: member.radioCode ||  null, 
			mission  	: "瞄子手",
			missions 	: ["瞄子手","副瞄子手","司機","小組長","安全管制員","聯絡官",],
			corps	 	: UserSvc.userCorps(),
			corpss 	 	: ["第一救災救護大隊","第三救災救護大隊"],
		};

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
			vm.branches = branches; 
			if (!vm.isNew) {
				var branchArry = [];
				for (var i = branches.length - 1; i >= 0; i--) {
					branchArry.push(branches[i].name);
				};
				vm.member.branches = branchArry;
			}; 
		});

		var radioCodePrefix = function(branch){
			var suffix =  branch.split('').slice(-2).join('');
			if (suffix == "大隊" || suffix == "中隊") {
				return "北海";
			} else{
				return branch.split('').slice(0,2).join('');
			};
		};

		function save(){
			if (vm.member.name) {
				vm.member.radioCodePrefix = radioCodePrefix(vm.member.branch);
				MemberSvc.create(vm.member).success(function(){
					vm.member.workingTime = moment.duration(parseInt(vm.member.workingTime),'seconds');
				}).then(function(){
					$modalInstance.close(vm.member);
				})
			} else{

			};
		};

		function update(){
			var updateMember = {
				  memberId  : member.memberId,
				  id 		: "",
				  name 		: vm.member.name,
				  corps 	: vm.member.corps,
				  branch 	: vm.member.branch,
				  title 	: vm.member.title,
				  workingTime : vm.member.workingTime,
				  radioCode  : vm.member.radioCode,
				  radioCodePrefix : radioCodePrefix(vm.member.branch)
			}

			if (vm.member.name) {
				MemberSvc.updateByMemberId(updateMember);
				$modalInstance.close(updateMember);
			} else {
				
			};
		};
	
		function cancel(){
			$modalInstance.dismiss('cancel');
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.service('MemberSvc',MemberSvc)
	
	MemberSvc.$inject = ['$http'];
	
	function MemberSvc(){
		var svc = this; 
		svc.fetch = fetch;
		svc.findByBranch = findByBranch;
		svc.fetchOnDuty = fetchOnDuty;
		svc.create = create; 
		svc.update = update; 
		svc.updateOnDuty = updateOnDuty;
		svc.updateByMemberId = updateByMemberId;
		svc.updateIsChecked = updateIsChecked;
		svc.updateUser = updateUser;
		svc.removeUser = removeUser;
		svc.deleteMember = deleteMember;

		function fetch(){
			return $http.get('/api/members');
		};

		function findByBranch( branch ){
			return $http.get('/api/members/' + branch );
		};

		function fetchOnDuty(branch){
			return $http.get('/api/members/onDuty?branch=' + branch);
		};

		function create(member){
			return $http.post('/api/members/', member);
		};

		function update(member){
			return $http.put('/api/members/', member.id);
		};

		function updateOnDuty(member){
			return $http.put('/api/members/onDuty/findById?memberId=' + member.memberId, member);
		};

		function updateByMemberId(updateMember){
			return $http.put('/api/members/findById/' + updateMember.memberId , updateMember);
		}
		
		function updateIsChecked(memberData){
			return $http.put('/api/members?id=' + memberData.memberId, memberData)
		};
		
		function updateUser(username){
			return $http.put('/api/members/user?username='+ username);
		};
		
		function removeUser(username){
			return $http.put('/api/members/user/remove?username=' + username);
		};

		function deleteMember(member){
			return $http.delete('/api/members/' + member._id);
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.notification Module
	*
	* Description
	*/
	angular
		.module('app.notification')
		.service('NtfSvc',NtfSvc);

	NtfSvc.$inject = ['$http'];
	
	function NtfSvc($http){
		var svc = this;
		svc.fetch = fetch; 
		function fetch(){
			return $http.get('/api/ntfs');
		} ;
	};

})();
(function(){
	'use strict';

	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyCmdShowController',SafetyCmdShowController);

	SafetyCmdShowController.$inject = ['CaseSvc', 'BranchSvc', 'UserSvc', '$stateParams', 'GeoSvc'];
	
	function SafetyCmdShowController(CaseSvc, BranchSvc, UserSvc, $stateParams, GeoSvc){
		
		var vm = this; 
		var branch = UserSvc.userBranch();
	
		BranchSvc.totalListFindByName(branch).success(function(branch){
			vm.members = branch.members.filter(function(member) {
				member.limitTime = moment.duration(member.workingTime, 'seconds');
				return member.onDuty == true 
			});
		});

		CaseSvc.fetchDetails($stateParams.caseId).success(function(_case){
			vm.caseDetail = _case;
			vm.onDutyBranches = _case.branchIds;
			if (_case.location) {
				var location = JSON.parse(_case.location);
				vm.markers.mainMarker = {
					lat : Number(location.lat),
					lng : Number(location.lng),
					message : "案件標的"
				};

				vm.battleRadiuss = _case.battleRadiuss;
			};
		}).then(function(){
			vm.onDutyBranches.forEach(function(branch){
				branch.members.forEach(function(member){
					if (branch.director == member.name ) {
						branch.directorRadioCode = member.radioCodePrefix +  String(member.radioCode);
					};
					if (branch.safetyManager == member.name) {
						branch.safetyManagerRadioCode = member.radioCodePrefix + String(member.radioCode);
					};
				});

				if (vm.battleRadius) {
					vm.battleRadiuss.forEach(function(battleRadius){
						var radius = JSON.parse(battleRadius)
						if (branch.name == radius.base) {
							branch.estimatedArrivingTime =  Math.round(( radius.d / 50 ) * 60);
						};
					})		
				};
			});
		});

       GeoSvc.getGeolocationCoordinates().then(function(coord){
	        vm.nowPos.lat = coord.latitude;
	        vm.nowPos.lng = coord.longitude;
	        vm.nowPos.zoom = 17;
	        vm.markers.nowPos = {
	        	lat : vm.nowPos.lat,
	        	lng : vm.nowPos.lng,
	        	message : "現在位置"
	        }
	    })

	    angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 13
	        },
	        markers: {},
	    });		
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyIndexController',SafetyIndexController);
	SafetyIndexController.$inject = ['CaseSvc', 'UserSvc'];
	function SafetyIndexController(){
		var vm = this; 
		var userCondition = {
			branch 		: UserSvc.userBranch(),
			accessLevel : UserSvc.accessLevel(),
			corps 		: UserSvc.userCorps()
		};

		CaseSvc.fetchRelativeCase(userCondition).success(function(cases){ 
			vm.cases = cases;
			cases.forEach(function(_case){
				_case.dispatchBranches = ''
				_case.branches.forEach(function(branch){
					_case.dispatchBranches += branch + ' '
				});
			});
		});

		vm.isBranchMember = true ? UserSvc.accessLevel() < 2  : false ; 
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyManageController',SafetyManageController);
	
	SafetyManageController.$inject = ['$stateParams', '$modal', 'StSvc', '$state', 'MemberSvc','$log', 'UserSvc', 'BranchSvc', 'SocketSvc', 'CaseSvc', 'StMissionFac'];
	
	function SafetyManageController($stateParams, $modal, StSvc, $state, MemberSvc,$log, UserSvc, BranchSvc, SocketSvc, CaseSvc, StMissionFac){
		var vm = this; 
		var BRANCH 		= UserSvc.userBranch();
		var caseDetail 	= null;
		vm.quickStart 	= false;
		vm.apartment 	= true; 
		vm.ACCESSLEVEL 	= UserSvc.accessLevel();
		vm.quickOrganizing = quickOrganizing;
		vm.strikeTeam = strikeTeam;
		vm.openSettingModal = openSettingModal;
		vm.dismiss = dismiss; 

		vm.branchOptions = {
			branch : BRANCH,
			branches : []
		};

		CaseSvc.fetchById($stateParams.caseId).success(function(_case){
			caseDetail = _case;
			_case.env == '住宅火警'? vm.apartment = true : vm.apartment = false; 
			vm.branchOptions.branches = _case.branches
			vm.branchOptions.branches.splice(0,0,BRANCH);
		});

		BranchSvc.fetchByName(BRANCH).success(function(details){
			vm.details = details;
		}).then(function(){
			if (vm.ACCESSLEVEL > 1 ) {
				StSvc.fetchByCase($stateParams.caseId).success(function(sts){
					vm.strikeTeams = sts; 
				});
			} else {
				StSvc.fetch($stateParams.caseId,BRANCH).success(function(sts){
					vm.strikeTeams = sts;
					if (vm.details.dispatchNum < 8 && _.isEmpty(vm.strikeTeams)) { vm.quickStart = true  }; 
				}); 
			};
		});

		SocketSvc.on('newSt', function(st){
			if (vm.ACCESSLEVEL > 1 && angular.equals($stateParams.caseId,st.caseId) ) {
					vm.strikeTeams.push(st);
			} else {
				if (angular.equals(BRANCH,st.branch) && angular.equals($stateParams.caseId,st.caseId) ) {
					vm.strikeTeams.push(st);
				};
			};
		});

		SocketSvc.on('updateSt', function(data){
			var members = angular.copy(data.members);
			for (var i = vm.strikeTeams.length - 1; i >= 0; i--) {
				if(angular.equals(vm.strikeTeams[i]._id,data.id)){
					vm.strikeTeams[i].position 	= data.position;
					vm.strikeTeams[i].area 		= data.area;
					vm.strikeTeams[i].floor 	= data.floor;
					vm.strikeTeams[i].mission 	= data.mission;
				};
			};
		})

		SocketSvc.on('dismiss', function(st){
			var _stId = st.stId;
			vm.strikeTeams = vm.strikeTeams.filter(function(st) {				
				return st._id != _stId;
			});
		});
		
		function strikeTeam(){
			var modalInstance = $modal.open({
			  	templateUrl: 'views/safety/safety.modal.html',
			    controller: 'SafetyModalCtrl',
			    size: "md",
			    resolve : {
			    	stId : function(){
			    		if ( _.isEmpty(vm.strikeTeams)) {
			    			return 0
			    		} else{
			    			return vm.strikeTeams[vm.strikeTeams.length-1].id;
			    		};
			    	},
			    	branch : function(){
			    		return vm.branchOptions.branch;
			    	},
			    	caseDetail : function(){
			    		return caseDetail
			    	}
			    }
		    });
		};

		
		function openSettingModal(strikeTeam, id){
	        var modalInstance = $modal.open({
	            templateUrl: 'views/safety/safety.setting.modal.html',
	            controller: 'SafetySettingCtrl',
	            size: "lg",
	            resolve: {
	                strikeTeam : function(){
	                    return strikeTeam;
	                },
	                caseDetail : function(){
	                	return caseDetail;
	                }
	            }
	        });
	    };

		
		function dismiss(strikeTeam , id){

			SocketSvc.emit("dismissStrikeTeam",{
				id : strikeTeam._id,
				members : strikeTeam.members 
			});
	       	vm.strikeTeams.splice(id,1);
		};

		
		function quickOrganizing(){
			vm.quickStart = false;
		
			var members =  vm.details.members.filter(function(member) {
				if ( member.mission == '司機' || member.mission == '安全管制員' || member.mission == '救護人員') {
					return false  
				}else {
					member.isChecked = true;
					return member.onDuty;
				}
			});

			var strikeTeam = {
				id 		  : 1,
				caseId 	  : caseDetail._id,
				branch 	  : UserSvc.userBranch(),
				director  : _.pluck(members.filter(function(member) { return member.mission == '帶隊官'}),'name')[0],
				position  : StMissionFac.position().defaultPos,
				positions : StMissionFac.position().poss,
				group     : StMissionFac.groups().branch[1],
				groups    : StMissionFac.groups().branch,
				area 	  : StMissionFac.area().defaultArea,
				areas 	  : StMissionFac.area().areas,
				floor 	  : 1, 
				floors    : [1,2,3,4,5],
				memberIds : _.pluck(members,'_id'),
				members   : members,
				creator   : UserSvc.currentUser(),
			};
	      	SocketSvc.emit("createStrikeTeam", strikeTeam);
		};

		vm.$on('$destroy', function (event) {
	        SocketSvc.removeAllListeners();
	    })
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('MemberModalController',MemberModalController);

	MemberModalController.$inject = ['branch', 'MemberSvc', '$modalInstance', '$state', 'member','BranchSvc', 'UserSvc'];
	function MemberModalController(){
		var vm = this; 
		vm.alerts = [];
		vm.isNew = _.isNull(member.workingTime);
		vm.save = save;
		vm.update = update; 
		vm.cancel = cancel;  

		vm.member = {
			id 		 	: member.id ||  "", 
			name 	 	: member.name || null , 
			title    	: "消防隊員",
			titles   	: ["消防隊員","小隊長","分隊長","中隊長","大隊長","副大隊長"],
			branch   	: member.branch || branch,
			workingTime : member.workingTime ||  1200,
			radioCode 	: member.radioCode ||  null, 
			mission  	: "瞄子手",
			missions 	: ["瞄子手","副瞄子手","司機","小組長","安全管制員","聯絡官",],
			corps	 	: UserSvc.userCorps(),
			corpss 	 	: ["第一救災救護大隊","第三救災救護大隊"],
		};

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
			vm.branches = branches; 
			if (!vm.isNew) {
				var branchArry = [];
				for (var i = branches.length - 1; i >= 0; i--) {
					branchArry.push(branches[i].name);
				};
				vm.member.branches = branchArry;
			}; 
		});

		var radioCodePrefix = function(branch){
			var suffix =  branch.split('').slice(-2).join('');
			if (suffix == "大隊" || suffix == "中隊") {
				return "北海";
			} else{
				return branch.split('').slice(0,2).join('');
			};
		};

		function save(){
			if (vm.member.name) {
				vm.member.radioCodePrefix = radioCodePrefix(vm.member.branch);
				MemberSvc.create(vm.member).success(function(){
					vm.member.workingTime = moment.duration(parseInt(vm.member.workingTime),'seconds');
				}).then(function(){
					$modalInstance.close(vm.member);
				})
			};
		};

		function update(){
			var updateMember = {
				  memberId  : member.memberId,
				  id 		: "",
				  name 		: vm.member.name,
				  corps 	: vm.member.corps,
				  branch 	: vm.member.branch,
				  title 	: vm.member.title,
				  workingTime : vm.member.workingTime,
				  radioCode  : vm.member.radioCode,
				  radioCodePrefix : radioCodePrefix(vm.member.branch)
			}

			if (vm.member.name) {
				MemberSvc.updateByMemberId(updateMember);
				$modalInstance.close(updateMember);
			} else {
				
			};
		};

		function cancel(){
			$modalInstance.dismiss('cancel');
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetySettingController',SafetySettingController);

	SafetySettingController.$inject = ['strikeTeam', '$modalInstance', 'StSvc', '$state', 'MemberSvc', 'CaseSvc', '$stateParams', 'SocketSvc', 'caseDetail'];
	
	function SafetySettingController(strikeTeam, $modalInstance, StSvc, $state, MemberSvc, CaseSvc, $stateParams, SocketSvc, caseDetail){
		var vm = this; 
		vm.strikeTeam = strikeTeam;
		vm.chooseBranch = chooseBranch;
		vm.cancel = cancel;
		vm.check = check;
		vm.uncheck = uncheck;
		vm.save = save;   
		caseDetail.env == '住宅火警'? vm.apartment =  true  : vm.apartment = false 

		var newMembers = [];

		CaseSvc.fetchDetails($stateParams.caseId).success(function(details){
			vm.dispatch = details.branchIds;
			vm.currentBranch = vm.dispatch[0].name;
			var memberList = _.pluck(details.branchIds,'members');
			vm.members = []
			memberList.forEach(function(branchMembers){
				vm.members.push.apply(vm.members, branchMembers)
			});
			vm.members = vm.members.filter(function(member) { return !member.isChecked });
		})

		function chooseBranch(branch){
			vm.currentBranch = branch;
		};

		function cancel(){
			$modalInstance.dismiss('cancel');
		};

		function check(member){
			member.isChecked = !member.isChecked;
			newMembers.push(member);
		};

		function uncheck(member, id){
			member.isChecked = !member.isChecked;
			newMembers.splice(_.pluck(newMembers, '_id').indexOf(member._id),1);
		};

		function save(){
			vm.strikeTeam.members.push.apply(vm.strikeTeam.members, newMembers);
			SocketSvc.emit('updateStrikeTeam',{
				id : strikeTeam._id, 
				position : strikeTeam.position,
				area : strikeTeam.area, 
				floor : strikeTeam.floor,
				group : strikeTeam.group,
				memberIds : _.pluck(vm.strikeTeam.members,'_id'), 
				members : vm.strikeTeam.members
			});

			$modalInstance.close('dismiss');			
		};
	};

})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyShowController',SafetyShowController);

	SafetyShowController.$inject = ['CaseSvc', 'UserSvc', 'SocketSvc','GeoSvc', 'BranchSvc', '$stateParams'];

	function SafetyShowController(){
		var vm = this; 
		var branch = UserSvc.userBranch();
		
		BranchSvc.fetchByName(branch).success(function(branch){
			vm.members = branch.members.filter(function(member) {
				member.limitTime = moment.duration(member.workingTime, 'seconds');
				return member.onDuty == true 
			});
		});

		CaseSvc.fetchDetails($stateParams.caseId).success(function(_case){
			vm.caseDetail = _case;
			if (_case.location) {
				var location = JSON.parse(_case.location);
				vm.markers.mainMarker = {
					lat : Number(location.lat),
					lng : Number(location.lng),
					message : "案件標的"
				};
			};
		});

       GeoSvc.getGeolocationCoordinates().then(function(coord){
	        vm.nowPos.lat = coord.latitude;
	        vm.nowPos.lng = coord.longitude;
	        vm.nowPos.zoom = 17;
	        vm.markers.nowPos ={
	        	lat : vm.nowPos.lat,
	        	lng : vm.nowPos.lng,
	        	message : "現在位置"
	        }
	    })

	    angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 13
	        },
	        markers: {},
	    });		
	}
})();
(function(){
	'use strict';
	/**
	* app.socket Module
	*
	* Description
	*/
	angular
		.module('app.socket')
		.service('SocketSvc',SocketSvc);

	SocketSvc.$inject = ['$rootScope', 'store', '$q', '$timeout'];
	
	function SocketSvc($rootScope, store, $q, $timeout){
		var svc = this; 
		svc.init =  function(token){
	    	var authToken = null
	    	if (token) {
		      authToken = token 
			} else {
		      authToken = store.get('jwt')
		    };
		    return io.connect('http://localhost:3000',{ query : 'token=' + authToken , 'forceNew':true });
		}

	  	var socket = svc.init();

	  	svc.on =  function (eventName, callback) {
	    	svc.init().on(eventName, function () {  
		      var args = arguments;
		      $rootScope.$apply(function () {
		        callback.apply(socket, args);
		      });
		    });
		};

	  	svc.emit =  function (eventName, data, callback) {
	    	svc.init().emit(eventName, data, function () {
	      		var args = arguments;
	      		$rootScope.$apply(function () {
	        		if (callback) {
	          			callback.apply(socket, args);
	        		};
	      		});
	    	})
	  	};

		svc.removeAllListeners = function (eventName, callback) {
		    svc.init().removeAllListeners(eventName, function() {
		        var args = arguments;
		        $rootScope.$apply(function () {
		          callback.apply(socket, args);
		        });
		    }); 
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.strikeTeam Module
	*
	* Description
	*/
	angular
		.module('app.strikeTeam', [])
		.factory('StMissionFac',StMissionFac);

	StMissionFac.$inject = [];
	function StMissionFac(){
		return {
			groups: function(){
				return {
					corps : [ "聯絡組" , "水源組" , "後勤組"],
					squadron : [""],
					branch : ["帶隊官","滅火小組","搜救小組","搶救小組","後勤小組"],
					preSt  : ["搜救小組","搶救小組","滅火小組"]
				}
			},
			position : function(){
				return {
					defaultPos : "第一面",
					poss : ["第一面","第二面","第三面","第四面"]
				}
			},
			area : function(){
				return {
					defaultArea : "第一區",
					areas : ["第一區","第二區","第三區","第四區","第五區"]
				};
			}
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.strikTeam Module
	*
	* Description
	*/
	angular
		.module('app.strikTeam')
		.serivce('StSvc',StSvc);
		
	StSvc.$inject = ['$http'];

	function StSvc(){
		var svc = this; 
		svc.fetch = fetch;
		svc.fetchByCase = fetchByCase;
		svc.findById = findById;
		svc.dismissSt = dismissSt;
		svc.updateSt = updateSt;
		svc.updateTimeRecord = updateTimeRecord;
		svc.create = create;
		svc.count = count; 

		function fetch(caseId, branch){
			return $http.get('/api/strikeTeams?caseId=' + caseId + '&branch=' + branch);
		};
	
		function fetchByCase(caseId){
			return $http.get('/api/strikeTeams/total?caseId=' + caseId);
		};
		
		function findById(caseId){
			return $http.get('/api/strikeTeams/' + caseId);
		};

		function dismissSt(data){
			return $http.put('/api/strikeTeams/dismiss?id=' + data.id);
		};

		function updateSt(data){
			return $http.put('/api/strikeTeams/update?id=' + data.id, data);
		};

		function updateTimeRecord(data){
			return $http.put('/api/strikeTeams/time?id=' + data.id, data);
		};

		function create(strikeTeam){
			return $http.post('/api/strikeTeams', strikeTeam);
		};
		
		function count(caseId){
			return $http.get('/api/strikeTeams/count?caseId=' + caseId);
		};
	}

})();
(function(){
	'use strict';

	/**
	* app.timer Module
	*
	* Description
	*/
	angular
		.module('app.timer')
		.controller('TimerController',TimerController);

	TimerController.$inject = ['SocketSvc'];

	function TimerController(){
		var vm = this; 
		vm.timerRunning = false;
		vm.startTimer = startTimer;
		vm.stopTimer = stopTimer;
	    
	    function startTimer(st, id){
	    	vm.$broadcast('timer-start');
	    	vm.timerRunning = true;
	        SocketSvc.emit('timer', { stId : st._id, timerRunning : true } )
	    };
	    
	    function stopTimer(st,id){
	    	vm.$broadcast('timer-stop');
	    	vm.timerRunning = false;
	        SocketSvc.emit('timer', { stId : st._id, timerRunning : false } )
	    };
	};

})();
(function(){
	'use strict';
	/**
	* app.summary Module
	*
	* Description
	*/
	angular
		.module('app.summary')
		.controller('SummaryController',SummaryController);

	SummaryController.$inject = ['StSvc', '$stateParams', '$interval', '$state', 'SocketSvc', 'CaseSvc'];
	function SummaryController(){
		var vm = this; 
		vm.isCollapsed = true ;
		vm.members = [];

		SocketSvc.on('timerRunning',function(st){
			for (var i = vm.strikeTeams.length - 1; i >= 0; i--) {
				if( angular.equals(vm.strikeTeams[i]._id, st.stId)){
					return vm.strikeTeams[i].timerRunning = st.timerRunning;
				}
			};
		})

		SocketSvc.on('progressUpdate',function(data){
			for (var i = vm.strikeTeams.length - 1; i >= 0; i--) {
				if( angular.equals(vm.strikeTeams[i]._id, data.id) ){
					vm.strikeTeams[i].timer	= moment.duration(data.millis); 
					vm.strikeTeams[i].progress  = data.progress;
					vm.strikeTeams[i].progressState =  data.progressState;
				}
			};
		})

		SocketSvc.on('newSt', function(st){
			if ( angular.equals(caseId,st.caseId)) {
				var newSt = angular.copy(st);
				return vm.strikeTeams.push(newSt);
			};
			vm.deploys = initTable(vm.strikeTeams);
		});

		

		SocketSvc.on('updateSt', function(data){
			StSvc.fetchByCase(caseId).success(function(strikeTeams){
				vm.strikeTeams = strikeTeams;
				vm.strikeTeams.forEach(function(st){
					st.limitTime = moment.duration(st.workingTime,'seconds');
				});
				vm.deploys = initTable(vm.strikeTeams);
			});

		})

		SocketSvc.on('dismiss', function(data){
			StSvc.fetchByCase(caseId).success(function(strikeTeams){
				vm.strikeTeams = strikeTeams;
				vm.deploys = initTable(vm.strikeTeams);
			});
		});


		var caseId = $stateParams.caseId;
		CaseSvc.fetchById(caseId).success(function(_case){
			_case.env == '住宅火警' ? vm.apartment = true : vm.apartment = false;
			vm.caseDetail = _case;
			vm.position = {
				defaultPos 	: "第一面",
				positions 	: ["第一面","第二面","第三面","第四面"],
				floor 		: vm.caseDetail.floor,
				floors  	: vm.caseDetail.floor < 5? _.range(1,6,1) : _.range(vm.caseDetail.floor-2,vm.caseDetail.floor+3,1)
			};
		})

		StSvc.fetchByCase(caseId).success(function(strikeTeams){
			if (strikeTeams) {
				vm.strikeTeams = strikeTeams;
				vm.strikeTeams.forEach(function(st){
					st.limitTime = moment.duration(st.workingTime,'seconds');
				});
				vm.deploys = initTable(vm.strikeTeams);
			} else {
				return 
			};
		});



		var initTable =  function(strikeTeams){
		  	var deployArray = _.range(4).map(function () {
		        return _.range(5).map(function () {
		            return { totalMember : 0, stTotal : 0 , sts : [] } ;
		        });
		    });

			if ( strikeTeams ){
				for (var i = strikeTeams.length - 1; i >= 0; i--) {
					var totalMember = 0;
					var y = null;
					var st = 0;
					var x = _.indexOf(strikeTeams[i].positions, strikeTeams[i].position);
					vm.apartment ? y = _.indexOf(strikeTeams[i].floors, strikeTeams[i].floor) : y = _.indexOf(strikeTeams[i].areas, strikeTeams[i].area)
					deployArray[x][y].stTotal += 1;
					deployArray[x][y].totalMember += strikeTeams[i].members.length;
					var stInFo = {};
					stInFo.id = strikeTeams[i].branch + strikeTeams[i].id
					stInFo.number = strikeTeams[i].members.length;
					stInFo.group = strikeTeams[i].group;
					deployArray[x][y].sts.push(stInFo);
				};
			}
			return deployArray
		};
		
		vm.$on('$destroy', function (event) {
	        SocketSvc.removeAllListeners();
	    });
	};
})();
(function(){
	'use strict';
	/**
	* app.user Module
	*
	* Description
	*/
	angular
		.module('app.user')
		.service('UserSvc',UserSvc);

	UserSvc.$inject = ['$http', 'store', 'jwtHelper'];
	function UserSvc(){
		var svc = this; 
		svc.fetchOnlineUser = fetchOnlineUser;
		svc.activate = activate;
		svc.removeUser = removeUser;
		svc.login = login;
		svc.isLoggedIn = isLoggedIn;
		svc.isValid = isValid;
		svc.userBranch = userBranch;
		svc.userCorps = userCorps;
		svc.currentUser = currentUser;
		svc.currentAccount = currentAccount;
		svc.accessLevel = accessLevel;
		svc.caseId = caseId;


		function fetchOnlineUser(){
			return $http.get('/api/users/userState');
		};

		function activate(user){
			return $http.post('/api/users', user);
		};

		function removeUser(username){
			return $http.delete('/api/users/delete?username=' + username);
		};

		function login(user){
			return $http.post('/api/users/authenticate', user);
		};

		function isLoggedIn(){
			return store.get('jwt');
		};

		function isValid( branch ){
			if (svc.isLoggedIn) {
				if (jwtHelper.decodeToken(store.get('jwt')).accessLevel > 1   || jwtHelper.decodeToken(store.get('jwt')).branch == branch) {
					return true; 
				}else {
					return false;
				};
			};

			return false 
		};

		function userBranch(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).branch;
			};
		};
	
		function userCorps(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).corps;
			};
		};
	
		function currentUser(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).username;
			};
		};
	
		function currentAccount(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).account;
			}; 
		};
	
		function accessLevel(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).accessLevel;
			};
		};
	
		function caseId(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).caseId;
			};
		};
	};

})();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5tb2R1bGUuanMiLCJjYXIvY2FyLm1vZHVsZS5qcyIsImJyYW5jaC9icmFuY2gubW9kdWxlLmpzIiwiY2FzZS9jYXNlLm1vZHVsZS5qcyIsImRhc2hib2FyZC9kYXNoYm9hcmQubW9kdWxlLmpzIiwiZGlyZWN0b3IvZGlyZWN0b3IubW9kdWxlLmpzIiwiZGlzcGF0Y2gvZGlzcGF0Y2gubW9kdWxlLmpzIiwiZHV0eWxpc3QvZHV0eWxpc3QubW9kdWxlLmpzIiwiZ2VvL2dlby5tb2R1bGUuanMiLCJtYXAvbWFwLm1vZHVsZS5qcyIsIm1lbWJlci9tZW1iZXIubW9kdWxlLmpzIiwibm90aWZpY2F0aW9uL2FwcC5ub3RpZmljYXRpb24ubW9kdWxlLmpzIiwic2FmZXR5L3NhZmV0eS5tb2R1bGUuanMiLCJzb2NrZXQvc29ja2V0Lm1vZHVsZS5qcyIsInN0cmlrZVRlYW0vc3RyaWtlVGVhbS5tb2R1bGUuanMiLCJ0aW1lci90aW1lci5tb2R1bGUuanMiLCJzdW1tYXJ5L3N1bW1hcnkubW9kdWxlLmpzIiwidXNlci91c2VyLm1vZHVsZS5qcyIsImNhci9jYXIuZWRpdC5jb250cm9sbGVyLmpzIiwiY2FyL2Nhci5pbmRleC5jb250cm9sbGVyLmpzIiwiY2FyL2Nhci5zZXJ2aWNlLmpzIiwiYnJhbmNoL2JyYW5jaC5zZXJ2aWNlLmpzIiwiY2FzZS9jYXNlLmNvbmZpcm0ubW9kYWwuY29udHJvbGxlci5qcyIsImNhc2UvY2FzZS5lZGl0LmNvbnRyb2xsZXIuanMiLCJjYXNlL2Nhc2UuaW5kZXguY29udHJvbGxlci5qcyIsImNhc2UvY2FzZS5tb2RhbC5jb250cm9sbGVyLmpzIiwiY2FzZS9jYXNlLm5ldy5jb250cm9sbGVyLmpzIiwiY2FzZS9jYXNlLnNlcnZpY2UuanMiLCJjYXNlL2Nhc2Uuc2hvdy5jb250cm9sbGVyLmpzIiwiY29yZS9sb2dpbi5jb250cm9sbGVyLmpzIiwiY29yZS9yb3V0ZXIuanMiLCJjb3JlL3RvcG5hdmJhci5jb250cm9sbGVyLmpzIiwiZGFzaGJvYXJkL2Rhc2hib2FyZC5jb250cm9sbGVyLmpzIiwiZGlyZWN0b3IvZGlyZWN0b3IuY29udHJvbGxlci5qcyIsImRpcmVjdG9yL2RpcmVjdG9yLmVkaXQuY29udHJvbGxlci5qcyIsImRpc3BhdGNoL2Rpc3BhdGNoLmNvbnRyb2xsZXIuanMiLCJkdXR5bGlzdC9kdXR5bGlzdC5jb250cm9sbGVyLmpzIiwiZ2VvL2dlby5zZXJ2aWNlLmpzIiwibWFwL21hcC5pbmRleC5jb250cm9sbGVyLmpzIiwibWVtYmVyL21lbWJlci5hY2NvdW50LmNvbnRyb2xsZXIuanMiLCJtZW1iZXIvbWVtYmVyLmVkaXQuY29udHJvbGxlci5qcyIsIm1lbWJlci9tZW1iZXIuaW5kZXguY29udHJvbGxlci5qcyIsIm1lbWJlci9tZW1iZXIubW9kYWwuY29udHJvbGxlci5qcyIsIm1lbWJlci9tZW1iZXIuc2VydmljZS5qcyIsIm5vdGlmaWNhdGlvbi9hcHAubm90aWZpY2F0aW9uLnNlcnZpY2UuanMiLCJzYWZldHkvc2FmZXR5LmNtZC5jb250cm9sbGVyLmpzIiwic2FmZXR5L3NhZmV0eS5pbmRleC5jb250cm9sbGVyLmpzIiwic2FmZXR5L3NhZmV0eS5tYW5hZ2UuY29udHJvbGxlci5qcyIsInNhZmV0eS9zYWZldHkubW9kYWwuY29udHJvbGxlci5qcyIsInNhZmV0eS9zYWZldHkuc2V0dGluZy5jb250cm9sbGVyLmpzIiwic2FmZXR5L3NhZmV0eS5zaG93LmNvbnRyb2xsZXIuanMiLCJzb2NrZXQvc29ja2V0LnNlcnZpY2UuanMiLCJzdHJpa2VUZWFtL3N0cmlrZVRlYW0uZmFjdG9yeS5qcyIsInN0cmlrZVRlYW0vc3RyaWtlVGVhbS5zZXJ2aWNlLmpzIiwidGltZXIvdGltZXIuY29udHJvbGxlci5qcyIsInN1bW1hcnkvc3VtbWFyeS5pbmRleC5jb250cm9sbGVyLmpzIiwidXNlci91c2VyLnNlcnZpY2UuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsQ0FBQSxDQUFBLFVBQUE7Q0FDQTtDQUNBLFFBQUEsT0FBQSxNQUFBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBO0VBQ0E7RUFDQTtFQUNBOzs7OztBQ2RBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQSxRQUFBLE9BQUEsV0FBQTs7QUNQQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBLGFBQUE7O0FDUkEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BLFFBQUEsT0FBQSxZQUFBO0VBQ0E7RUFDQTs7O0FDVEEsQ0FBQSxVQUFBOzs7Ozs7Q0FNQTtHQUNBLE9BQUEsZ0JBQUE7O0FDUEEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BLFFBQUEsT0FBQSxnQkFBQTs7O0FDUEEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BLFFBQUEsT0FBQSxnQkFBQTs7QUNQQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUEsUUFBQSxPQUFBLGdCQUFBOztBQ1BBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQSxRQUFBLE9BQUEsV0FBQTs7QUNQQSxDQUFBLFVBQUE7Ozs7OztDQU1BLFFBQUEsT0FBQSxXQUFBOztBQ05BLENBQUEsVUFBQTs7Ozs7O0NBTUEsUUFBQSxPQUFBLGNBQUE7O0FDTkEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BLFFBQUEsT0FBQSxvQkFBQTs7QUNQQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUEsUUFBQSxPQUFBLGFBQUE7O0FDUEEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BLFFBQUEsT0FBQSxjQUFBOztBQ1BBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQSxRQUFBLE9BQUEsaUJBQUE7O0FDUEEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BLFFBQUEsT0FBQSxhQUFBOztBQ1BBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQSxRQUFBLE9BQUEsY0FBQTs7QUNQQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUEsUUFBQSxPQUFBLFlBQUE7O0FDUEEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsb0JBQUE7O0NBRUEsa0JBQUEsVUFBQTtDQUNBLFNBQUEsbUJBQUE7O0VBRUE7OztBQ2RBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQTtHQUNBLE9BQUE7R0FDQSxXQUFBLHFCQUFBOztDQUVBLG1CQUFBLFVBQUE7Q0FDQSxTQUFBLG9CQUFBOztFQUVBOzs7QUNkQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7OztDQU9BO0dBQ0EsT0FBQTtHQUNBLE9BQUEsU0FBQTs7Q0FFQSxPQUFBLFVBQUEsQ0FBQTs7Q0FFQSxTQUFBLE9BQUEsTUFBQTtFQUNBLElBQUEsS0FBQTtFQUNBLEdBQUEsZ0JBQUE7RUFDQSxHQUFBLGdCQUFBO0VBQ0EsR0FBQSxZQUFBOztFQUVBLFNBQUEsYUFBQSxNQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUEscUJBQUE7R0FDQTs7RUFFQSxTQUFBLGVBQUEsUUFBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLHNCQUFBO0dBQ0E7O0VBRUEsU0FBQSxPQUFBLEtBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSxlQUFBLEtBQUEsS0FBQTtHQUNBO0VBQ0E7O0FDL0JBLENBQUEsVUFBQTs7Ozs7OztDQU9BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsWUFBQTs7Q0FFQSxVQUFBLFVBQUEsQ0FBQTtDQUNBLFNBQUEsVUFBQSxNQUFBO0VBQ0EsSUFBQSxNQUFBO0VBQ0EsSUFBQSxnQkFBQTtFQUNBLElBQUEsZUFBQTtFQUNBLElBQUEsc0JBQUE7RUFDQSxJQUFBLGVBQUE7RUFDQSxJQUFBLHNCQUFBO0VBQ0EsSUFBQSxZQUFBO0VBQ0EsSUFBQSxpQkFBQTs7RUFFQSxTQUFBLGFBQUEsTUFBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLHlCQUFBO0dBQ0E7O0VBRUEsU0FBQSxZQUFBLE9BQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSwwQkFBQTtHQUNBOztFQUVBLFNBQUEsb0JBQUEsT0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLG1CQUFBOzs7RUFHQSxTQUFBLFdBQUEsR0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLG1CQUFBO0dBQ0E7O0VBRUEsU0FBQSxvQkFBQSxTQUFBO0dBQ0EsT0FBQSxNQUFBLEtBQUEsdUJBQUE7R0FDQTs7RUFFQSxTQUFBLE9BQUEsS0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLG1CQUFBLEtBQUEsU0FBQTtHQUNBOztFQUVBLFNBQUEsY0FBQSxLQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUEsMEJBQUEsS0FBQSxRQUFBO0dBQ0E7RUFDQTs7O0FDakRBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQTtHQUNBLE9BQUE7R0FDQSxXQUFBLHdCQUFBOztDQUVBLHNCQUFBLFVBQUEsQ0FBQSxXQUFBLFdBQUEsZUFBQSxTQUFBO0NBQ0EsU0FBQSxzQkFBQSxTQUFBLFNBQUEsYUFBQSxPQUFBLGVBQUE7RUFDQSxJQUFBLEtBQUE7O0VBRUEsR0FBQSxPQUFBO0VBQ0EsR0FBQSxPQUFBO0VBQ0EsR0FBQSxXQUFBO0dBQ0EsS0FBQSxhQUFBO0dBQ0EsUUFBQSxTQUFBLE9BQUE7OztFQUdBLFNBQUEsTUFBQTtHQUNBLFFBQUEsTUFBQSxHQUFBLE1BQUEsUUFBQSxTQUFBLEtBQUE7SUFDQSxRQUFBLFVBQUEsR0FBQSxVQUFBLFFBQUEsVUFBQTtLQUNBLGVBQUEsUUFBQTtLQUNBLE9BQUEsR0FBQTs7O0dBR0E7RUFDQTs7QUM5QkEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEscUJBQUE7O0NBRUEsbUJBQUEsVUFBQSxDQUFBLGdCQUFBLFdBQUEsVUFBQSxXQUFBLGFBQUEsV0FBQSxTQUFBOztDQUVBLFNBQUEsbUJBQUEsY0FBQSxTQUFBLFFBQUEsU0FBQSxXQUFBLFNBQUEsT0FBQSxPQUFBO0VBQ0EsSUFBQSxLQUFBO0VBQ0EsSUFBQSxnQkFBQTtFQUNBLEdBQUEsaUJBQUE7RUFDQSxHQUFBLGNBQUE7RUFDQSxHQUFBLGlCQUFBO0VBQ0EsR0FBQSxpQkFBQTtFQUNBLEdBQUEsV0FBQTs7RUFFQSxRQUFBLE9BQUEsSUFBQTtTQUNBLFFBQUE7YUFDQSxLQUFBO2FBQ0EsS0FBQTthQUNBLE1BQUE7O1NBRUEsVUFBQTthQUNBLE1BQUE7Ozs7RUFJQSxJQUFBLFNBQUEsYUFBQTs7RUFFQSxVQUFBLGFBQUEsUUFBQSxhQUFBLFFBQUEsU0FBQSxTQUFBO01BQ0EsR0FBQSxXQUFBO01BQ0EsR0FBQSxnQkFBQSxTQUFBLEdBQUE7OztFQUdBLFNBQUEsYUFBQSxPQUFBO01BQ0EsR0FBQSxnQkFBQSxPQUFBO01BQ0E7O0VBRUEsVUFBQSxhQUFBLFFBQUEsYUFBQSxRQUFBLFNBQUEsU0FBQTtNQUNBLEdBQUEsV0FBQTtNQUNBLEdBQUEsZ0JBQUEsU0FBQSxHQUFBOzs7RUFHQSxRQUFBLFVBQUEsUUFBQSxRQUFBLFNBQUEsTUFBQTtHQUNBLEdBQUEsY0FBQTtHQUNBLEdBQUEsZUFBQSxFQUFBLE1BQUEsTUFBQSxNQUFBLGFBQUEsS0FBQTtHQUNBLEdBQUEsWUFBQSxTQUFBLEVBQUEsTUFBQSxNQUFBLEtBQUE7S0FDQSxLQUFBLFVBQUE7R0FDQSxPQUFBLGFBQUEsUUFBQSxhQUFBLFFBQUEsU0FBQSxLQUFBO0lBQ0EsR0FBQSxPQUFBO0lBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxJQUFBLEdBQUEsS0FBQSxRQUFBLEtBQUE7S0FDQSxLQUFBLEdBQUEsWUFBQSxPQUFBLFFBQUEsR0FBQSxLQUFBLEdBQUEsT0FBQSxDQUFBLElBQUE7TUFDQSxHQUFBLEtBQUEsR0FBQSxZQUFBO01BQ0EsYUFBQSxLQUFBLEdBQUEsS0FBQTtNQUNBO0tBQ0E7OztHQUdBLE9BQUEsUUFBQSxRQUFBLFNBQUEsS0FBQTtJQUNBLEdBQUEsT0FBQTtJQUNBLEdBQUEsWUFBQSxPQUFBLEVBQUEsTUFBQSxLQUFBO0lBQ0EsR0FBQSxZQUFBLE9BQUEsR0FBQSxZQUFBLEtBQUE7Ozs7RUFJQSxTQUFBLFlBQUEsYUFBQTtHQUNBLElBQUEsV0FBQSxFQUFBLE9BQUE7R0FDQSxJQUFBLFlBQUE7R0FDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxTQUFBLFFBQUEsS0FBQTtJQUNBLElBQUEsU0FBQSxRQUFBLEdBQUEsU0FBQSxHQUFBLFFBQUEsQ0FBQSxHQUFBO0tBQ0EsVUFBQSxLQUFBLEdBQUEsU0FBQSxHQUFBO0tBQ0E7SUFDQTtHQUNBLFFBQUE7R0FDQTs7RUFFQSxTQUFBLFVBQUEsS0FBQTtHQUNBLElBQUEsWUFBQTtHQUNBLGFBQUEsS0FBQTtHQUNBLEdBQUEsZUFBQSxFQUFBLE1BQUEsY0FBQSxhQUFBLEtBQUE7R0FDQTs7RUFFQSxTQUFBLGVBQUEsSUFBQTtHQUNBLElBQUEsWUFBQTtHQUNBLGFBQUEsT0FBQSxFQUFBLE1BQUEsY0FBQSxPQUFBLFFBQUEsSUFBQSxLQUFBO0dBQ0EsR0FBQSxlQUFBLEVBQUEsTUFBQSxjQUFBLGFBQUEsS0FBQTtHQUNBOztFQUVBLFNBQUEsTUFBQTtHQUNBLElBQUE7O0dBRUEsR0FBQSxLQUFBLFFBQUEsU0FBQSxJQUFBLEdBQUE7SUFDQSxJQUFBLElBQUEsUUFBQSxHQUFBLFlBQUEsTUFBQTtLQUNBLGNBQUEsR0FBQSxLQUFBO0tBQ0E7O0dBRUEsUUFBQSxPQUFBO0lBQ0EsWUFBQSxHQUFBLFlBQUE7SUFDQSxZQUFBLEdBQUEsWUFBQSxXQUFBO0lBQ0Esa0JBQUEsUUFBQSxrQkFBQTtJQUNBLFlBQUEsR0FBQSxZQUFBLFFBQUE7SUFDQSxXQUFBLEdBQUEsWUFBQTtJQUNBLFlBQUEsR0FBQSxZQUFBLFNBQUE7SUFDQSxZQUFBLEVBQUEsT0FBQSxFQUFBLE1BQUEsY0FBQTtJQUNBLFlBQUEsWUFBQSxHQUFBLFlBQUE7TUFDQSxZQUFBLEVBQUEsTUFBQSxhQUFBO0lBQ0EsWUFBQTtJQUNBLFdBQUEsUUFBQTtJQUNBLFNBQUEsR0FBQSxZQUFBO0lBQ0EsVUFBQSxHQUFBLFlBQUE7SUFDQSxXQUFBLEdBQUEsWUFBQTtJQUNBLFlBQUEsV0FBQTtJQUNBLGFBQUEsU0FBQSxPQUFBO01BQ0EsUUFBQSxVQUFBO0lBQ0EsUUFBQSxRQUFBOztHQUVBOztFQUVBLFNBQUEsZ0JBQUE7R0FDQSxJQUFBLGdCQUFBLE9BQUEsS0FBQTtNQUNBLGFBQUE7T0FDQSxZQUFBO09BQ0EsTUFBQTs7R0FFQTs7O0FDbElBLENBQUEsVUFBQTtDQUNBOztDQUVBO0dBQ0EsT0FBQTtHQUNBLFdBQUEsaUJBQUE7O0NBRUEsZUFBQSxVQUFBLENBQUEsZUFBQSxTQUFBLFdBQUEsUUFBQSxhQUFBLFdBQUE7Q0FDQSxTQUFBLGVBQUEsYUFBQSxPQUFBLFNBQUEsTUFBQSxXQUFBLFNBQUEsVUFBQTtFQUNBLElBQUEsS0FBQTtFQUNBLEdBQUEsWUFBQTtFQUNBLEdBQUEsZUFBQTtFQUNBLEdBQUEsZUFBQTtFQUNBLEdBQUEsZUFBQTtFQUNBLEdBQUEsZUFBQTtFQUNBLEdBQUEsV0FBQTs7RUFFQSxHQUFBOztFQUVBLFNBQUEsYUFBQTtHQUNBLFFBQUEsTUFBQSxRQUFBLGFBQUEsR0FBQSxjQUFBLEdBQUEsZUFBQSxRQUFBLFNBQUEsS0FBQTtJQUNBLEdBQUEsUUFBQSxLQUFBOztHQUVBOztFQUVBLFNBQUEsWUFBQTtHQUNBLFFBQUEsTUFBQSxRQUFBLGFBQUEsR0FBQSxhQUFBLEdBQUEsY0FBQSxRQUFBLFNBQUEsS0FBQTtJQUNBLEdBQUEsUUFBQSxLQUFBO0lBQ0EsR0FBQSxhQUFBLEtBQUE7O0dBRUE7O0VBRUEsU0FBQSxPQUFBLEdBQUE7R0FDQSxRQUFBLFVBQUEsR0FBQSxNQUFBLElBQUEsS0FBQSxRQUFBLFNBQUEsTUFBQTtLQUNBLEdBQUEsY0FBQTs7R0FFQTs7RUFFQSxVQUFBLEdBQUEsVUFBQSxTQUFBLE1BQUE7R0FDQSxHQUFBLE1BQUEsUUFBQTs7O0VBR0EsVUFBQSxHQUFBLGVBQUEsU0FBQSxNQUFBO0dBQ0EsR0FBQSxNQUFBLE1BQUEsT0FBQSxLQUFBOztFQUVBOzs7QUM3Q0EsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsc0JBQUE7O0NBRUEsb0JBQUEsVUFBQSxDQUFBLFVBQUEsa0JBQUEsVUFBQSxVQUFBLFNBQUEsZUFBQSxTQUFBLFdBQUEsYUFBQSxXQUFBOztDQUVBLFNBQUEsb0JBQUEsUUFBQSxnQkFBQSxRQUFBLFFBQUEsT0FBQSxhQUFBLE9BQUEsU0FBQSxXQUFBLFNBQUEsT0FBQTtFQUNBLElBQUEsS0FBQTtFQUNBLEdBQUEsWUFBQTtFQUNBLEdBQUEsZUFBQSxHQUFBLFFBQUEsYUFBQSxLQUFBO0VBQ0EsR0FBQSxVQUFBO0dBQ0EsVUFBQSxZQUFBLFdBQUE7R0FDQSxRQUFBLFlBQUEsU0FBQTtNQUNBLE9BQUEsWUFBQSxTQUFBO01BQ0EsUUFBQSxFQUFBLE1BQUEsTUFBQSxNQUFBLEtBQUE7TUFDQSxRQUFBO01BQ0EsUUFBQSxDQUFBLE9BQUEsV0FBQSxRQUFBO01BQ0EsUUFBQTtNQUNBLFNBQUEsY0FBQSxhQUFBLFdBQUE7TUFDQSxlQUFBLGNBQUEsYUFBQSxpQkFBQTtNQUNBLFdBQUEsY0FBQSxhQUFBLGFBQUE7O0VBRUEsR0FBQSxXQUFBO0VBQ0EsR0FBQSxZQUFBO0VBQ0EsR0FBQSxXQUFBO0VBQ0EsR0FBQSxpQkFBQTtFQUNBLEdBQUEsWUFBQTtFQUNBLEdBQUEsWUFBQTtFQUNBLEdBQUEsU0FBQTs7RUFFQSxJQUFBLEVBQUEsUUFBQSxjQUFBO0dBQ0EsR0FBQSxRQUFBO0dBQ0EsVUFBQTtPQUNBO0dBQ0EsR0FBQSxRQUFBO0dBQ0EsSUFBQSxVQUFBLFlBQUE7R0FDQTs7RUFFQSxPQUFBLFFBQUEsUUFBQSxTQUFBLEtBQUE7R0FDQSxHQUFBLFVBQUEsT0FBQTtLQUNBLEtBQUEsVUFBQTtHQUNBLEdBQUEsVUFBQSxNQUFBLEdBQUEsVUFBQSxLQUFBOzs7RUFHQSxVQUFBLGFBQUEsUUFBQSxhQUFBLFFBQUEsU0FBQSxTQUFBO01BQ0EsR0FBQSxXQUFBOzs7RUFHQSxTQUFBLGNBQUEsSUFBQTtHQUNBLElBQUEsZUFBQTtHQUNBLElBQUEsU0FBQTtHQUNBLElBQUEsV0FBQTs7R0FFQSxJQUFBLElBQUEsTUFBQTtJQUNBLEtBQUEsSUFBQSxJQUFBLElBQUEsS0FBQSxTQUFBLEdBQUEsS0FBQSxHQUFBLEtBQUE7S0FDQSxhQUFBLEtBQUEsSUFBQSxLQUFBLEdBQUE7S0FDQSxPQUFBLEtBQUEsSUFBQSxLQUFBLEdBQUE7S0FDQSxTQUFBLEtBQUEsSUFBQSxLQUFBLEdBQUE7S0FDQTtJQUNBLE9BQUEsQ0FBQSxlQUFBLGVBQUEsU0FBQSxTQUFBLFlBQUE7O1FBRUE7SUFDQSxPQUFBO0lBQ0E7R0FDQTs7RUFFQSxTQUFBLFlBQUEsYUFBQTtHQUNBLElBQUEsV0FBQSxFQUFBLE9BQUE7R0FDQSxJQUFBLFlBQUE7R0FDQSxLQUFBLElBQUEsSUFBQSxHQUFBLElBQUEsR0FBQSxTQUFBLFFBQUEsS0FBQTtJQUNBLElBQUEsU0FBQSxRQUFBLEdBQUEsU0FBQSxHQUFBLFFBQUEsQ0FBQSxHQUFBO0tBQ0EsVUFBQSxLQUFBLEdBQUEsU0FBQSxHQUFBO0tBQ0E7SUFDQTtHQUNBLFFBQUE7R0FDQTs7RUFFQSxTQUFBLFNBQUEsUUFBQTtJQUNBLE9BQUEsY0FBQSxPQUFBLE1BQUEsUUFBQSxTQUFBLEtBQUE7S0FDQSxLQUFBLElBQUEsSUFBQSxLQUFBLFNBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQTtNQUNBLElBQUEsR0FBQSxRQUFBLE9BQUEsUUFBQSxLQUFBLEdBQUEsT0FBQSxDQUFBLElBQUE7T0FDQSxLQUFBLEdBQUEsWUFBQTtPQUNBO01BQ0E7S0FDQSxHQUFBLE9BQUE7O0dBRUE7O0VBRUEsU0FBQSxTQUFBO0dBQ0EsZUFBQSxRQUFBO0dBQ0E7O0VBRUEsU0FBQSxlQUFBLElBQUE7R0FDQSxJQUFBLFlBQUE7R0FDQSxRQUFBLE9BQUEsUUFBQSxRQUFBLEtBQUE7R0FDQSxHQUFBLFFBQUEsT0FBQSxPQUFBLEdBQUEsUUFBQSxhQUFBLFFBQUEsSUFBQSxLQUFBO0dBQ0EsR0FBQSxRQUFBLGFBQUEsT0FBQSxHQUFBLFFBQUEsYUFBQSxRQUFBLElBQUEsV0FBQTtHQUNBLEdBQUEsUUFBQSxTQUFBLE9BQUEsR0FBQSxRQUFBLGFBQUEsUUFBQSxJQUFBLFFBQUE7R0FDQSxHQUFBLGVBQUEsR0FBQSxRQUFBLGFBQUEsS0FBQTtHQUNBOztFQUVBLFNBQUEsVUFBQSxLQUFBO0dBQ0EsSUFBQSxZQUFBO0dBQ0EsUUFBQSxLQUFBO0dBQ0EsR0FBQSxRQUFBLE9BQUEsS0FBQSxJQUFBO0dBQ0EsR0FBQSxRQUFBLGFBQUEsS0FBQSxJQUFBO0dBQ0EsR0FBQSxRQUFBLFNBQUEsS0FBQSxJQUFBO0dBQ0EsR0FBQSxlQUFBLEdBQUEsUUFBQSxhQUFBLEtBQUE7R0FDQTs7RUFFQSxTQUFBLFdBQUE7R0FDQSxNQUFBLE1BQUEsWUFBQSxLQUFBLFFBQUEsU0FBQSxNQUFBO0lBQ0EsSUFBQSxRQUFBLElBQUE7S0FDQSxRQUFBLE1BQUE7U0FDQTtLQUNBLFFBQUEsVUFBQTtNQUNBLEtBQUEsWUFBQTtNQUNBLFlBQUE7UUFDQSxRQUFBLFNBQUEsSUFBQTtNQUNBLFFBQUEsSUFBQTs7S0FFQSxlQUFBLFFBQUE7S0FDQSxPQUFBO0tBQ0E7O0dBRUE7O0VBRUEsU0FBQSxNQUFBO0dBQ0EsUUFBQSxPQUFBO0lBQ0EsV0FBQSxTQUFBO0lBQ0EsWUFBQSxHQUFBLFFBQUEsV0FBQTtJQUNBLGtCQUFBLFFBQUEsa0JBQUE7SUFDQSxZQUFBLEdBQUEsUUFBQSxRQUFBO0lBQ0EsWUFBQSxHQUFBLFFBQUEsU0FBQTtJQUNBLFlBQUEsRUFBQSxPQUFBLEdBQUEsUUFBQTtJQUNBLFlBQUEsWUFBQSxHQUFBLFFBQUE7TUFDQSxZQUFBLEdBQUEsUUFBQTtJQUNBLFlBQUE7SUFDQSxXQUFBLFFBQUE7SUFDQSxTQUFBLEdBQUEsUUFBQTtJQUNBLFdBQUEsR0FBQSxRQUFBO01BQ0EsUUFBQSxTQUFBLFFBQUE7SUFDQSxlQUFBLE1BQUE7O0dBRUE7O0VBRUEsU0FBQSxRQUFBO0dBQ0EsSUFBQSxVQUFBO0lBQ0EsS0FBQSxZQUFBO0lBQ0EsV0FBQTtJQUNBLFlBQUEsR0FBQSxRQUFBO0lBQ0Esa0JBQUEsUUFBQSxpQkFBQTtJQUNBLFlBQUEsR0FBQSxRQUFBO0lBQ0EsWUFBQSxHQUFBLFFBQUE7SUFDQSxZQUFBLEVBQUEsT0FBQSxHQUFBLFFBQUE7SUFDQSxZQUFBLFlBQUEsR0FBQSxRQUFBO01BQ0EsWUFBQSxHQUFBLFFBQUE7SUFDQSxZQUFBO0lBQ0EsU0FBQSxHQUFBLFFBQUE7SUFDQSxXQUFBLEdBQUEsUUFBQTs7O0dBR0EsUUFBQSxPQUFBO0dBQ0EsZUFBQSxRQUFBO0dBQ0E7OztBQzNLQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsV0FBQSxvQkFBQTs7Q0FFQSxrQkFBQSxVQUFBLENBQUEsVUFBQSxhQUFBLFVBQUEsVUFBQSxZQUFBLGVBQUEsZ0JBQUEsV0FBQSxXQUFBLFVBQUE7O0NBRUEsU0FBQSxrQkFBQSxRQUFBLFdBQUEsUUFBQSxRQUFBLFVBQUEsYUFBQSxjQUFBLFNBQUEsU0FBQSxRQUFBLE9BQUE7RUFDQSxJQUFBLEtBQUE7RUFDQSxHQUFBLGVBQUE7RUFDQSxHQUFBLE9BQUE7RUFDQSxHQUFBLGdCQUFBO0VBQ0EsR0FBQSxpQkFBQTtFQUNBLEdBQUEsV0FBQTtFQUNBLEdBQUEsZUFBQSxTQUFBLE9BQUE7RUFDQSxJQUFBLGdCQUFBO0VBQ0EsSUFBQSxlQUFBO0VBQ0EsSUFBQTtFQUNBLEdBQUEsZUFBQSxHQUFBLFlBQUEsYUFBQSxLQUFBOztFQUVBLEdBQUEsY0FBQTtHQUNBLFNBQUE7TUFDQSxRQUFBO01BQ0EsU0FBQSxFQUFBLE1BQUEsTUFBQSxNQUFBLEtBQUE7TUFDQSxTQUFBO01BQ0EsU0FBQSxDQUFBLE9BQUEsV0FBQSxRQUFBO01BQ0EsU0FBQTtNQUNBLFVBQUE7TUFDQSxlQUFBO01BQ0EsWUFBQTtNQUNBLFdBQUEsT0FBQTs7O0VBR0EsT0FBQSxrQkFBQSxRQUFBLGFBQUEsUUFBQSxTQUFBLFVBQUE7R0FDQSxHQUFBLFlBQUE7OztLQUdBLFFBQUEsT0FBQSxJQUFBO1NBQ0EsUUFBQTthQUNBLEtBQUEsT0FBQSxrQkFBQTthQUNBLEtBQUEsT0FBQSxrQkFBQTthQUNBLE1BQUE7O1FBRUEsU0FBQTs7O0VBR0EsVUFBQSxhQUFBLFFBQUEsYUFBQSxRQUFBLFNBQUEsU0FBQTtNQUNBLEdBQUEsV0FBQTtNQUNBLEdBQUEsZ0JBQUEsU0FBQSxHQUFBOzs7RUFHQSxPQUFBLGFBQUEsUUFBQSxhQUFBLFFBQUEsU0FBQSxLQUFBO0dBQ0EsR0FBQSxPQUFBOzs7RUFHQSxPQUFBLFFBQUEsUUFBQSxTQUFBLEtBQUE7R0FDQSxnQkFBQTtHQUNBLEdBQUEsWUFBQSxPQUFBLEVBQUEsTUFBQSxLQUFBO0dBQ0EsR0FBQSxZQUFBLE9BQUEsR0FBQSxZQUFBLEtBQUE7OztFQUdBLFNBQUEsZUFBQTtHQUNBLElBQUEsR0FBQSxZQUFBLFNBQUE7SUFDQSxPQUFBLGtCQUFBLEdBQUEsWUFBQSxTQUFBLEtBQUEsU0FBQSxJQUFBO1dBQ0EsR0FBQSxPQUFBLE1BQUEsSUFBQTtXQUNBLEdBQUEsT0FBQSxNQUFBLElBQUE7Y0FDQSxHQUFBLFFBQUEsYUFBQTtlQUNBLEtBQUEsSUFBQTtrQkFDQSxLQUFBLElBQUE7a0JBQ0EsT0FBQTtrQkFDQSxTQUFBOzs7Y0FHQSxJQUFBLEtBQUE7ZUFDQSxHQUFBLFVBQUEsUUFBQSxTQUFBLFNBQUE7Z0JBQ0EsSUFBQSxJQUFBLE9BQUEsYUFBQSxVQUFBLEVBQUEsTUFBQSxJQUFBLElBQUEsTUFBQSxJQUFBO2dCQUNBLElBQUEsZ0JBQUEsRUFBQSxPQUFBLFNBQUEsU0FBQSxLQUFBLEVBQUEsTUFBQSxJQUFBLEdBQUEsT0FBQSxJQUFBLEtBQUEsT0FBQSxFQUFBLE1BQUEsU0FBQSxLQUFBLE1BQUEsU0FBQSxPQUFBLElBQUE7Z0JBQ0EsY0FBQSxNQUFBLEtBQUEsVUFBQTs7ZUFFQTs7SUFFQTtHQUNBOztFQUVBLFNBQUEsYUFBQSxPQUFBO01BQ0EsR0FBQSxnQkFBQSxPQUFBO01BQ0E7O0VBRUEsU0FBQSxVQUFBLEtBQUE7R0FDQSxJQUFBLFlBQUE7R0FDQSxhQUFBLEtBQUE7R0FDQSxHQUFBLGVBQUEsRUFBQSxNQUFBLGNBQUEsYUFBQSxLQUFBO0dBQ0E7O0VBRUEsU0FBQSxlQUFBLElBQUE7R0FDQSxJQUFBLFlBQUE7R0FDQSxhQUFBLE9BQUEsRUFBQSxNQUFBLGNBQUEsT0FBQSxRQUFBLElBQUEsS0FBQTtHQUNBLEdBQUEsZUFBQSxFQUFBLE1BQUEsY0FBQSxhQUFBLEtBQUE7R0FDQSxHQUFBLGVBQUEsR0FBQSxZQUFBLGFBQUEsS0FBQTtHQUNBOztFQUVBLFNBQUEsTUFBQTtHQUNBLElBQUE7R0FDQSxJQUFBLFlBQUEsRUFBQSxPQUFBLEVBQUEsTUFBQSxjQUFBO0dBQ0EsSUFBQSxXQUFBLEdBQUEsU0FBQSxPQUFBLFNBQUEsUUFBQSxFQUFBLE9BQUEsU0FBQSxRQUFBLE9BQUEsUUFBQSxDQUFBOztHQUVBLGNBQUEsUUFBQSxTQUFBLElBQUEsR0FBQTtJQUNBLElBQUEsSUFBQSxRQUFBLEdBQUEsWUFBQSxLQUFBO0tBQ0EsY0FBQSxjQUFBO0tBQ0E7OztHQUdBLFFBQUEsT0FBQTtJQUNBLGtCQUFBLFFBQUEsa0JBQUE7SUFDQSxjQUFBLEdBQUEsWUFBQSxRQUFBO0lBQ0EsYUFBQSxHQUFBLFlBQUE7SUFDQSxjQUFBLEdBQUEsWUFBQSxTQUFBO0lBQ0EsY0FBQSxFQUFBLE9BQUEsRUFBQSxNQUFBLGNBQUE7SUFDQSxjQUFBLEVBQUEsTUFBQSxVQUFBO01BQ0EsY0FBQSxFQUFBLE1BQUEsYUFBQTtJQUNBLGFBQUEsUUFBQTtJQUNBLFdBQUEsR0FBQSxZQUFBO0lBQ0EsWUFBQSxHQUFBLFlBQUE7SUFDQSxhQUFBLEdBQUEsWUFBQTtJQUNBLGNBQUEsV0FBQTtJQUNBLGNBQUEsU0FBQSxPQUFBO0lBQ0EsZUFBQSxTQUFBLE9BQUE7SUFDQSxlQUFBO0tBQ0EsT0FBQSxHQUFBLFlBQUEsU0FBQTtLQUNBLE9BQUEsR0FBQSxZQUFBLFNBQUE7S0FDQSxVQUFBLEdBQUEsWUFBQSxTQUFBLFdBQUE7O0lBRUEsaUJBQUE7TUFDQSxRQUFBLFVBQUE7SUFDQSxRQUFBLFFBQUE7O0dBRUE7OztBQzlJQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxXQUFBOztDQUVBLFFBQUEsVUFBQSxDQUFBOztDQUVBLFNBQUEsU0FBQSxRQUFBO0VBQ0EsSUFBQSxNQUFBO0VBQ0EsSUFBQSxVQUFBO0VBQ0EsSUFBQSxZQUFBO0VBQ0EsSUFBQSxhQUFBO0VBQ0EsSUFBQSxvQkFBQTtFQUNBLElBQUEsZUFBQTtFQUNBLElBQUEsYUFBQTtFQUNBLElBQUEsV0FBQTtFQUNBLElBQUEsV0FBQTtFQUNBLElBQUEsV0FBQTs7RUFFQSxTQUFBLE1BQUEsT0FBQSxNQUFBLGFBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSxzQkFBQSxRQUFBLFdBQUEsT0FBQSxVQUFBO0dBQ0E7O0VBRUEsU0FBQSxVQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUE7R0FDQTs7RUFFQSxTQUFBLGtCQUFBLElBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSw4QkFBQSxJQUFBLFNBQUEsa0JBQUEsSUFBQSxjQUFBLFlBQUEsSUFBQTtHQUNBOztFQUVBLFNBQUEsYUFBQSxPQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUEsd0JBQUE7R0FDQTs7RUFFQSxTQUFBLFdBQUEsUUFBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLGdCQUFBO0dBQ0E7O0VBRUEsU0FBQSxPQUFBLFVBQUE7R0FDQSxPQUFBLE1BQUEsS0FBQSxjQUFBO0dBQ0E7O0VBRUEsU0FBQSxXQUFBLE9BQUE7R0FDQSxPQUFBLE1BQUEsS0FBQSxnQkFBQTtHQUNBOztFQUVBLFNBQUEsT0FBQSxhQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUEsZ0JBQUEsYUFBQSxTQUFBO0dBQ0E7O0VBRUEsU0FBQSxVQUFBLEtBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSx5QkFBQSxLQUFBLElBQUE7R0FDQTs7O0FDM0RBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQTtHQUNBLE9BQUE7R0FDQSxXQUFBLHNCQUFBOztFQUVBLG1CQUFBLFdBQUEsRUFBQSxTQUFBLGdCQUFBLGFBQUEsVUFBQSxhQUFBLFdBQUEsYUFBQTs7RUFFQSxTQUFBLG9CQUFBO0dBQ0EsSUFBQSxLQUFBO0dBQ0EsR0FBQSxjQUFBO0dBQ0EsR0FBQSxVQUFBO0dBQ0EsR0FBQSxZQUFBLGFBQUEsV0FBQTs7R0FFQSxVQUFBLEdBQUEsU0FBQSxTQUFBLEdBQUE7SUFDQSxLQUFBLFFBQUEsT0FBQSxPQUFBLEdBQUEsU0FBQTtLQUNBLElBQUEsUUFBQSxRQUFBLEtBQUE7S0FDQSxHQUFBLFlBQUEsS0FBQTtLQUNBO0lBQ0EsR0FBQSxVQUFBLFVBQUEsR0FBQTtJQUNBLEdBQUEsZ0JBQUEsV0FBQSxHQUFBOzs7R0FHQSxVQUFBLEdBQUEsWUFBQSxTQUFBLEtBQUE7SUFDQSxNQUFBLFlBQUEsUUFBQSxRQUFBLFNBQUEsWUFBQTtLQUNBLEdBQUEsY0FBQTtLQUNBLEdBQUEsWUFBQSxRQUFBLFNBQUEsR0FBQTtNQUNBLEdBQUEsWUFBQSxPQUFBLFNBQUEsR0FBQSxZQUFBOztLQUVBLEdBQUEsVUFBQSxVQUFBLEdBQUE7S0FDQSxHQUFBLGdCQUFBLFdBQUEsR0FBQTs7Ozs7R0FLQSxVQUFBLEdBQUEsV0FBQSxTQUFBLEtBQUE7SUFDQSxNQUFBLFlBQUEsUUFBQSxRQUFBLFNBQUEsWUFBQTtLQUNBLEdBQUEsZ0JBQUE7S0FDQSxHQUFBLGFBQUEsVUFBQSxHQUFBO0tBQ0EsR0FBQSxnQkFBQSxXQUFBLEdBQUE7Ozs7O0dBS0EsSUFBQSxTQUFBLGFBQUE7R0FDQSxRQUFBLGFBQUEsUUFBQSxRQUFBLFNBQUEsTUFBQTtJQUNBLE1BQUEsT0FBQSxTQUFBLEdBQUEsWUFBQSxPQUFBLEdBQUEsWUFBQTtJQUNBLEdBQUEsYUFBQTtJQUNBLEdBQUEsV0FBQTtLQUNBLGNBQUE7S0FDQSxhQUFBLENBQUEsTUFBQSxNQUFBLE1BQUE7S0FDQSxVQUFBLEdBQUEsV0FBQTtLQUNBLFdBQUEsR0FBQSxXQUFBLFFBQUEsR0FBQSxFQUFBLE1BQUEsRUFBQSxFQUFBLEtBQUEsRUFBQSxNQUFBLEdBQUEsV0FBQSxNQUFBLEVBQUEsR0FBQSxXQUFBLE1BQUEsRUFBQTs7OztHQUlBLE1BQUEsWUFBQSxRQUFBLFFBQUEsU0FBQSxZQUFBO0lBQ0EsSUFBQSxhQUFBO0tBQ0EsR0FBQSxjQUFBO0tBQ0EsR0FBQSxZQUFBLFFBQUEsU0FBQSxHQUFBO01BQ0EsR0FBQSxZQUFBLE9BQUEsU0FBQSxHQUFBLFlBQUE7O0tBRUEsR0FBQSxVQUFBLFVBQUEsR0FBQTtLQUNBLEdBQUEsZUFBQSxXQUFBLEdBQUE7O1dBRUE7S0FDQTtLQUNBOzs7O0dBSUEsSUFBQSxhQUFBLFNBQUEsWUFBQTtJQUNBLFFBQUEsRUFBQSxRQUFBLFlBQUEsU0FBQSxHQUFBO01BQ0EsT0FBQSxHQUFBOzs7O0dBSUEsSUFBQSxhQUFBLFNBQUEsWUFBQTtNQUNBLElBQUEsY0FBQSxFQUFBLE1BQUEsR0FBQSxJQUFBLFlBQUE7V0FDQSxPQUFBLEVBQUEsTUFBQSxHQUFBLElBQUEsWUFBQTtlQUNBLE9BQUEsRUFBQSxjQUFBLEdBQUEsVUFBQSxJQUFBLE1BQUE7Ozs7SUFJQSxLQUFBLGFBQUE7S0FDQSxLQUFBLElBQUEsSUFBQSxZQUFBLFNBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQTtNQUNBLElBQUEsY0FBQTtNQUNBLElBQUEsSUFBQTtNQUNBLElBQUEsS0FBQTtNQUNBLElBQUEsSUFBQSxFQUFBLFFBQUEsWUFBQSxHQUFBLFdBQUEsWUFBQSxHQUFBO01BQ0EsR0FBQSxZQUFBLElBQUEsRUFBQSxRQUFBLFlBQUEsR0FBQSxRQUFBLFlBQUEsR0FBQSxTQUFBLElBQUEsRUFBQSxRQUFBLFlBQUEsR0FBQSxPQUFBLFlBQUEsR0FBQTtNQUNBLFlBQUEsR0FBQSxHQUFBLFdBQUE7TUFDQSxZQUFBLEdBQUEsR0FBQSxlQUFBLFlBQUEsR0FBQSxRQUFBO01BQ0EsSUFBQSxTQUFBO01BQ0EsT0FBQSxLQUFBLFlBQUEsR0FBQSxTQUFBLFlBQUEsR0FBQTtNQUNBLE9BQUEsU0FBQSxZQUFBLEdBQUEsUUFBQTtNQUNBLE9BQUEsUUFBQSxZQUFBLEdBQUE7TUFDQSxZQUFBLEdBQUEsR0FBQSxJQUFBLEtBQUE7TUFDQTs7SUFFQSxPQUFBOzs7R0FHQSxHQUFBLElBQUEsWUFBQSxVQUFBLE9BQUE7VUFDQSxVQUFBOzs7O0FDN0dBLENBQUEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsa0JBQUE7O0VBRUEsZ0JBQUEsVUFBQSxDQUFBLFdBQUEsU0FBQSxTQUFBLFlBQUEsU0FBQTs7RUFFQSxTQUFBLGdCQUFBLFNBQUEsT0FBQSxPQUFBLFVBQUEsT0FBQSxXQUFBO0dBQ0EsSUFBQSxPQUFBO0dBQ0EsR0FBQSxRQUFBO0dBQ0EsR0FBQSxRQUFBOztHQUVBLFNBQUEsT0FBQTtJQUNBLFFBQUEsTUFBQSxHQUFBLE1BQUEsUUFBQSxTQUFBLEtBQUE7S0FDQSxJQUFBLEtBQUEsU0FBQTtNQUNBLE1BQUEsSUFBQSxNQUFBLEtBQUE7TUFDQSxNQUFBLFNBQUEsUUFBQSxPQUFBLG9CQUFBLEtBQUE7TUFDQSxPQUFBLEtBQUE7WUFDQTtNQUNBLE9BQUEsUUFBQSxJQUFBOztPQUVBLEtBQUEsU0FBQSxNQUFBO0tBQ0EsVUFBQSxLQUFBO0tBQ0EsVUFBQSxLQUFBO09BQ0EsS0FBQSxVQUFBO0tBQ0EsSUFBQSxVQUFBLFlBQUEsT0FBQSxRQUFBLFNBQUE7TUFDQSxJQUFBLGFBQUEsVUFBQSxZQUFBLE9BQUE7TUFDQSxJQUFBLFdBQUEsTUFBQSxXQUFBLE9BQUEsR0FBQSxXQUFBLFdBQUEsTUFBQTtPQUNBLE9BQUEsT0FBQSxHQUFBO1lBQ0E7T0FDQSxPQUFBLE9BQUEsR0FBQTtPQUNBO1VBQ0E7TUFDQSxPQUFBLE9BQUEsR0FBQTs7O0lBR0E7R0FDQTs7QUMzQ0EsQ0FBQSxDQUFBLFVBQUE7Q0FDQTtDQUNBO0dBQ0EsT0FBQSxhQUFBLENBQUE7R0FDQSxPQUFBOztFQUVBLGFBQUEsVUFBQSxDQUFBLGlCQUFBLHFCQUFBOztFQUVBLFNBQUEsYUFBQSxlQUFBLG9CQUFBLG1CQUFBO01BQ0E7UUFDQSxVQUFBOztNQUVBO1dBQ0EsTUFBQSxPQUFBO2NBQ0EsTUFBQTtjQUNBLFdBQUE7Y0FDQSxXQUFBOztXQUVBLE1BQUEsYUFBQTtjQUNBLE1BQUE7Y0FDQSxhQUFBO2NBQ0EsYUFBQTtjQUNBLGVBQUE7O1dBRUEsTUFBQSxXQUFBO2NBQ0EsTUFBQTtjQUNBLGNBQUE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQzFCQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBLGNBQUE7R0FDQSxXQUFBLG1CQUFBOztDQUVBLGlCQUFBLFVBQUE7Q0FDQSxTQUFBLGlCQUFBLFVBQUEsUUFBQSxXQUFBLE9BQUEsV0FBQSxTQUFBLFFBQUE7RUFDQSxJQUFBLEtBQUE7RUFDQSxHQUFBLGVBQUEsU0FBQSxPQUFBO0VBQ0EsR0FBQSxTQUFBOzs7RUFHQSxVQUFBLFVBQUE7R0FDQSxPQUFBLE9BQUE7R0FDQSxHQUFBLGVBQUEsU0FBQSxPQUFBO0tBQ0E7O0VBRUEsU0FBQSxRQUFBO0dBQ0EsSUFBQSxVQUFBLFFBQUE7R0FDQSxVQUFBLEtBQUE7R0FDQSxPQUFBLEdBQUE7R0FDQTs7OztBQzNCQSxDQUFBLFVBQUE7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsc0JBQUE7O0NBRUEsb0JBQUEsVUFBQSxDQUFBLGFBQUEsYUFBQSxXQUFBO0NBQ0EsU0FBQSxvQkFBQSxXQUFBLFdBQUEsU0FBQSxVQUFBO0VBQ0EsSUFBQSxLQUFBOztFQUVBLFVBQUEsYUFBQSxRQUFBLGFBQUEsUUFBQSxTQUFBLFNBQUE7R0FDQSxPQUFBLEdBQUEsV0FBQTs7O0VBR0EsUUFBQSxrQkFBQSxRQUFBLFNBQUEsTUFBQTtHQUNBLE9BQUEsR0FBQSxRQUFBOzs7RUFHQSxVQUFBLEdBQUEsWUFBQSxTQUFBLEtBQUE7R0FDQSxPQUFBLEdBQUEsTUFBQSxLQUFBOzs7RUFHQSxVQUFBLEdBQUEsaUJBQUEsU0FBQSxlQUFBO0dBQ0EsR0FBQSxRQUFBLEdBQUEsTUFBQSxPQUFBLFNBQUEsTUFBQTtJQUNBLE9BQUEsS0FBQSxZQUFBLGVBQUE7Ozs7RUFJQSxVQUFBLEdBQUEsYUFBQSxTQUFBLFdBQUE7R0FDQSxHQUFBLFFBQUEsR0FBQSxNQUFBLE9BQUEsU0FBQSxNQUFBO0lBQ0EsT0FBQSxLQUFBLFlBQUEsV0FBQTs7OztFQUlBLEdBQUEsSUFBQSxZQUFBLFVBQUEsT0FBQTtTQUNBLE9BQUEsVUFBQTs7OztBQ3ZDQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsV0FBQSx3QkFBQTs7Q0FFQSxzQkFBQSxVQUFBLENBQUEsV0FBQTs7Q0FFQSxTQUFBLHVCQUFBLFVBQUEsV0FBQTtFQUNBLElBQUEsS0FBQTtFQUNBLElBQUEsU0FBQSxRQUFBOztFQUVBLFVBQUEsWUFBQSxRQUFBLFFBQUEsU0FBQSxPQUFBO0dBQ0EsR0FBQSxXQUFBO0dBQ0EsR0FBQSxlQUFBLEdBQUEsT0FBQSxRQUFBLE9BQUEsU0FBQSxRQUFBO0lBQ0EsT0FBQSxPQUFBLFVBQUE7OztFQUdBOztBQ3ZCQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsV0FBQSw0QkFBQTs7Q0FFQSwwQkFBQSxVQUFBLENBQUEsYUFBQSxlQUFBLGFBQUEsYUFBQSxXQUFBLFdBQUEsVUFBQTs7Q0FFQSxTQUFBLDBCQUFBLFdBQUEsYUFBQSxXQUFBLFdBQUEsU0FBQSxTQUFBLFFBQUEsYUFBQTtFQUNBLElBQUEsS0FBQTtFQUNBLElBQUEsVUFBQSxRQUFBO0VBQ0EsR0FBQSxTQUFBO0VBQ0EsR0FBQSxRQUFBOztFQUVBLFVBQUEsWUFBQSxRQUFBLFFBQUEsU0FBQSxPQUFBO0dBQ0EsR0FBQSxTQUFBO0dBQ0EsR0FBQSxXQUFBLE9BQUEsT0FBQSxLQUFBLE1BQUEsUUFBQSxLQUFBO0dBQ0EsSUFBQSxVQUFBLEVBQUEsTUFBQSxPQUFBLFFBQUEsT0FBQSxTQUFBLFFBQUEsRUFBQSxPQUFBLE9BQUEsUUFBQSxRQUFBO0dBQ0EsR0FBQSxPQUFBLGlCQUFBLE9BQUE7R0FDQSxHQUFBLE9BQUEsa0JBQUE7R0FDQSxHQUFBLGNBQUE7R0FDQSxFQUFBLElBQUEsR0FBQSxPQUFBLFFBQUEsU0FBQSxPQUFBO0lBQ0EsT0FBQSxXQUFBLEVBQUEsTUFBQSxFQUFBLEtBQUEsTUFBQSxHQUFBLE9BQUEsUUFBQSxPQUFBLEdBQUE7SUFDQSxPQUFBLFVBQUEsT0FBQSxRQUFBLE9BQUE7Ozs7RUFJQSxTQUFBLE1BQUEsT0FBQTtHQUNBLE9BQUEsV0FBQSxDQUFBLE9BQUE7R0FDQSxPQUFBLFlBQUEsQ0FBQSxPQUFBO0dBQ0EsT0FBQSxZQUFBLE9BQUEsUUFBQSxPQUFBO0dBQ0E7OztFQUdBLFNBQUEsTUFBQTtHQUNBLElBQUEsaUJBQUEsR0FBQSxPQUFBLFFBQUEsT0FBQSxTQUFBLFFBQUE7SUFDQSxPQUFBLE9BQUE7OztHQUdBLFVBQUEsY0FBQTtJQUNBLGFBQUEsR0FBQSxPQUFBO0lBQ0EsYUFBQSxHQUFBLE9BQUE7SUFDQSxlQUFBLGVBQUE7SUFDQSxpQkFBQSxHQUFBLE9BQUE7SUFDQSxZQUFBLEdBQUEsT0FBQTs7R0FFQSxRQUFBLFFBQUE7R0FDQTtFQUNBOzs7QUNyREEsQ0FBQSxVQUFBO0NBQ0E7Ozs7Ozs7Q0FPQTtHQUNBLE9BQUEsZ0JBQUE7R0FDQSxXQUFBLHFCQUFBOztDQUVBLG1CQUFBLFVBQUEsQ0FBQSxlQUFBLFNBQUEsVUFBQSxhQUFBLFVBQUE7Q0FDQSxTQUFBLG1CQUFBLGFBQUEsT0FBQSxRQUFBLFdBQUEsUUFBQSxRQUFBO0VBQ0EsSUFBQSxLQUFBO0VBQ0EsUUFBQSxNQUFBLFFBQUEsYUFBQSxRQUFBLFNBQUEsTUFBQTtHQUNBLEdBQUEsUUFBQTtHQUNBLFFBQUEsVUFBQSxHQUFBLE1BQUEsYUFBQSxRQUFBLEtBQUEsUUFBQSxTQUFBLE1BQUE7S0FDQSxPQUFBLEdBQUEsY0FBQTs7OztFQUlBLFVBQUEsYUFBQSxRQUFBLGFBQUEsUUFBQSxTQUFBLFNBQUE7TUFDQSxPQUFBLEdBQUEsYUFBQTs7O0VBR0EsT0FBQSxRQUFBLFFBQUEsU0FBQSxLQUFBO01BQ0EsT0FBQSxHQUFBLFdBQUE7OztFQUdBLEdBQUEsYUFBQSxZQUFBO0tBQ0EsSUFBQSxnQkFBQSxPQUFBLEtBQUE7T0FDQSxhQUFBO09BQ0EsWUFBQTtPQUNBLE1BQUE7T0FDQSxVQUFBO1FBQ0EsU0FBQSxVQUFBO1NBQ0EsT0FBQSxHQUFBLEtBQUE7O1FBRUEsYUFBQSxVQUFBO1NBQ0EsT0FBQSxHQUFBOztRQUVBLFdBQUEsVUFBQTtTQUNBLE9BQUEsR0FBQTs7UUFFQSxRQUFBLFVBQUE7U0FDQSxPQUFBOztRQUVBLGNBQUEsVUFBQTtTQUNBLE9BQUE7Ozs7OztHQU1BLEdBQUEsV0FBQSxVQUFBO0lBQ0EsSUFBQSxnQkFBQSxPQUFBLEtBQUE7T0FDQSxhQUFBO09BQ0EsWUFBQTtPQUNBLE1BQUE7T0FDQSxVQUFBO1FBQ0EsU0FBQSxVQUFBO1NBQ0EsT0FBQSxHQUFBLEtBQUEsR0FBQSxNQUFBLGFBQUEsUUFBQTs7UUFFQSxhQUFBLFVBQUE7U0FDQSxPQUFBLEdBQUE7O1FBRUEsV0FBQSxVQUFBO1NBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxTQUFBLFNBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQTtVQUNBLEtBQUEsSUFBQSxJQUFBLEdBQUEsWUFBQSxLQUFBLFNBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQTtXQUNBLEtBQUEsR0FBQSxTQUFBLEdBQUEsY0FBQSxHQUFBLFlBQUEsS0FBQSxHQUFBLFlBQUE7WUFDQSxPQUFBLEdBQUEsU0FBQSxHQUFBLFlBQUE7WUFDQTtXQUNBO1VBQ0E7U0FDQSxPQUFBLEdBQUE7O1FBRUEsUUFBQSxVQUFBO1NBQ0EsT0FBQTs7UUFFQSxjQUFBLFVBQUE7U0FDQSxPQUFBLEdBQUE7Ozs7Ozs7QUNqRkEsQ0FBQSxVQUFBOzs7Ozs7Q0FNQTtHQUNBLE9BQUEsZ0JBQUE7R0FDQSxXQUFBLHFCQUFBOztDQUVBLG1CQUFBLFVBQUEsQ0FBQSxhQUFBLGdCQUFBLGFBQUEsV0FBQTtDQUNBLFNBQUEsbUJBQUEsV0FBQSxjQUFBLFdBQUEsU0FBQSxHQUFBO0VBQ0EsSUFBQSxLQUFBO0VBQ0EsSUFBQSxXQUFBLGFBQUE7O0VBRUEsVUFBQSxvQkFBQSxVQUFBLFFBQUEsU0FBQSxPQUFBO0dBQ0EsR0FBQSxTQUFBO0dBQ0EsR0FBQSxjQUFBLEdBQUEsT0FBQSxRQUFBLE9BQUEsU0FBQSxRQUFBO0lBQ0EsT0FBQSxPQUFBLFVBQUE7Ozs7OztBQ2xCQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxTQUFBOztDQUVBLE9BQUEsVUFBQSxDQUFBLEtBQUE7O0NBRUEsU0FBQSxRQUFBO0VBQ0EsSUFBQSxNQUFBO0VBQ0EsSUFBQSw0QkFBQSxXQUFBO1NBQ0EsSUFBQSxXQUFBLEdBQUE7U0FDQSxVQUFBLFlBQUE7YUFDQSxTQUFBLFVBQUEsRUFBQSxTQUFBLFFBQUEsU0FBQTthQUNBLFNBQUEsT0FBQSxFQUFBLFNBQUEsUUFBQTs7U0FFQSxPQUFBLFNBQUE7OztLQUdBLElBQUEsb0JBQUEsU0FBQSxRQUFBO01BQ0EsSUFBQSxXQUFBLEdBQUE7O01BRUEsSUFBQSxXQUFBLElBQUEsT0FBQSxLQUFBO01BQ0EsSUFBQSxVQUFBO1FBQ0EsU0FBQSxRQUFBLEVBQUEsV0FBQSxXQUFBLFVBQUEsU0FBQSxRQUFBO1dBQ0EsSUFBQSxVQUFBLE9BQUEsS0FBQSxlQUFBLElBQUE7Y0FDQSxTQUFBLFFBQUEsUUFBQSxHQUFBLFNBQUE7O2dCQUVBO2NBQ0EsU0FBQSxTQUFBLHVCQUFBOzs7O0tBSUEsT0FBQSxTQUFBOzs7S0FHQSxJQUFBLG9CQUFBLFNBQUEsTUFBQTtNQUNBLE9BQUEsTUFBQSxJQUFBLDZCQUFBOzs7S0FHQSxJQUFBLGNBQUEsVUFBQSxXQUFBLFFBQUE7O01BRUEsSUFBQSxPQUFBLE9BQUEsVUFBQSxXQUFBLGFBQUE7S0FDQSxPQUFBLFVBQUEsUUFBQSxXQUFBO09BQ0EsT0FBQSxNQUFBLEtBQUEsS0FBQTs7O0dBR0EsSUFBQSxJQUFBO0dBQ0EsSUFBQSxPQUFBLENBQUEsT0FBQSxNQUFBLFNBQUEsTUFBQTtHQUNBLElBQUEsT0FBQSxDQUFBLE9BQUEsTUFBQSxTQUFBLE1BQUE7R0FDQSxJQUFBLElBQUEsS0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsS0FBQTtXQUNBLEtBQUEsSUFBQSxTQUFBLElBQUEsV0FBQSxLQUFBLElBQUEsT0FBQSxJQUFBO1dBQ0EsS0FBQSxJQUFBLEtBQUEsS0FBQSxLQUFBLElBQUEsS0FBQTtHQUNBLElBQUEsSUFBQSxJQUFBLEtBQUEsTUFBQSxLQUFBLEtBQUEsSUFBQSxLQUFBLEtBQUEsRUFBQTtHQUNBLE9BQUEsSUFBQTs7O0tBR0EsSUFBQSxrQkFBQSxVQUFBO01BQ0EsT0FBQSxFQUFBLE1BQUEsYUFBQSxPQUFBLGFBQUEsVUFBQTs7RUFFQTs7QUNqRUEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQSxXQUFBO0dBQ0EsV0FBQSxxQkFBQTs7Q0FFQSxtQkFBQSxVQUFBLENBQUEsZUFBQTtDQUNBLFNBQUEsbUJBQUEsYUFBQSxPQUFBO0VBQ0EsSUFBQSxLQUFBOztFQUVBLE9BQUEsNEJBQUEsS0FBQSxTQUFBLE1BQUE7U0FDQSxHQUFBLE9BQUEsTUFBQSxNQUFBO1NBQ0EsR0FBQSxPQUFBLE1BQUEsTUFBQTtTQUNBLEdBQUEsT0FBQSxPQUFBOzs7S0FHQSxRQUFBLE9BQUEsSUFBQTtTQUNBLFFBQUE7YUFDQSxLQUFBO2FBQ0EsS0FBQTthQUNBLE1BQUE7O1NBRUEsVUFBQTthQUNBLE1BQUE7Ozs7S0FJQSxZQUFBLFNBQUEsS0FBQSxTQUFBLEtBQUE7T0FDQSxJQUFBLGFBQUEsR0FBQSxTQUFBLEtBQUE7T0FDQSxJQUFBLEdBQUEsZ0JBQUEsVUFBQSxHQUFBO1NBQ0EsSUFBQSxRQUFBLEVBQUE7U0FDQSxXQUFBLFNBQUE7O1NBRUEsbUJBQUEsS0FBQSxNQUFBOzs7Ozs7QUN0Q0EsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsK0JBQUE7O0NBRUEsNkJBQUEsVUFBQSxDQUFBLFdBQUEsYUFBQSxVQUFBO0NBQ0EsU0FBQSw2QkFBQSxTQUFBLFdBQUEsUUFBQSxlQUFBO0VBQ0EsSUFBQSxLQUFBO0VBQ0EsR0FBQSxPQUFBO0VBQ0EsR0FBQSxPQUFBO0VBQ0EsR0FBQSxTQUFBOztFQUVBLFNBQUEsTUFBQTtHQUNBLElBQUEsRUFBQSxRQUFBLEdBQUEsT0FBQTtJQUNBLFFBQUEsSUFBQTtTQUNBO0lBQ0EsSUFBQSxDQUFBLEdBQUEsS0FBQSxTQUFBO0tBQ0EsUUFBQSxJQUFBO0tBQ0EsSUFBQSxDQUFBLEdBQUEsS0FBQSxVQUFBO01BQ0EsUUFBQSxJQUFBO01BQ0E7V0FDQSxJQUFBLENBQUEsR0FBQSxLQUFBLFVBQUE7S0FDQSxRQUFBLElBQUE7U0FDQTtLQUNBLFFBQUEsU0FBQSxHQUFBO0tBQ0EsVUFBQSxXQUFBLE9BQUE7S0FDQSxlQUFBLE1BQUEsR0FBQTtLQUNBO0lBQ0E7R0FDQTs7RUFFQSxTQUFBLFFBQUE7R0FDQSxlQUFBLFFBQUE7R0FDQTtFQUNBOztBQ3hDQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7OztDQU9BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsdUJBQUE7O0NBRUEscUJBQUEsVUFBQSxDQUFBLGFBQUEsYUFBQSxnQkFBQSxVQUFBLFVBQUEsVUFBQTs7Q0FFQSxTQUFBLHNCQUFBLFdBQUEsV0FBQSxjQUFBLFFBQUEsUUFBQSxRQUFBLFFBQUE7RUFDQSxJQUFBLEtBQUE7O0VBRUEsR0FBQSxTQUFBO0VBQ0EsR0FBQSxnQkFBQTtFQUNBLElBQUEsZ0JBQUE7RUFDQSxHQUFBLGNBQUEsUUFBQTtFQUNBLEdBQUEsYUFBQTtFQUNBLEdBQUEsT0FBQTtFQUNBLEdBQUEsZUFBQTtFQUNBLEdBQUEsU0FBQTtFQUNBLEdBQUEsa0JBQUE7RUFDQSxHQUFBLGNBQUE7RUFDQSxHQUFBLGtCQUFBOztFQUVBLElBQUEsYUFBQSxVQUFBO0dBQ0EsVUFBQSxhQUFBLGFBQUEsUUFBQSxRQUFBLFNBQUEsUUFBQTtJQUNBLEdBQUEsVUFBQTtJQUNBLEdBQUEsUUFBQSxRQUFBLFNBQUEsT0FBQTtLQUNBLE9BQUEsY0FBQSxPQUFBLFNBQUEsT0FBQSxZQUFBOzs7OztFQUtBOztFQUVBLElBQUEsb0JBQUEsU0FBQSxNQUFBO0dBQ0EsUUFBQSxXQUFBLGNBQUEsTUFBQSxRQUFBLFNBQUEsS0FBQTtJQUNBLFVBQUEsV0FBQSxLQUFBO0lBQ0EsR0FBQSxXQUFBO0lBQ0E7Ozs7RUFJQSxJQUFBLGVBQUEsU0FBQSxNQUFBO0dBQ0EsR0FBQSxnQkFBQTtHQUNBLFVBQUEsYUFBQSxlQUFBLFFBQUEsVUFBQTtJQUNBLEdBQUEsZ0JBQUE7O0dBRUEsR0FBQSxXQUFBO0dBQ0E7OztFQUdBLElBQUEsWUFBQSxTQUFBLE1BQUE7R0FDQSxHQUFBLGdCQUFBO0dBQ0EsR0FBQSxXQUFBOzs7RUFHQSxTQUFBLE1BQUE7R0FDQSxJQUFBLFlBQUEsRUFBQSxPQUFBLEdBQUEsUUFBQSxPQUFBLFNBQUEsUUFBQSxFQUFBLE9BQUEsT0FBQSxRQUFBLFVBQUE7R0FDQSxVQUFBLE9BQUE7SUFDQSxTQUFBLGFBQUE7SUFDQSxVQUFBLEVBQUEsT0FBQSxHQUFBLFVBQUE7SUFDQSxZQUFBO0lBQ0EsV0FBQSxVQUFBO0lBQ0EsZ0JBQUEsVUFBQTtNQUNBLFFBQUEsVUFBQTtJQUNBLFFBQUEsUUFBQTs7R0FFQTs7RUFFQSxTQUFBLGNBQUE7R0FDQSxJQUFBLGdCQUFBLE9BQUEsS0FBQTtPQUNBLGFBQUE7T0FDQSxZQUFBO09BQ0EsTUFBQTtPQUNBLFVBQUE7UUFDQSxTQUFBLFVBQUE7U0FDQSxPQUFBLGFBQUE7O1FBRUEsU0FBQSxVQUFBO1NBQ0EsT0FBQSxFQUFBLGNBQUE7Ozs7O01BS0EsY0FBQSxPQUFBLEtBQUEsU0FBQSxPQUFBO09BQ0EsSUFBQSxRQUFBO1FBQ0E7O09BRUEsR0FBQSxPQUFBLEtBQUEsRUFBQSxPQUFBLGFBQUEsS0FBQSxhQUFBLE9BQUEsT0FBQSxVQUFBLE9BQUE7O0dBRUE7O0VBRUEsU0FBQSxPQUFBLE9BQUE7R0FDQSxJQUFBLFlBQUE7R0FDQSxJQUFBLGdCQUFBLE9BQUEsS0FBQTtPQUNBLGFBQUE7T0FDQSxZQUFBO09BQ0EsTUFBQTtPQUNBLFVBQUE7UUFDQSxTQUFBLFVBQUE7U0FDQSxPQUFBLGFBQUE7O1FBRUEsU0FBQSxVQUFBO1NBQ0EsT0FBQTtVQUNBLFdBQUEsT0FBQTtVQUNBLEtBQUEsT0FBQTtVQUNBLE9BQUEsT0FBQTtVQUNBLFFBQUEsT0FBQTtVQUNBLFdBQUEsT0FBQTtVQUNBLFFBQUEsT0FBQTtVQUNBLFlBQUEsT0FBQTtVQUNBLGNBQUEsT0FBQSxZQUFBLFlBQUEsS0FBQSxPQUFBLFlBQUE7Ozs7OztNQU1BLGNBQUEsT0FBQSxLQUFBLFNBQUEsT0FBQTtPQUNBO09BQ0EsR0FBQSxPQUFBLEtBQUEsRUFBQSxPQUFBLFVBQUEsTUFBQSxVQUFBLE9BQUE7O0dBRUE7O0VBRUEsU0FBQSxnQkFBQSxPQUFBO0dBQ0EsSUFBQSxRQUFBLEdBQUEsUUFBQSxPQUFBLFNBQUEsUUFBQTtJQUNBLE9BQUEsT0FBQTs7O0dBR0EsSUFBQSxNQUFBLFNBQUEsSUFBQTtJQUNBLElBQUEsZ0JBQUEsT0FBQSxLQUFBO1FBQ0EsYUFBQTtRQUNBLFlBQUE7UUFDQSxNQUFBO1FBQ0EsVUFBQTtTQUNBLFNBQUEsVUFBQTtVQUNBLE9BQUE7Ozs7O0lBS0EsY0FBQSxPQUFBLEtBQUEsU0FBQSxPQUFBO0tBQ0E7S0FDQSxHQUFBLE9BQUEsS0FBQSxFQUFBLE9BQUEsU0FBQSxNQUFBLE9BQUEsT0FBQTs7VUFFQTtJQUNBLEdBQUEsT0FBQSxLQUFBLEVBQUEsT0FBQSxZQUFBLE1BQUEsU0FBQSxPQUFBLE9BQUE7SUFDQTtHQUNBOztFQUVBLFNBQUEsWUFBQSxPQUFBO0dBQ0EsR0FBQSxPQUFBLEtBQUE7SUFDQSxPQUFBO0lBQ0EsS0FBQSxhQUFBLE9BQUE7SUFDQSxVQUFBO0lBQ0EsVUFBQTs7R0FFQSxnQkFBQTtHQUNBOztFQUVBLFNBQUEsZ0JBQUEsT0FBQTtHQUNBLElBQUEsUUFBQSxHQUFBLFFBQUEsT0FBQSxTQUFBLFFBQUE7SUFDQSxPQUFBLE9BQUE7O0dBRUEsSUFBQSxNQUFBLFVBQUEsSUFBQTtJQUNBLEdBQUEsT0FBQSxLQUFBO0tBQ0EsT0FBQTtLQUNBLEtBQUEsc0JBQUEsT0FBQSxPQUFBOztTQUVBO0lBQ0EsR0FBQSxPQUFBLEtBQUE7S0FDQSxPQUFBO0tBQ0EsS0FBQSxZQUFBLE9BQUEsT0FBQTtLQUNBLFVBQUE7S0FDQSxTQUFBOztJQUVBLGdCQUFBO0lBQ0E7R0FDQTs7RUFFQSxTQUFBLFdBQUEsTUFBQTtHQUNBLEdBQUEsT0FBQSxPQUFBLE1BQUE7R0FDQTs7O0FDM0xBLENBQUEsVUFBQTtDQUNBOzs7Ozs7O0NBT0E7R0FDQSxPQUFBLGNBQUE7R0FDQSxXQUFBLHdCQUFBOztDQUVBLHNCQUFBLFVBQUEsRUFBQSxZQUFBO0NBQ0EsU0FBQSx1QkFBQSxZQUFBLGNBQUE7RUFDQSxJQUFBLEtBQUE7O0VBRUEsR0FBQSxTQUFBLGFBQUE7RUFDQSxVQUFBLGFBQUEsYUFBQSxRQUFBLFFBQUEsU0FBQSxRQUFBO0dBQ0EsR0FBQSxVQUFBO0dBQ0EsR0FBQSxRQUFBLFFBQUEsU0FBQSxPQUFBO0lBQ0EsT0FBQSxPQUFBLGNBQUEsT0FBQSxTQUFBLE9BQUEsWUFBQTs7O0VBR0E7O0FDdkJBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQTtHQUNBLE9BQUE7R0FDQSxXQUFBLHdCQUFBOztDQUVBLHNCQUFBLFVBQUEsQ0FBQSxVQUFBLGFBQUEsa0JBQUEsVUFBQSxTQUFBLGFBQUE7Q0FDQSxTQUFBLHNCQUFBLFFBQUEsV0FBQSxnQkFBQSxRQUFBLE9BQUEsV0FBQSxRQUFBO0VBQ0EsSUFBQSxLQUFBO0VBQ0EsR0FBQSxTQUFBO0VBQ0EsR0FBQSxTQUFBLEVBQUEsT0FBQSxPQUFBO0VBQ0EsR0FBQSxTQUFBO0VBQ0EsR0FBQSxTQUFBO0VBQ0EsR0FBQSxTQUFBOztFQUVBLEdBQUEsU0FBQTtHQUNBLFNBQUEsT0FBQSxPQUFBO0dBQ0EsVUFBQSxPQUFBLFFBQUE7R0FDQSxZQUFBO0dBQ0EsWUFBQSxDQUFBLE9BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQTtHQUNBLFlBQUEsT0FBQSxVQUFBO0dBQ0EsY0FBQSxPQUFBLGdCQUFBO0dBQ0EsYUFBQSxPQUFBLGNBQUE7R0FDQSxZQUFBO0dBQ0EsWUFBQSxDQUFBLE1BQUEsT0FBQSxLQUFBLE1BQUEsUUFBQTtHQUNBLFVBQUEsUUFBQTtHQUNBLFlBQUEsQ0FBQSxXQUFBOzs7RUFHQSxVQUFBLGFBQUEsUUFBQSxhQUFBLFFBQUEsU0FBQSxTQUFBO0dBQ0EsR0FBQSxXQUFBO0dBQ0EsSUFBQSxDQUFBLEdBQUEsT0FBQTtJQUNBLElBQUEsYUFBQTtJQUNBLEtBQUEsSUFBQSxJQUFBLFNBQUEsU0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBO0tBQ0EsV0FBQSxLQUFBLFNBQUEsR0FBQTtLQUNBO0lBQ0EsR0FBQSxPQUFBLFdBQUE7SUFDQTs7O0VBR0EsSUFBQSxrQkFBQSxTQUFBLE9BQUE7R0FDQSxJQUFBLFVBQUEsT0FBQSxNQUFBLElBQUEsTUFBQSxDQUFBLEdBQUEsS0FBQTtHQUNBLElBQUEsVUFBQSxRQUFBLFVBQUEsTUFBQTtJQUNBLE9BQUE7U0FDQTtJQUNBLE9BQUEsT0FBQSxNQUFBLElBQUEsTUFBQSxFQUFBLEdBQUEsS0FBQTtJQUNBOzs7RUFHQSxTQUFBLE1BQUE7R0FDQSxJQUFBLEdBQUEsT0FBQSxNQUFBO0lBQ0EsR0FBQSxPQUFBLGtCQUFBLGdCQUFBLEdBQUEsT0FBQTtJQUNBLFVBQUEsT0FBQSxHQUFBLFFBQUEsUUFBQSxVQUFBO0tBQ0EsR0FBQSxPQUFBLGNBQUEsT0FBQSxTQUFBLFNBQUEsR0FBQSxPQUFBLGFBQUE7T0FDQSxLQUFBLFVBQUE7S0FDQSxlQUFBLE1BQUEsR0FBQTs7U0FFQTs7SUFFQTtHQUNBOztFQUVBLFNBQUEsUUFBQTtHQUNBLElBQUEsZUFBQTtNQUNBLFlBQUEsT0FBQTtNQUNBLE9BQUE7TUFDQSxTQUFBLEdBQUEsT0FBQTtNQUNBLFNBQUEsR0FBQSxPQUFBO01BQ0EsVUFBQSxHQUFBLE9BQUE7TUFDQSxTQUFBLEdBQUEsT0FBQTtNQUNBLGNBQUEsR0FBQSxPQUFBO01BQ0EsYUFBQSxHQUFBLE9BQUE7TUFDQSxrQkFBQSxnQkFBQSxHQUFBLE9BQUE7OztHQUdBLElBQUEsR0FBQSxPQUFBLE1BQUE7SUFDQSxVQUFBLGlCQUFBO0lBQ0EsZUFBQSxNQUFBO1VBQ0E7O0lBRUE7R0FDQTs7RUFFQSxTQUFBLFFBQUE7R0FDQSxlQUFBLFFBQUE7R0FDQTtFQUNBOztBQzNGQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxZQUFBOztDQUVBLFVBQUEsVUFBQSxDQUFBOztDQUVBLFNBQUEsV0FBQTtFQUNBLElBQUEsTUFBQTtFQUNBLElBQUEsUUFBQTtFQUNBLElBQUEsZUFBQTtFQUNBLElBQUEsY0FBQTtFQUNBLElBQUEsU0FBQTtFQUNBLElBQUEsU0FBQTtFQUNBLElBQUEsZUFBQTtFQUNBLElBQUEsbUJBQUE7RUFDQSxJQUFBLGtCQUFBO0VBQ0EsSUFBQSxhQUFBO0VBQ0EsSUFBQSxhQUFBO0VBQ0EsSUFBQSxlQUFBOztFQUVBLFNBQUEsT0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBO0dBQ0E7O0VBRUEsU0FBQSxjQUFBLFFBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSxrQkFBQTtHQUNBOztFQUVBLFNBQUEsWUFBQSxPQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUEsZ0NBQUE7R0FDQTs7RUFFQSxTQUFBLE9BQUEsT0FBQTtHQUNBLE9BQUEsTUFBQSxLQUFBLGlCQUFBO0dBQ0E7O0VBRUEsU0FBQSxPQUFBLE9BQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSxpQkFBQSxPQUFBO0dBQ0E7O0VBRUEsU0FBQSxhQUFBLE9BQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSwyQ0FBQSxPQUFBLFVBQUE7R0FDQTs7RUFFQSxTQUFBLGlCQUFBLGFBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSwyQkFBQSxhQUFBLFdBQUE7OztFQUdBLFNBQUEsZ0JBQUEsV0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLHFCQUFBLFdBQUEsVUFBQTtHQUNBOztFQUVBLFNBQUEsV0FBQSxTQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUEsK0JBQUE7R0FDQTs7RUFFQSxTQUFBLFdBQUEsU0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLHVDQUFBO0dBQ0E7O0VBRUEsU0FBQSxhQUFBLE9BQUE7R0FDQSxPQUFBLE1BQUEsT0FBQSxrQkFBQSxPQUFBO0dBQ0E7OztBQ3JFQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxTQUFBOztDQUVBLE9BQUEsVUFBQSxDQUFBOztDQUVBLFNBQUEsT0FBQSxNQUFBO0VBQ0EsSUFBQSxNQUFBO0VBQ0EsSUFBQSxRQUFBO0VBQ0EsU0FBQSxPQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUE7SUFDQTtFQUNBOzs7QUNuQkEsQ0FBQSxVQUFBO0NBQ0E7Ozs7Ozs7Q0FPQTtHQUNBLE9BQUE7R0FDQSxXQUFBLDBCQUFBOztDQUVBLHdCQUFBLFVBQUEsQ0FBQSxXQUFBLGFBQUEsV0FBQSxnQkFBQTs7Q0FFQSxTQUFBLHdCQUFBLFNBQUEsV0FBQSxTQUFBLGNBQUEsT0FBQTs7RUFFQSxJQUFBLEtBQUE7RUFDQSxJQUFBLFNBQUEsUUFBQTs7RUFFQSxVQUFBLG9CQUFBLFFBQUEsUUFBQSxTQUFBLE9BQUE7R0FDQSxHQUFBLFVBQUEsT0FBQSxRQUFBLE9BQUEsU0FBQSxRQUFBO0lBQ0EsT0FBQSxZQUFBLE9BQUEsU0FBQSxPQUFBLGFBQUE7SUFDQSxPQUFBLE9BQUEsVUFBQTs7OztFQUlBLFFBQUEsYUFBQSxhQUFBLFFBQUEsUUFBQSxTQUFBLE1BQUE7R0FDQSxHQUFBLGFBQUE7R0FDQSxHQUFBLGlCQUFBLE1BQUE7R0FDQSxJQUFBLE1BQUEsVUFBQTtJQUNBLElBQUEsV0FBQSxLQUFBLE1BQUEsTUFBQTtJQUNBLEdBQUEsUUFBQSxhQUFBO0tBQ0EsTUFBQSxPQUFBLFNBQUE7S0FDQSxNQUFBLE9BQUEsU0FBQTtLQUNBLFVBQUE7OztJQUdBLEdBQUEsZ0JBQUEsTUFBQTtJQUNBO0tBQ0EsS0FBQSxVQUFBO0dBQ0EsR0FBQSxlQUFBLFFBQUEsU0FBQSxPQUFBO0lBQ0EsT0FBQSxRQUFBLFFBQUEsU0FBQSxPQUFBO0tBQ0EsSUFBQSxPQUFBLFlBQUEsT0FBQSxPQUFBO01BQ0EsT0FBQSxvQkFBQSxPQUFBLG1CQUFBLE9BQUEsT0FBQTtNQUNBO0tBQ0EsSUFBQSxPQUFBLGlCQUFBLE9BQUEsTUFBQTtNQUNBLE9BQUEseUJBQUEsT0FBQSxrQkFBQSxPQUFBLE9BQUE7TUFDQTs7O0lBR0EsSUFBQSxHQUFBLGNBQUE7S0FDQSxHQUFBLGNBQUEsUUFBQSxTQUFBLGFBQUE7TUFDQSxJQUFBLFNBQUEsS0FBQSxNQUFBO01BQ0EsSUFBQSxPQUFBLFFBQUEsT0FBQSxNQUFBO09BQ0EsT0FBQSx5QkFBQSxLQUFBLE1BQUEsRUFBQSxPQUFBLElBQUEsT0FBQTtPQUNBOztLQUVBOzs7O09BSUEsT0FBQSw0QkFBQSxLQUFBLFNBQUEsTUFBQTtTQUNBLEdBQUEsT0FBQSxNQUFBLE1BQUE7U0FDQSxHQUFBLE9BQUEsTUFBQSxNQUFBO1NBQ0EsR0FBQSxPQUFBLE9BQUE7U0FDQSxHQUFBLFFBQUEsU0FBQTtVQUNBLE1BQUEsR0FBQSxPQUFBO1VBQ0EsTUFBQSxHQUFBLE9BQUE7VUFDQSxVQUFBOzs7O0tBSUEsUUFBQSxPQUFBLElBQUE7U0FDQSxRQUFBO2FBQ0EsS0FBQTthQUNBLEtBQUE7YUFDQSxNQUFBOztTQUVBLFNBQUE7Ozs7QUM5RUEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEsd0JBQUE7Q0FDQSxzQkFBQSxVQUFBLENBQUEsV0FBQTtDQUNBLFNBQUEsdUJBQUE7RUFDQSxJQUFBLEtBQUE7RUFDQSxJQUFBLGdCQUFBO0dBQ0EsV0FBQSxRQUFBO0dBQ0EsY0FBQSxRQUFBO0dBQ0EsVUFBQSxRQUFBOzs7RUFHQSxRQUFBLGtCQUFBLGVBQUEsUUFBQSxTQUFBLE1BQUE7R0FDQSxHQUFBLFFBQUE7R0FDQSxNQUFBLFFBQUEsU0FBQSxNQUFBO0lBQ0EsTUFBQSxtQkFBQTtJQUNBLE1BQUEsU0FBQSxRQUFBLFNBQUEsT0FBQTtLQUNBLE1BQUEsb0JBQUEsU0FBQTs7Ozs7RUFLQSxHQUFBLGlCQUFBLE9BQUEsUUFBQSxnQkFBQSxLQUFBOzs7QUM3QkEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFdBQUEseUJBQUE7O0NBRUEsdUJBQUEsVUFBQSxDQUFBLGdCQUFBLFVBQUEsU0FBQSxVQUFBLFlBQUEsUUFBQSxXQUFBLGFBQUEsYUFBQSxXQUFBOztDQUVBLFNBQUEsdUJBQUEsY0FBQSxRQUFBLE9BQUEsUUFBQSxVQUFBLE1BQUEsU0FBQSxXQUFBLFdBQUEsU0FBQSxhQUFBO0VBQ0EsSUFBQSxLQUFBO0VBQ0EsSUFBQSxXQUFBLFFBQUE7RUFDQSxJQUFBLGNBQUE7RUFDQSxHQUFBLGNBQUE7RUFDQSxHQUFBLGFBQUE7RUFDQSxHQUFBLGVBQUEsUUFBQTtFQUNBLEdBQUEsa0JBQUE7RUFDQSxHQUFBLGFBQUE7RUFDQSxHQUFBLG1CQUFBO0VBQ0EsR0FBQSxVQUFBOztFQUVBLEdBQUEsZ0JBQUE7R0FDQSxTQUFBO0dBQ0EsV0FBQTs7O0VBR0EsUUFBQSxVQUFBLGFBQUEsUUFBQSxRQUFBLFNBQUEsTUFBQTtHQUNBLGFBQUE7R0FDQSxNQUFBLE9BQUEsUUFBQSxHQUFBLFlBQUEsT0FBQSxHQUFBLFlBQUE7R0FDQSxHQUFBLGNBQUEsV0FBQSxNQUFBO0dBQ0EsR0FBQSxjQUFBLFNBQUEsT0FBQSxFQUFBLEVBQUE7OztFQUdBLFVBQUEsWUFBQSxRQUFBLFFBQUEsU0FBQSxRQUFBO0dBQ0EsR0FBQSxVQUFBO0tBQ0EsS0FBQSxVQUFBO0dBQ0EsSUFBQSxHQUFBLGNBQUEsSUFBQTtJQUNBLE1BQUEsWUFBQSxhQUFBLFFBQUEsUUFBQSxTQUFBLElBQUE7S0FDQSxHQUFBLGNBQUE7O1VBRUE7SUFDQSxNQUFBLE1BQUEsYUFBQSxPQUFBLFFBQUEsUUFBQSxTQUFBLElBQUE7S0FDQSxHQUFBLGNBQUE7S0FDQSxJQUFBLEdBQUEsUUFBQSxjQUFBLEtBQUEsRUFBQSxRQUFBLEdBQUEsY0FBQSxFQUFBLEdBQUEsYUFBQSxPQUFBOztJQUVBOzs7RUFHQSxVQUFBLEdBQUEsU0FBQSxTQUFBLEdBQUE7R0FDQSxJQUFBLEdBQUEsY0FBQSxLQUFBLFFBQUEsT0FBQSxhQUFBLE9BQUEsR0FBQSxVQUFBO0tBQ0EsR0FBQSxZQUFBLEtBQUE7VUFDQTtJQUNBLElBQUEsUUFBQSxPQUFBLE9BQUEsR0FBQSxXQUFBLFFBQUEsT0FBQSxhQUFBLE9BQUEsR0FBQSxVQUFBO0tBQ0EsR0FBQSxZQUFBLEtBQUE7S0FDQTtJQUNBOzs7RUFHQSxVQUFBLEdBQUEsWUFBQSxTQUFBLEtBQUE7R0FDQSxJQUFBLFVBQUEsUUFBQSxLQUFBLEtBQUE7R0FDQSxLQUFBLElBQUEsSUFBQSxHQUFBLFlBQUEsU0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBO0lBQ0EsR0FBQSxRQUFBLE9BQUEsR0FBQSxZQUFBLEdBQUEsSUFBQSxLQUFBLElBQUE7S0FDQSxHQUFBLFlBQUEsR0FBQSxZQUFBLEtBQUE7S0FDQSxHQUFBLFlBQUEsR0FBQSxTQUFBLEtBQUE7S0FDQSxHQUFBLFlBQUEsR0FBQSxTQUFBLEtBQUE7S0FDQSxHQUFBLFlBQUEsR0FBQSxXQUFBLEtBQUE7S0FDQTtJQUNBOzs7RUFHQSxVQUFBLEdBQUEsV0FBQSxTQUFBLEdBQUE7R0FDQSxJQUFBLFFBQUEsR0FBQTtHQUNBLEdBQUEsY0FBQSxHQUFBLFlBQUEsT0FBQSxTQUFBLElBQUE7SUFDQSxPQUFBLEdBQUEsT0FBQTs7OztFQUlBLFNBQUEsWUFBQTtHQUNBLElBQUEsZ0JBQUEsT0FBQSxLQUFBO01BQ0EsYUFBQTtPQUNBLFlBQUE7T0FDQSxNQUFBO09BQ0EsVUFBQTtRQUNBLE9BQUEsVUFBQTtTQUNBLEtBQUEsRUFBQSxRQUFBLEdBQUEsY0FBQTtVQUNBLE9BQUE7ZUFDQTtVQUNBLE9BQUEsR0FBQSxZQUFBLEdBQUEsWUFBQSxPQUFBLEdBQUE7VUFDQTs7UUFFQSxTQUFBLFVBQUE7U0FDQSxPQUFBLEdBQUEsY0FBQTs7UUFFQSxhQUFBLFVBQUE7U0FDQSxPQUFBOzs7O0dBSUE7OztFQUdBLFNBQUEsaUJBQUEsWUFBQSxHQUFBO1NBQ0EsSUFBQSxnQkFBQSxPQUFBLEtBQUE7YUFDQSxhQUFBO2FBQ0EsWUFBQTthQUNBLE1BQUE7YUFDQSxTQUFBO2lCQUNBLGFBQUEsVUFBQTtxQkFDQSxPQUFBOztpQkFFQSxhQUFBLFVBQUE7a0JBQ0EsT0FBQTs7OztNQUlBOzs7RUFHQSxTQUFBLFFBQUEsYUFBQSxHQUFBOztHQUVBLFVBQUEsS0FBQSxvQkFBQTtJQUNBLEtBQUEsV0FBQTtJQUNBLFVBQUEsV0FBQTs7U0FFQSxHQUFBLFlBQUEsT0FBQSxHQUFBO0dBQ0E7OztFQUdBLFNBQUEsaUJBQUE7R0FDQSxHQUFBLGFBQUE7O0dBRUEsSUFBQSxXQUFBLEdBQUEsUUFBQSxRQUFBLE9BQUEsU0FBQSxRQUFBO0lBQ0EsS0FBQSxPQUFBLFdBQUEsUUFBQSxPQUFBLFdBQUEsV0FBQSxPQUFBLFdBQUEsUUFBQTtLQUNBLE9BQUE7VUFDQTtLQUNBLE9BQUEsWUFBQTtLQUNBLE9BQUEsT0FBQTs7OztHQUlBLElBQUEsYUFBQTtJQUNBLFNBQUE7SUFDQSxZQUFBLFdBQUE7SUFDQSxZQUFBLFFBQUE7SUFDQSxZQUFBLEVBQUEsTUFBQSxRQUFBLE9BQUEsU0FBQSxRQUFBLEVBQUEsT0FBQSxPQUFBLFdBQUEsUUFBQSxRQUFBO0lBQ0EsWUFBQSxhQUFBLFdBQUE7SUFDQSxZQUFBLGFBQUEsV0FBQTtJQUNBLFlBQUEsYUFBQSxTQUFBLE9BQUE7SUFDQSxZQUFBLGFBQUEsU0FBQTtJQUNBLFVBQUEsYUFBQSxPQUFBO0lBQ0EsV0FBQSxhQUFBLE9BQUE7SUFDQSxXQUFBO0lBQ0EsWUFBQSxDQUFBLEVBQUEsRUFBQSxFQUFBLEVBQUE7SUFDQSxZQUFBLEVBQUEsTUFBQSxRQUFBO0lBQ0EsWUFBQTtJQUNBLFlBQUEsUUFBQTs7UUFFQSxVQUFBLEtBQUEsb0JBQUE7R0FDQTs7RUFFQSxHQUFBLElBQUEsWUFBQSxVQUFBLE9BQUE7U0FDQSxVQUFBOzs7O0FDcktBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQTtHQUNBLE9BQUE7R0FDQSxXQUFBLHdCQUFBOztDQUVBLHNCQUFBLFVBQUEsQ0FBQSxVQUFBLGFBQUEsa0JBQUEsVUFBQSxTQUFBLGFBQUE7Q0FDQSxTQUFBLHVCQUFBO0VBQ0EsSUFBQSxLQUFBO0VBQ0EsR0FBQSxTQUFBO0VBQ0EsR0FBQSxRQUFBLEVBQUEsT0FBQSxPQUFBO0VBQ0EsR0FBQSxPQUFBO0VBQ0EsR0FBQSxTQUFBO0VBQ0EsR0FBQSxTQUFBOztFQUVBLEdBQUEsU0FBQTtHQUNBLFNBQUEsT0FBQSxPQUFBO0dBQ0EsVUFBQSxPQUFBLFFBQUE7R0FDQSxZQUFBO0dBQ0EsWUFBQSxDQUFBLE9BQUEsTUFBQSxNQUFBLE1BQUEsTUFBQTtHQUNBLFlBQUEsT0FBQSxVQUFBO0dBQ0EsY0FBQSxPQUFBLGdCQUFBO0dBQ0EsYUFBQSxPQUFBLGNBQUE7R0FDQSxZQUFBO0dBQ0EsWUFBQSxDQUFBLE1BQUEsT0FBQSxLQUFBLE1BQUEsUUFBQTtHQUNBLFVBQUEsUUFBQTtHQUNBLFlBQUEsQ0FBQSxXQUFBOzs7RUFHQSxVQUFBLGFBQUEsUUFBQSxhQUFBLFFBQUEsU0FBQSxTQUFBO0dBQ0EsR0FBQSxXQUFBO0dBQ0EsSUFBQSxDQUFBLEdBQUEsT0FBQTtJQUNBLElBQUEsYUFBQTtJQUNBLEtBQUEsSUFBQSxJQUFBLFNBQUEsU0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBO0tBQ0EsV0FBQSxLQUFBLFNBQUEsR0FBQTtLQUNBO0lBQ0EsR0FBQSxPQUFBLFdBQUE7SUFDQTs7O0VBR0EsSUFBQSxrQkFBQSxTQUFBLE9BQUE7R0FDQSxJQUFBLFVBQUEsT0FBQSxNQUFBLElBQUEsTUFBQSxDQUFBLEdBQUEsS0FBQTtHQUNBLElBQUEsVUFBQSxRQUFBLFVBQUEsTUFBQTtJQUNBLE9BQUE7U0FDQTtJQUNBLE9BQUEsT0FBQSxNQUFBLElBQUEsTUFBQSxFQUFBLEdBQUEsS0FBQTtJQUNBOzs7RUFHQSxTQUFBLE1BQUE7R0FDQSxJQUFBLEdBQUEsT0FBQSxNQUFBO0lBQ0EsR0FBQSxPQUFBLGtCQUFBLGdCQUFBLEdBQUEsT0FBQTtJQUNBLFVBQUEsT0FBQSxHQUFBLFFBQUEsUUFBQSxVQUFBO0tBQ0EsR0FBQSxPQUFBLGNBQUEsT0FBQSxTQUFBLFNBQUEsR0FBQSxPQUFBLGFBQUE7T0FDQSxLQUFBLFVBQUE7S0FDQSxlQUFBLE1BQUEsR0FBQTs7SUFFQTtHQUNBOztFQUVBLFNBQUEsUUFBQTtHQUNBLElBQUEsZUFBQTtNQUNBLFlBQUEsT0FBQTtNQUNBLE9BQUE7TUFDQSxTQUFBLEdBQUEsT0FBQTtNQUNBLFNBQUEsR0FBQSxPQUFBO01BQ0EsVUFBQSxHQUFBLE9BQUE7TUFDQSxTQUFBLEdBQUEsT0FBQTtNQUNBLGNBQUEsR0FBQSxPQUFBO01BQ0EsYUFBQSxHQUFBLE9BQUE7TUFDQSxrQkFBQSxnQkFBQSxHQUFBLE9BQUE7OztHQUdBLElBQUEsR0FBQSxPQUFBLE1BQUE7SUFDQSxVQUFBLGlCQUFBO0lBQ0EsZUFBQSxNQUFBO1VBQ0E7O0lBRUE7R0FDQTs7RUFFQSxTQUFBLFFBQUE7R0FDQSxlQUFBLFFBQUE7R0FDQTs7O0FDeEZBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQTtHQUNBLE9BQUE7R0FDQSxXQUFBLDBCQUFBOztDQUVBLHdCQUFBLFVBQUEsQ0FBQSxjQUFBLGtCQUFBLFNBQUEsVUFBQSxhQUFBLFdBQUEsZ0JBQUEsYUFBQTs7Q0FFQSxTQUFBLHdCQUFBLFlBQUEsZ0JBQUEsT0FBQSxRQUFBLFdBQUEsU0FBQSxjQUFBLFdBQUEsV0FBQTtFQUNBLElBQUEsS0FBQTtFQUNBLEdBQUEsYUFBQTtFQUNBLEdBQUEsZUFBQTtFQUNBLEdBQUEsU0FBQTtFQUNBLEdBQUEsUUFBQTtFQUNBLEdBQUEsVUFBQTtFQUNBLEdBQUEsT0FBQTtFQUNBLFdBQUEsT0FBQSxRQUFBLEdBQUEsYUFBQSxRQUFBLEdBQUEsWUFBQTs7RUFFQSxJQUFBLGFBQUE7O0VBRUEsUUFBQSxhQUFBLGFBQUEsUUFBQSxRQUFBLFNBQUEsUUFBQTtHQUNBLEdBQUEsV0FBQSxRQUFBO0dBQ0EsR0FBQSxnQkFBQSxHQUFBLFNBQUEsR0FBQTtHQUNBLElBQUEsYUFBQSxFQUFBLE1BQUEsUUFBQSxVQUFBO0dBQ0EsR0FBQSxVQUFBO0dBQ0EsV0FBQSxRQUFBLFNBQUEsY0FBQTtJQUNBLEdBQUEsUUFBQSxLQUFBLE1BQUEsR0FBQSxTQUFBOztHQUVBLEdBQUEsVUFBQSxHQUFBLFFBQUEsT0FBQSxTQUFBLFFBQUEsRUFBQSxPQUFBLENBQUEsT0FBQTs7O0VBR0EsU0FBQSxhQUFBLE9BQUE7R0FDQSxHQUFBLGdCQUFBO0dBQ0E7O0VBRUEsU0FBQSxRQUFBO0dBQ0EsZUFBQSxRQUFBO0dBQ0E7O0VBRUEsU0FBQSxNQUFBLE9BQUE7R0FDQSxPQUFBLFlBQUEsQ0FBQSxPQUFBO0dBQ0EsV0FBQSxLQUFBO0dBQ0E7O0VBRUEsU0FBQSxRQUFBLFFBQUEsR0FBQTtHQUNBLE9BQUEsWUFBQSxDQUFBLE9BQUE7R0FDQSxXQUFBLE9BQUEsRUFBQSxNQUFBLFlBQUEsT0FBQSxRQUFBLE9BQUEsS0FBQTtHQUNBOztFQUVBLFNBQUEsTUFBQTtHQUNBLEdBQUEsV0FBQSxRQUFBLEtBQUEsTUFBQSxHQUFBLFdBQUEsU0FBQTtHQUNBLFVBQUEsS0FBQSxtQkFBQTtJQUNBLEtBQUEsV0FBQTtJQUNBLFdBQUEsV0FBQTtJQUNBLE9BQUEsV0FBQTtJQUNBLFFBQUEsV0FBQTtJQUNBLFFBQUEsV0FBQTtJQUNBLFlBQUEsRUFBQSxNQUFBLEdBQUEsV0FBQSxRQUFBO0lBQ0EsVUFBQSxHQUFBLFdBQUE7OztHQUdBLGVBQUEsTUFBQTtHQUNBO0VBQ0E7OztBQ3BFQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsV0FBQSx1QkFBQTs7Q0FFQSxxQkFBQSxVQUFBLENBQUEsV0FBQSxXQUFBLFlBQUEsVUFBQSxhQUFBOztDQUVBLFNBQUEsc0JBQUE7RUFDQSxJQUFBLEtBQUE7RUFDQSxJQUFBLFNBQUEsUUFBQTs7RUFFQSxVQUFBLFlBQUEsUUFBQSxRQUFBLFNBQUEsT0FBQTtHQUNBLEdBQUEsVUFBQSxPQUFBLFFBQUEsT0FBQSxTQUFBLFFBQUE7SUFDQSxPQUFBLFlBQUEsT0FBQSxTQUFBLE9BQUEsYUFBQTtJQUNBLE9BQUEsT0FBQSxVQUFBOzs7O0VBSUEsUUFBQSxhQUFBLGFBQUEsUUFBQSxRQUFBLFNBQUEsTUFBQTtHQUNBLEdBQUEsYUFBQTtHQUNBLElBQUEsTUFBQSxVQUFBO0lBQ0EsSUFBQSxXQUFBLEtBQUEsTUFBQSxNQUFBO0lBQ0EsR0FBQSxRQUFBLGFBQUE7S0FDQSxNQUFBLE9BQUEsU0FBQTtLQUNBLE1BQUEsT0FBQSxTQUFBO0tBQ0EsVUFBQTs7SUFFQTs7O09BR0EsT0FBQSw0QkFBQSxLQUFBLFNBQUEsTUFBQTtTQUNBLEdBQUEsT0FBQSxNQUFBLE1BQUE7U0FDQSxHQUFBLE9BQUEsTUFBQSxNQUFBO1NBQ0EsR0FBQSxPQUFBLE9BQUE7U0FDQSxHQUFBLFFBQUEsUUFBQTtVQUNBLE1BQUEsR0FBQSxPQUFBO1VBQ0EsTUFBQSxHQUFBLE9BQUE7VUFDQSxVQUFBOzs7O0tBSUEsUUFBQSxPQUFBLElBQUE7U0FDQSxRQUFBO2FBQ0EsS0FBQTthQUNBLEtBQUE7YUFDQSxNQUFBOztTQUVBLFNBQUE7Ozs7QUNyREEsQ0FBQSxVQUFBO0NBQ0E7Ozs7OztDQU1BO0dBQ0EsT0FBQTtHQUNBLFFBQUEsWUFBQTs7Q0FFQSxVQUFBLFVBQUEsQ0FBQSxjQUFBLFNBQUEsTUFBQTs7Q0FFQSxTQUFBLFVBQUEsWUFBQSxPQUFBLElBQUEsU0FBQTtFQUNBLElBQUEsTUFBQTtFQUNBLElBQUEsUUFBQSxTQUFBLE1BQUE7TUFDQSxJQUFBLFlBQUE7TUFDQSxJQUFBLE9BQUE7UUFDQSxZQUFBO1VBQ0E7UUFDQSxZQUFBLE1BQUEsSUFBQTtPQUNBO01BQ0EsT0FBQSxHQUFBLFFBQUEsd0JBQUEsRUFBQSxRQUFBLFdBQUEsWUFBQSxXQUFBOzs7SUFHQSxJQUFBLFNBQUEsSUFBQTs7SUFFQSxJQUFBLE1BQUEsVUFBQSxXQUFBLFVBQUE7TUFDQSxJQUFBLE9BQUEsR0FBQSxXQUFBLFlBQUE7UUFDQSxJQUFBLE9BQUE7UUFDQSxXQUFBLE9BQUEsWUFBQTtVQUNBLFNBQUEsTUFBQSxRQUFBOzs7OztJQUtBLElBQUEsUUFBQSxVQUFBLFdBQUEsTUFBQSxVQUFBO01BQ0EsSUFBQSxPQUFBLEtBQUEsV0FBQSxNQUFBLFlBQUE7U0FDQSxJQUFBLE9BQUE7U0FDQSxXQUFBLE9BQUEsWUFBQTtXQUNBLElBQUEsVUFBQTtjQUNBLFNBQUEsTUFBQSxRQUFBO1lBQ0E7Ozs7O0VBS0EsSUFBQSxxQkFBQSxVQUFBLFdBQUEsVUFBQTtNQUNBLElBQUEsT0FBQSxtQkFBQSxXQUFBLFdBQUE7VUFDQSxJQUFBLE9BQUE7VUFDQSxXQUFBLE9BQUEsWUFBQTtZQUNBLFNBQUEsTUFBQSxRQUFBOzs7O0VBSUE7O0FDdkRBLENBQUEsVUFBQTtDQUNBOzs7Ozs7Q0FNQTtHQUNBLE9BQUEsa0JBQUE7R0FDQSxRQUFBLGVBQUE7O0NBRUEsYUFBQSxVQUFBO0NBQ0EsU0FBQSxjQUFBO0VBQ0EsT0FBQTtHQUNBLFFBQUEsVUFBQTtJQUNBLE9BQUE7S0FDQSxRQUFBLEVBQUEsUUFBQSxRQUFBO0tBQ0EsV0FBQSxDQUFBO0tBQ0EsU0FBQSxDQUFBLE1BQUEsT0FBQSxPQUFBLE9BQUE7S0FDQSxTQUFBLENBQUEsT0FBQSxPQUFBOzs7R0FHQSxXQUFBLFVBQUE7SUFDQSxPQUFBO0tBQ0EsYUFBQTtLQUNBLE9BQUEsQ0FBQSxNQUFBLE1BQUEsTUFBQTs7O0dBR0EsT0FBQSxVQUFBO0lBQ0EsT0FBQTtLQUNBLGNBQUE7S0FDQSxRQUFBLENBQUEsTUFBQSxNQUFBLE1BQUEsTUFBQTs7OztFQUlBOztBQ25DQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxRQUFBOztDQUVBLE1BQUEsVUFBQSxDQUFBOztDQUVBLFNBQUEsT0FBQTtFQUNBLElBQUEsTUFBQTtFQUNBLElBQUEsUUFBQTtFQUNBLElBQUEsY0FBQTtFQUNBLElBQUEsV0FBQTtFQUNBLElBQUEsWUFBQTtFQUNBLElBQUEsV0FBQTtFQUNBLElBQUEsbUJBQUE7RUFDQSxJQUFBLFNBQUE7RUFDQSxJQUFBLFFBQUE7O0VBRUEsU0FBQSxNQUFBLFFBQUEsT0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLDZCQUFBLFNBQUEsYUFBQTtHQUNBOztFQUVBLFNBQUEsWUFBQSxPQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUEsbUNBQUE7R0FDQTs7RUFFQSxTQUFBLFNBQUEsT0FBQTtHQUNBLE9BQUEsTUFBQSxJQUFBLHNCQUFBO0dBQ0E7O0VBRUEsU0FBQSxVQUFBLEtBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSxpQ0FBQSxLQUFBO0dBQ0E7O0VBRUEsU0FBQSxTQUFBLEtBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSxnQ0FBQSxLQUFBLElBQUE7R0FDQTs7RUFFQSxTQUFBLGlCQUFBLEtBQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSw4QkFBQSxLQUFBLElBQUE7R0FDQTs7RUFFQSxTQUFBLE9BQUEsV0FBQTtHQUNBLE9BQUEsTUFBQSxLQUFBLG9CQUFBO0dBQ0E7O0VBRUEsU0FBQSxNQUFBLE9BQUE7R0FDQSxPQUFBLE1BQUEsSUFBQSxtQ0FBQTtHQUNBOzs7O0FDdERBLENBQUEsVUFBQTtDQUNBOzs7Ozs7O0NBT0E7R0FDQSxPQUFBO0dBQ0EsV0FBQSxrQkFBQTs7Q0FFQSxnQkFBQSxVQUFBLENBQUE7O0NBRUEsU0FBQSxpQkFBQTtFQUNBLElBQUEsS0FBQTtFQUNBLEdBQUEsZUFBQTtFQUNBLEdBQUEsYUFBQTtFQUNBLEdBQUEsWUFBQTs7S0FFQSxTQUFBLFdBQUEsSUFBQSxHQUFBO01BQ0EsR0FBQSxXQUFBO01BQ0EsR0FBQSxlQUFBO1NBQ0EsVUFBQSxLQUFBLFNBQUEsRUFBQSxPQUFBLEdBQUEsS0FBQSxlQUFBO01BQ0E7O0tBRUEsU0FBQSxVQUFBLEdBQUEsR0FBQTtNQUNBLEdBQUEsV0FBQTtNQUNBLEdBQUEsZUFBQTtTQUNBLFVBQUEsS0FBQSxTQUFBLEVBQUEsT0FBQSxHQUFBLEtBQUEsZUFBQTtNQUNBO0VBQ0E7OztBQy9CQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsV0FBQSxvQkFBQTs7Q0FFQSxrQkFBQSxVQUFBLENBQUEsU0FBQSxnQkFBQSxhQUFBLFVBQUEsYUFBQTtDQUNBLFNBQUEsbUJBQUE7RUFDQSxJQUFBLEtBQUE7RUFDQSxHQUFBLGNBQUE7RUFDQSxHQUFBLFVBQUE7O0VBRUEsVUFBQSxHQUFBLGVBQUEsU0FBQSxHQUFBO0dBQ0EsS0FBQSxJQUFBLElBQUEsR0FBQSxZQUFBLFNBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQTtJQUNBLElBQUEsUUFBQSxPQUFBLEdBQUEsWUFBQSxHQUFBLEtBQUEsR0FBQSxNQUFBO0tBQ0EsT0FBQSxHQUFBLFlBQUEsR0FBQSxlQUFBLEdBQUE7O0lBRUE7OztFQUdBLFVBQUEsR0FBQSxpQkFBQSxTQUFBLEtBQUE7R0FDQSxLQUFBLElBQUEsSUFBQSxHQUFBLFlBQUEsU0FBQSxHQUFBLEtBQUEsR0FBQSxLQUFBO0lBQ0EsSUFBQSxRQUFBLE9BQUEsR0FBQSxZQUFBLEdBQUEsS0FBQSxLQUFBLEtBQUE7S0FDQSxHQUFBLFlBQUEsR0FBQSxRQUFBLE9BQUEsU0FBQSxLQUFBO0tBQ0EsR0FBQSxZQUFBLEdBQUEsWUFBQSxLQUFBO0tBQ0EsR0FBQSxZQUFBLEdBQUEsaUJBQUEsS0FBQTs7SUFFQTs7O0VBR0EsVUFBQSxHQUFBLFNBQUEsU0FBQSxHQUFBO0dBQ0EsS0FBQSxRQUFBLE9BQUEsT0FBQSxHQUFBLFNBQUE7SUFDQSxJQUFBLFFBQUEsUUFBQSxLQUFBO0lBQ0EsT0FBQSxHQUFBLFlBQUEsS0FBQTtJQUNBO0dBQ0EsR0FBQSxVQUFBLFVBQUEsR0FBQTs7Ozs7RUFLQSxVQUFBLEdBQUEsWUFBQSxTQUFBLEtBQUE7R0FDQSxNQUFBLFlBQUEsUUFBQSxRQUFBLFNBQUEsWUFBQTtJQUNBLEdBQUEsY0FBQTtJQUNBLEdBQUEsWUFBQSxRQUFBLFNBQUEsR0FBQTtLQUNBLEdBQUEsWUFBQSxPQUFBLFNBQUEsR0FBQSxZQUFBOztJQUVBLEdBQUEsVUFBQSxVQUFBLEdBQUE7Ozs7O0VBS0EsVUFBQSxHQUFBLFdBQUEsU0FBQSxLQUFBO0dBQ0EsTUFBQSxZQUFBLFFBQUEsUUFBQSxTQUFBLFlBQUE7SUFDQSxHQUFBLGNBQUE7SUFDQSxHQUFBLFVBQUEsVUFBQSxHQUFBOzs7OztFQUtBLElBQUEsU0FBQSxhQUFBO0VBQ0EsUUFBQSxVQUFBLFFBQUEsUUFBQSxTQUFBLE1BQUE7R0FDQSxNQUFBLE9BQUEsU0FBQSxHQUFBLFlBQUEsT0FBQSxHQUFBLFlBQUE7R0FDQSxHQUFBLGFBQUE7R0FDQSxHQUFBLFdBQUE7SUFDQSxjQUFBO0lBQ0EsYUFBQSxDQUFBLE1BQUEsTUFBQSxNQUFBO0lBQ0EsVUFBQSxHQUFBLFdBQUE7SUFDQSxXQUFBLEdBQUEsV0FBQSxRQUFBLEdBQUEsRUFBQSxNQUFBLEVBQUEsRUFBQSxLQUFBLEVBQUEsTUFBQSxHQUFBLFdBQUEsTUFBQSxFQUFBLEdBQUEsV0FBQSxNQUFBLEVBQUE7Ozs7RUFJQSxNQUFBLFlBQUEsUUFBQSxRQUFBLFNBQUEsWUFBQTtHQUNBLElBQUEsYUFBQTtJQUNBLEdBQUEsY0FBQTtJQUNBLEdBQUEsWUFBQSxRQUFBLFNBQUEsR0FBQTtLQUNBLEdBQUEsWUFBQSxPQUFBLFNBQUEsR0FBQSxZQUFBOztJQUVBLEdBQUEsVUFBQSxVQUFBLEdBQUE7VUFDQTtJQUNBO0lBQ0E7Ozs7O0VBS0EsSUFBQSxhQUFBLFNBQUEsWUFBQTtLQUNBLElBQUEsY0FBQSxFQUFBLE1BQUEsR0FBQSxJQUFBLFlBQUE7VUFDQSxPQUFBLEVBQUEsTUFBQSxHQUFBLElBQUEsWUFBQTtjQUNBLE9BQUEsRUFBQSxjQUFBLEdBQUEsVUFBQSxJQUFBLE1BQUE7Ozs7R0FJQSxLQUFBLGFBQUE7SUFDQSxLQUFBLElBQUEsSUFBQSxZQUFBLFNBQUEsR0FBQSxLQUFBLEdBQUEsS0FBQTtLQUNBLElBQUEsY0FBQTtLQUNBLElBQUEsSUFBQTtLQUNBLElBQUEsS0FBQTtLQUNBLElBQUEsSUFBQSxFQUFBLFFBQUEsWUFBQSxHQUFBLFdBQUEsWUFBQSxHQUFBO0tBQ0EsR0FBQSxZQUFBLElBQUEsRUFBQSxRQUFBLFlBQUEsR0FBQSxRQUFBLFlBQUEsR0FBQSxTQUFBLElBQUEsRUFBQSxRQUFBLFlBQUEsR0FBQSxPQUFBLFlBQUEsR0FBQTtLQUNBLFlBQUEsR0FBQSxHQUFBLFdBQUE7S0FDQSxZQUFBLEdBQUEsR0FBQSxlQUFBLFlBQUEsR0FBQSxRQUFBO0tBQ0EsSUFBQSxTQUFBO0tBQ0EsT0FBQSxLQUFBLFlBQUEsR0FBQSxTQUFBLFlBQUEsR0FBQTtLQUNBLE9BQUEsU0FBQSxZQUFBLEdBQUEsUUFBQTtLQUNBLE9BQUEsUUFBQSxZQUFBLEdBQUE7S0FDQSxZQUFBLEdBQUEsR0FBQSxJQUFBLEtBQUE7S0FDQTs7R0FFQSxPQUFBOzs7RUFHQSxHQUFBLElBQUEsWUFBQSxVQUFBLE9BQUE7U0FDQSxVQUFBOztFQUVBOztBQ3ZIQSxDQUFBLFVBQUE7Q0FDQTs7Ozs7O0NBTUE7R0FDQSxPQUFBO0dBQ0EsUUFBQSxVQUFBOztDQUVBLFFBQUEsVUFBQSxDQUFBLFNBQUEsU0FBQTtDQUNBLFNBQUEsU0FBQTtFQUNBLElBQUEsTUFBQTtFQUNBLElBQUEsa0JBQUE7RUFDQSxJQUFBLFdBQUE7RUFDQSxJQUFBLGFBQUE7RUFDQSxJQUFBLFFBQUE7RUFDQSxJQUFBLGFBQUE7RUFDQSxJQUFBLFVBQUE7RUFDQSxJQUFBLGFBQUE7RUFDQSxJQUFBLFlBQUE7RUFDQSxJQUFBLGNBQUE7RUFDQSxJQUFBLGlCQUFBO0VBQ0EsSUFBQSxjQUFBO0VBQ0EsSUFBQSxTQUFBOzs7RUFHQSxTQUFBLGlCQUFBO0dBQ0EsT0FBQSxNQUFBLElBQUE7R0FDQTs7RUFFQSxTQUFBLFNBQUEsS0FBQTtHQUNBLE9BQUEsTUFBQSxLQUFBLGNBQUE7R0FDQTs7RUFFQSxTQUFBLFdBQUEsU0FBQTtHQUNBLE9BQUEsTUFBQSxPQUFBLGdDQUFBO0dBQ0E7O0VBRUEsU0FBQSxNQUFBLEtBQUE7R0FDQSxPQUFBLE1BQUEsS0FBQSwyQkFBQTtHQUNBOztFQUVBLFNBQUEsWUFBQTtHQUNBLE9BQUEsTUFBQSxJQUFBO0dBQ0E7O0VBRUEsU0FBQSxTQUFBLFFBQUE7R0FDQSxJQUFBLElBQUEsWUFBQTtJQUNBLElBQUEsVUFBQSxZQUFBLE1BQUEsSUFBQSxRQUFBLGNBQUEsT0FBQSxVQUFBLFlBQUEsTUFBQSxJQUFBLFFBQUEsVUFBQSxRQUFBO0tBQ0EsT0FBQTtVQUNBO0tBQ0EsT0FBQTtLQUNBO0lBQ0E7O0dBRUEsT0FBQTtHQUNBOztFQUVBLFNBQUEsWUFBQTtHQUNBLElBQUEsSUFBQSxZQUFBO0lBQ0EsT0FBQSxVQUFBLFlBQUEsTUFBQSxJQUFBLFFBQUE7SUFDQTtHQUNBOztFQUVBLFNBQUEsV0FBQTtHQUNBLElBQUEsSUFBQSxZQUFBO0lBQ0EsT0FBQSxVQUFBLFlBQUEsTUFBQSxJQUFBLFFBQUE7SUFDQTtHQUNBOztFQUVBLFNBQUEsYUFBQTtHQUNBLElBQUEsSUFBQSxZQUFBO0lBQ0EsT0FBQSxVQUFBLFlBQUEsTUFBQSxJQUFBLFFBQUE7SUFDQTtHQUNBOztFQUVBLFNBQUEsZ0JBQUE7R0FDQSxJQUFBLElBQUEsWUFBQTtJQUNBLE9BQUEsVUFBQSxZQUFBLE1BQUEsSUFBQSxRQUFBO0lBQ0E7R0FDQTs7RUFFQSxTQUFBLGFBQUE7R0FDQSxJQUFBLElBQUEsWUFBQTtJQUNBLE9BQUEsVUFBQSxZQUFBLE1BQUEsSUFBQSxRQUFBO0lBQ0E7R0FDQTs7RUFFQSxTQUFBLFFBQUE7R0FDQSxJQUFBLElBQUEsWUFBQTtJQUNBLE9BQUEsVUFBQSxZQUFBLE1BQUEsSUFBQSxRQUFBO0lBQ0E7R0FDQTtFQUNBOztLQUVBIiwiZmlsZSI6ImlubmV0Lm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbIjsoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRhbmd1bGFyLm1vZHVsZSgnYXBwJyxbXG5cdFx0J2FwcC5yb3V0ZXInLFxuXHRcdCdhcHAudG9wbmF2Jyxcblx0XHQnYXBwLmNhc2UnLFxuXHRcdCdhcHAuY2FyJyxcblx0XHQnYXBwLmJyYW5jaCcsXG5cdFx0J2FwcC5tYXAnLFxuXHRcdCdhcHAubWVtYmVyJyxcblx0XHQnYXBwLnN0cmlrZVRlYW0nLFxuXHRcdCdhcHAuc29ja2V0Jyxcblx0XHQnYXBwLnVzZXInLFxuXHRcdCdhcHAudGltZXInLFxuXHRcdCdhcHAubm90aWZpY2F0aW9uJ1xuXHRdKVxufSkoKTtcblxuIiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmNhciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXIubW9kdWxlKCdhcHAuY2FyJywgW10pXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5icmFuY2ggTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmJyYW5jaCcsW10pXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5jYXNlIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhci5tb2R1bGUoJ2FwcC5jYXNlJywgW1xuXHRcdCd1aS5yb3V0ZXInLFxuXHRcdCd1aS5ib290c3RyYXAnXG5cdF0pXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQvKipcblx0KiBhcHAuZGFzaGJvYXJkIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5kYXNoYm9hcmQnLFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmRpcmVjdG9yIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhci5tb2R1bGUoJ2FwcC5kaXJlY3RvcicsIFtdKVxuXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5kaXNwYXRjaCBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXIubW9kdWxlKCdhcHAuZGlzcGF0Y2gnLCBbXSlcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmR1dHlsaXN0IE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhci5tb2R1bGUoJ2FwcC5kdXR5bGlzdCcsIFtdKVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAuZ2VvIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhci5tb2R1bGUoJ2FwcC5nZW8nLCBbXSk7XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQvKipcblx0KiBhcHAubWFwIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhci5tb2R1bGUoJ2FwcC5tYXAnLCBbXSlcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdC8qKlxuXHQqIGFwcC5tZW1iZXIgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyLm1vZHVsZSgnYXBwLm1lbWJlcicsIFtdKVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAubm90aWZpY2F0aW9uIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhci5tb2R1bGUoJ2FwcC5ub3RpZmljYXRpb24nLCBbXSk7XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5zYWZldHkgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyLm1vZHVsZSgnYXBwLnNhZmV0eScsW10pXG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5zb2NrZXQgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyLm1vZHVsZSgnYXBwLnNvY2tldCcsIFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnN0cmlrZVRlYW0gTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyLm1vZHVsZSgnYXBwLnN0cmlrZVRlYW0nLFtdKTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnRpbWVyIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhci5tb2R1bGUoJ2FwcC50aW1lcicsIFtdKVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAuc3VtbWFyeSBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXIubW9kdWxlKCdhcHAuc3VtbWFyeScsW10pO1xufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAudXNlciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXIubW9kdWxlKCdhcHAudXNlcicsIFtdKTtcbn0pOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5jYXIgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmNhcicpXG5cdFx0LmNvbnRyb2xsZXIoJ0NhckVkaXRDb250cm9sbGVyJyxDYXJFZGl0Q29udHJvbGxlcik7XG5cblx0Q2FyRWRpdENvbnRyb2xsZXIuJGluamVjdCA9IFtdO1xuXHRmdW5jdGlvbiBDYXJFZGl0Q29udHJvbGxlcigpe1xuXG5cdH07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmNhciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuY2FyJylcblx0XHQuY29udHJvbGxlcignQ2FySW5kZXhDb250cm9sbGVyJyxDYXJJbmRleENvbnRyb2xsZXIpO1xuXG5cdENhckluZGV4Q29udHJvbGxlci4kaW5qZWN0ID0gW107XG5cdGZ1bmN0aW9uIENhckluZGV4Q29udHJvbGxlcigpe1xuXG5cdH07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKipcblx0KiBhcHAuY2FyIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5jYXInKVxuXHRcdC5zZXJpY2UoJ0NhclN2YycsQ2FyU3ZjKTtcblxuXHRDYXJTdmMuJGluamVjdCA9IFsnJGh0dHAnXTtcblx0XG5cdGZ1bmN0aW9uIENhclN2YygkaHR0cCl7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cdFx0dm0uZmV0Y2hCeUNvcnBzICA9IGZldGNoQnlDb3Jwcztcblx0XHR2bS5mZXRjaEJ5QnJhbmNoID0gZmV0Y2hCeUJyYW5jaDtcblx0XHR2bS51cGRhdGUgXHRcdCA9IHVwZGF0ZTsgXG5cblx0XHRmdW5jdGlvbiBmZXRjaEJ5Q29ycHMoY29ycHMpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXJzP2NvcnBzPScgKyBjb3Jwcyk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGZldGNoQnlCcmFuY2goIGJyYW5jaCApe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXJzP2JyYW5jaD0nICsgYnJhbmNoICk7XG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiB1cGRhdGUoZGF0YSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL2NhcnMvJyArIGRhdGEuaWQgLCBkYXRhKTtcblx0XHR9O1xuXHR9O1xufSkoKTsiLCIoZnVuY3Rpb24oKXtcblxuXHQvKipcblx0KiBhcHAuYnJhbmNoIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5icmFuY2gnKVxuXHRcdC5jb250cm9sbGVyKCdCcmFuY2hTdmMnLEJyYW5jaFN2Yyk7XG5cblx0QnJhbmNoU3ZjLiRpbmplY3QgPSBbJyRodHRwJ107XG5cdGZ1bmN0aW9uIEJyYW5jaFN2YygkaHR0cCl7XG5cdFx0dmFyIHN2YyA9IHRoaXM7XG5cdFx0c3ZjLmZldGNoQnlDb3JwcyBcdD0gZmV0Y2hCeUNvcnBzO1xuXHRcdHN2Yy5mZXRjaEJ5TmFtZSBcdD0gZmV0Y2hCeU5hbWU7XG5cdFx0c3ZjLnRvdGFsTGlzdEZpbmRCeU5hbWUgPSB0b3RhbExpc3RGaW5kQnlOYW1lO1xuXHRcdHN2Yy5nZXREZXRhaWxzIFx0XHQ9IGdldERldGFpbHM7XG5cdFx0c3ZjLmZldGNoT25EdXR5QnJhbmNoZXMgPSBmZXRjaE9uRHV0eUJyYW5jaGVzO1xuXHRcdHN2Yy51cGRhdGUgXHRcdFx0PSB1cGRhdGU7XG5cdFx0c3ZjLnVwZGF0ZU1pc3Npb24gXHQ9IHVwZGF0ZU1pc3Npb247XG5cdFx0XG5cdFx0ZnVuY3Rpb24gZmV0Y2hCeUNvcnBzKGNvcnBzKXtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvYnJhbmNoZXM/Y29ycHM9JyArIGNvcnBzKTtcblx0XHR9O1xuXHRcdFxuXHRcdGZ1bmN0aW9uIGZldGNoQnlOYW1lKGJyYW5jaCl7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2JyYW5jaGVzP2JyYW5jaD0nICsgYnJhbmNoKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdG90YWxMaXN0RmluZEJ5TmFtZShicmFuY2gpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9icmFuY2hlcy8nICsgYnJhbmNoKVxuXHRcdH1cblxuXHRcdGZ1bmN0aW9uIGdldERldGFpbHMoaWQpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9icmFuY2hlcy8nICsgaWQpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBmZXRjaE9uRHV0eUJyYW5jaGVzKGJyYW5jaGVzKXtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2JyYW5jaGVzL29uZHV0eScsYnJhbmNoZXMpO1xuXHRcdH07XG5cdFxuXHRcdGZ1bmN0aW9uIHVwZGF0ZShkYXRhKXtcblx0XHRcdHJldHVybiAkaHR0cC5wdXQoJy9hcGkvYnJhbmNoZXMvJyArIGRhdGEuYnJhbmNoICwgZGF0YSk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZU1pc3Npb24oZGF0YSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL2JyYW5jaGVzP2JyYW5jaD0nICsgZGF0YS5icmFuY2gsIGRhdGEpO1xuXHRcdH07XG5cdH07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmNhc2UgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmNhc2UnKVxuXHRcdC5jb250cm9sbGVyKCdDYXNlQ29uZmlybUNvbnRyb2xsZXInLENhc2VDb25maXJtQ29udHJvbGxlcik7XG5cblx0Q2FzZUNvbmZpcm1Db250cm9sbGVyLiRpbmplY3QgPSBbJ1VzZXJTdmMnLCAnQ2FzZVN2YycsICckc3RhdGVQYXJhbXMnLCckc3RhdGUnLCckbW9kYWxJbnN0YW5jZSddO1xuXHRmdW5jdGlvbiBDYXNlQ29uZmlybUNvbnRyb2xsZXIoVXNlclN2YywgQ2FzZVN2YywgJHN0YXRlUGFyYW1zLCRzdGF0ZSwkbW9kYWxJbnN0YW5jZSl7XG5cdFx0dmFyIHZtID0gdGhpcztcblx0XHRcblx0XHR2bS51c2VyID0ge307XG5cdFx0dm0uc2VuZCA9IHNlbmQ7IFxuXHRcdHZtLmNhc2VJbmZvID0ge1xuXHRcdFx0aWQgOiAkc3RhdGVQYXJhbXMuaWQsXG5cdFx0XHRlbmRBdCA6IG1vbWVudCgpLmZvcm1hdCgnWVlZWS1NTU0tREQsIGg6bW06c3MgYScpXG5cdFx0fTsgXG5cblx0XHRmdW5jdGlvbiBzZW5kKCl7XG5cdFx0XHRVc2VyU3ZjLmxvZ2luKHZtLnVzZXIpLnN1Y2Nlc3MoZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdENhc2VTdmMuY2xvc2VDYXNlKHZtLmNhc2VJbmZvKS5zdWNjZXNzKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0JG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG5cdFx0XHRcdFx0JHN0YXRlLmdvKCdkdXR5RGVzay5jYXNlLmluZGV4Jyk7XG5cdFx0XHRcdH0pXG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9O1xufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAuY2FzZSBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuY2FzZScpXG5cdFx0LmNvbnRyb2xsZXIoJ0Nhc2VFZGl0Q29udHJvbGxlcicsQ2FzZUVkaXRDb250cm9sbGVyKTtcblxuXHRDYXNlRWRpdENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHN0YXRlUGFyYW1zJywgJ0Nhc2VTdmMnLCAnQ2FyU3ZjJywgJ1VzZXJTdmMnLCAnQnJhbmNoU3ZjJywgJyR3aW5kb3cnLCAnJG1vZGFsJywnTnRmU3ZjJ107XG5cblx0ZnVuY3Rpb24gQ2FzZUVkaXRDb250cm9sbGVyKCRzdGF0ZVBhcmFtcywgQ2FzZVN2YywgQ2FyU3ZjLCBVc2VyU3ZjLCBCcmFuY2hTdmMsICR3aW5kb3csICRtb2RhbCxOdGZTdmMpe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdHZhciBkaXNwYXRjaENhcnMgID0gW107XG5cdFx0dm0udGVybWluYXRlQ2FzZSAgPSB0ZXJtaW5hdGVDYXNlO1xuXHRcdHZtLmRpc3BhdGNoIFx0ICA9IGRpc3BhdGNoO1xuXHRcdHZtLnNlbGVjdEJyYW5jaCAgID0gc2VsZWN0QnJhbmNoO1xuXHRcdHZtLmNhbmNlbERpc3BhdGNoID0gY2FuY2VsRGlzcGF0Y2g7XG5cdFx0dm0uc2F2ZSBcdFx0ICA9IHNhdmU7IFxuXG5cdFx0YW5ndWxhci5leHRlbmQodm0sIHtcblx0ICAgICAgICBub3dQb3M6IHtcblx0ICAgICAgICAgICAgbGF0OiAyNC45ODgsXG5cdCAgICAgICAgICAgIGxuZzogMTIxLjU3NTIsXG5cdCAgICAgICAgICAgIHpvb206IDE3XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjb250cm9sczoge1xuXHQgICAgICAgICAgICBkcmF3OiB7fVxuXHQgICAgICAgIH1cblx0ICAgIH0pO1xuXG5cdFx0dmFyIGNhc2VJZCA9ICRzdGF0ZVBhcmFtcy5pZDtcblxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5Q29ycHMoVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2hlcyl7XG5cdFx0ICAgIHZtLmJyYW5jaGVzID0gYnJhbmNoZXM7XG5cdFx0ICAgIHZtLmN1cnJlbnRCcmFuY2ggPSBicmFuY2hlc1swXS5uYW1lXG5cdFx0fSk7XG5cblx0XHRmdW5jdGlvbiBzZWxlY3RCcmFuY2goYnJhbmNoKXtcblx0ICAgIFx0dm0uY3VycmVudEJyYW5jaCA9IGJyYW5jaC5uYW1lO1xuXHQgICAgfTtcblxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5Q29ycHMoVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2hlcyl7XG5cdFx0ICAgIHZtLmJyYW5jaGVzID0gYnJhbmNoZXM7XG5cdFx0ICAgIHZtLmN1cnJlbnRCcmFuY2ggPSBicmFuY2hlc1swXS5uYW1lXG5cdFx0fSlcblxuXHRcdENhc2VTdmMuZmV0Y2hCeUlkKGNhc2VJZCkuc3VjY2VzcyhmdW5jdGlvbihfY2FzZSl7XG5cdFx0XHR2bS5jdXJyZW50Q2FzZSA9IF9jYXNlO1xuXHRcdFx0dm0uZGlzcGF0Y2hMaXN0ID0gXy5wbHVjayhfY2FzZS5jYXJzLCAncmFkaW9Db2RlJykuam9pbignICcpXG5cdFx0XHR2bS5jdXJyZW50Q2FzZS5jYXJJZHMgPSBfLnBsdWNrKF9jYXNlLmNhcnMsJ19pZCcpO1xuXHRcdH0pLnRoZW4oZnVuY3Rpb24oKXtcblx0XHRcdENhclN2Yy5mZXRjaEJ5Q29ycHMoVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihjYXJzKXtcblx0XHRcdFx0dm0uY2FycyA9IGNhcnNcblx0XHRcdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCB2bS5jYXJzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdFx0aWYgKCB2bS5jdXJyZW50Q2FzZS5jYXJJZHMuaW5kZXhPZih2bS5jYXJzW2ldLl9pZCkgPiAtMSApIHtcblx0XHRcdFx0XHRcdHZtLmNhcnNbaV0uaXNDaGVja2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRcdGRpc3BhdGNoQ2Fycy5wdXNoKHZtLmNhcnNbaV0pO1xuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblxuXHRcdFx0TnRmU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbihudGZzKXtcblx0XHRcdFx0dm0ubnRmcyA9IG50ZnM7XG5cdFx0XHRcdHZtLmN1cnJlbnRDYXNlLm50ZnMgPSBfLnBsdWNrKG50ZnMsJ3R5cGUnKVxuXHRcdFx0XHR2bS5jdXJyZW50Q2FzZS5udGYgID0gdm0uY3VycmVudENhc2UubnRmc1swXTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0ZnVuY3Rpb24gZ2V0QnJhbmNoSWQoYnJhbmNoZXNMaXN0KXtcblx0XHRcdHZhciBicmFuY2hlcyA9IF8udW5pcXVlKGJyYW5jaGVzTGlzdCk7XG5cdFx0XHR2YXIgYnJhbmNoSWRzID0gW107XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHZtLmJyYW5jaGVzLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRcdGlmIChicmFuY2hlcy5pbmRleE9mKHZtLmJyYW5jaGVzW2ldLm5hbWUpID4gLTEpIHtcblx0XHRcdFx0XHRicmFuY2hJZHMucHVzaCh2bS5icmFuY2hlc1tpXS5faWQpO1xuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblx0XHRcdHJldHVybiAgYnJhbmNoSWRzO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBkaXNwYXRjaCggY2FyICl7XG5cdFx0XHRjYXIuaXNDaGVja2VkID0gdHJ1ZTsgXG5cdFx0XHRkaXNwYXRjaENhcnMucHVzaChjYXIpO1xuXHRcdFx0dm0uZGlzcGF0Y2hMaXN0ID0gXy5wbHVjayhkaXNwYXRjaENhcnMsICdyYWRpb0NvZGUnKS5qb2luKFwiIFwiKVxuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBjYW5jZWxEaXNwYXRjaChjYXIpe1xuXHRcdFx0Y2FyLmlzQ2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0ZGlzcGF0Y2hDYXJzLnNwbGljZShfLnBsdWNrKGRpc3BhdGNoQ2FycywgJ19pZCcpLmluZGV4T2YoY2FyLl9pZCksMSlcblx0XHRcdHZtLmRpc3BhdGNoTGlzdCA9IF8ucGx1Y2soZGlzcGF0Y2hDYXJzLCAncmFkaW9Db2RlJykuam9pbihcIiBcIilcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gc2F2ZSgpe1xuXHRcdFx0dmFyIGN1cnJlbnROdGY7XG5cblx0XHRcdHZtLm50ZnMuZm9yRWFjaChmdW5jdGlvbihudGYsaWQpe1xuXHRcdFx0XHRpZiAobnRmLnR5cGUgPT0gdm0uY3VycmVudENhc2UubnRmICkge1xuXHRcdFx0XHRcdGN1cnJlbnROdGYgID0gdm0ubnRmc1tpZF07XG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHRcdENhc2VTdmMudXBkYXRlKHtcblx0XHRcdFx0Y2FzZUlkICAgIDogdm0uY3VycmVudENhc2UuX2lkLFxuXHRcdFx0XHRhZGRyZXNzICAgOiB2bS5jdXJyZW50Q2FzZS5hZGRyZXNzIHx8IFwi5ris6KmmXCIsXG5cdFx0XHRcdG9mZmljZXJSZWNlaXZlciA6IFVzZXJTdmMuY3VycmVudFVzZXIoKSB8fCAgXCLlionmm4nmm7xcIixcblx0XHRcdFx0dHlwZSAgICAgIDogdm0uY3VycmVudENhc2UudHlwZSB8fCBcIueBq+itplwiLFxuXHRcdFx0XHR0eXBlcyBcdCAgOiB2bS5jdXJyZW50Q2FzZS50eXBlcyxcblx0XHRcdFx0cGhvbmUgICAgIDogdm0uY3VycmVudENhc2UucGhvbmUgfHwgXCLmuKzoqaZcIixcblx0XHRcdFx0YnJhbmNoZXMgIDogXy51bmlxdWUoXy5wbHVjayhkaXNwYXRjaENhcnMsICdicmFuY2gnKSksXG5cdFx0XHRcdGJyYW5jaElkcyA6IGdldEJyYW5jaElkKHZtLmN1cnJlbnRDYXNlLmJyYW5jaGVzKSxcblx0XHQgIFx0XHRjYXJzICAgICAgOiBfLnBsdWNrKGRpc3BhdGNoQ2FycywnX2lkJyksXG5cdFx0XHRcdGlzT25nb2luZyA6IHRydWUsXG5cdFx0XHRcdGNvcnBzIFx0ICA6IFVzZXJTdmMudXNlckNvcnBzKCksXG5cdFx0XHRcdGVudiBcdCAgOiB2bS5jdXJyZW50Q2FzZS5lbnYsXG5cdFx0XHRcdGVudnMgXHQgIDogdm0uY3VycmVudENhc2UuZW52cyxcblx0XHRcdFx0Zmxvb3IgXHQgIDogdm0uY3VycmVudENhc2UuZmxvb3IsXG5cdFx0XHRcdG50ZiAgICAgICA6IGN1cnJlbnROdGYuX2lkLFxuXHRcdFx0XHRsYXN0VXBkYXRlIDogbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NTS1ERCBoOm1tOnNzIGEnKVxuXHRcdFx0fSkuc3VjY2VzcyhmdW5jdGlvbigpe1xuXHRcdFx0XHQkd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuXHRcdFx0fSlcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdGVybWluYXRlQ2FzZSAoKXtcblx0XHRcdHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuXHRcdFx0ICBcdHRlbXBsYXRlVXJsOiAndmlld3MvY2FzZS9jYXNlLmNvbmZpcm0ubW9kYWwuaHRtbCcsXG5cdFx0XHQgICAgY29udHJvbGxlcjogJ0Nhc2VDb25maXJtQ3RybCcsXG5cdFx0XHQgICAgc2l6ZTogXCJtZFwiXHQgICAgXG5cdFx0XHR9KTtcblx0XHR9O1xuXHR9XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5jYXNlJylcblx0XHQuY29udHJvbGxlcignQ2FzZUNvbnRyb2xsZXInLENhc2VDb250cm9sbGVyKTtcblx0XG5cdENhc2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzdGF0ZVBhcmFtcycsJyRtb2RhbCcsJ0Nhc2VTdmMnLCAnJGxvZycsICdTb2NrZXRTdmMnLCAnVXNlclN2YycsICckbG9jYXRpb24nXTtcblx0ZnVuY3Rpb24gQ2FzZUNvbnRyb2xsZXIoJHN0YXRlUGFyYW1zLCRtb2RhbCxDYXNlU3ZjLCAkbG9nLCBTb2NrZXRTdmMsIFVzZXJTdmMsICRsb2NhdGlvbil7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cdFx0dm0ubWF4U2l6ZSBcdFx0PSA1OyBcblx0XHR2bS5pdGVtc1BlclBhZ2UgPSAzO1xuXHRcdHZtLmN1cnJlbnRQYWdlICA9IDE7XG5cdFx0dm0ucGFnZUNoYW5nZWQgID0gcGFnZUNoYW5nZWQ7XG5cdFx0dm0ucXVlcnlDYXNlcyAgID0gcXVlcnlDYXNlcztcblx0XHR2bS5jaG9vc2UgXHRcdD0gY2hvb3NlO1xuXHRcdFxuXHRcdHZtLnF1ZXJ5Q2FzZXMoKTtcblxuXHRcdGZ1bmN0aW9uIHBhZ2VDaGFuZ2VkKCl7XG5cdFx0XHRDYXNlU3ZjLmZldGNoKFVzZXJTdmMudXNlckNvcnBzKCksIHZtLmN1cnJlbnRQYWdlICwgdm0uaXRlbXNQZXJQYWdlICkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0dm0uY2FzZXMgPSBkYXRhLmNhc2VzO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHF1ZXJ5Q2FzZXMoKXtcblx0XHRcdENhc2VTdmMuZmV0Y2goVXNlclN2Yy51c2VyQ29ycHMoKSwgdm0uY3VycmVudFBhZ2UsIHZtLml0ZW1zUGVyUGFnZSkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0dm0uY2FzZXMgPSBkYXRhLmNhc2VzO1xuXHRcdFx0XHR2bS50b3RhbEl0ZW1zID0gZGF0YS50b3RhbENhc2VzO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGNob29zZShpZCl7XG5cdFx0XHRDYXNlU3ZjLmZldGNoQnlJZCh2bS5jYXNlc1tpZF0uX2lkKS5zdWNjZXNzKGZ1bmN0aW9uKF9jYXNlKXtcblx0XHRcdFx0XHR2bS5jYXNlRGV0YWlscyA9IF9jYXNlO1xuXHRcdFx0fSk7XG5cdFx0fTtcblxuXHRcdFNvY2tldFN2Yy5vbignbmV3Q2FzZScsZnVuY3Rpb24oX2Nhc2Upe1xuXHRcdFx0dm0uY2FzZXMudW5zaGlmdChfY2FzZSk7XG5cdFx0fSk7XG5cblx0XHRTb2NrZXRTdmMub24oJ2Nhc2VNb2RpZmllZCcsZnVuY3Rpb24oX2Nhc2Upe1xuXHRcdFx0dm0uY2FzZXNbX2Nhc2UuY2FzZUlkLTFdID0gX2Nhc2U7XG5cdFx0fSk7XG5cdH07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmNhc2UgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmNhc2UnKVxuXHRcdC5jb250cm9sbGVyKCdDYXNlTW9kYWxDb250cm9sbGVyJyxDYXNlTW9kYWxDb250cm9sbGVyKTtcblxuXHRDYXNlTW9kYWxDb250cm9sbGVyLiRpbmplY3QgPSBbJ0NhclN2YycsICckbW9kYWxJbnN0YW5jZScsICdDYXNlU3ZjJywnJHN0YXRlJywgJ2Nhc2VJZCcsJ2Nhc2VEZXRhaWxzJywgJ1N0U3ZjJywgJyR3aW5kb3cnLCAnQnJhbmNoU3ZjJywgJ1VzZXJTdmMnLCAnTnRmU3ZjJ107XG5cblx0ZnVuY3Rpb24gQ2FzZU1vZGFsQ29udHJvbGxlcihDYXJTdmMsICRtb2RhbEluc3RhbmNlLCBDYXNlU3ZjLCRzdGF0ZSwgY2FzZUlkLGNhc2VEZXRhaWxzLCBTdFN2YywgJHdpbmRvdywgQnJhbmNoU3ZjLCBVc2VyU3ZjLCBOdGZTdmMpe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdHZtLm5mdE9wdGlvbiA9IHt9O1xuXHRcdHZtLmRpc3BhdGNoTGlzdCA9IHZtLmNhc2VPYmouZGlzcGF0Y2hMaXN0LmpvaW4oXCIgXCIpO1xuXHRcdHZtLmNhc2VPYmogPSB7XG5cdFx0XHRhZGRyZXNzIDogY2FzZURldGFpbHMuYWRkcmVzcyB8fCBudWxsLFxuXHRcdFx0cGhvbmUgOiBjYXNlRGV0YWlscy5waG9uZSB8fCBudWxsLFxuXHRcdCAgICB0eXBlIDogY2FzZURldGFpbHMudHlwZSB8fCAgXCLngavoraZcIiwgXG5cdFx0ICAgIHR5cGVzIDogWyBcIueBq+itplwiLCBcIuaVkeitt1wiLCBcIueBveWus1wiLCBcIuaqouiIiVwiLFwi5YW25LuWXCJdLFxuXHRcdCAgICBlbnYgICA6IFwi5L2P5a6F54Gr6K2mXCIsXG5cdFx0ICAgIGVudnMgIDogW1wi5L2P5a6F54Gr6K2mXCIsXCLpq5jmqJPjgIHlnLDkuIvoiIflt6Xlu6BcIixcIuaQtuaVkeWbsOmbo+WNgFwiLFwi5YW25LuWXCJdLFxuXHRcdCAgICBmbG9vciA6IDEsIFxuXHRcdCAgICBjYXJJZHMgOiBnZXRDYXJzRGV0YWlsKGNhc2VEZXRhaWxzKS5jYXJJZHMgIHx8IFtdLFxuXHRcdCAgICBkaXNwYXRjaExpc3QgOiBnZXRDYXJzRGV0YWlsKGNhc2VEZXRhaWxzKS5kaXNwYXRjaExpc3QgfHwgIFtdLFxuXHRcdCAgICBicmFuY2hlcyA6IGdldENhcnNEZXRhaWwoY2FzZURldGFpbHMpLmJyYW5jaGVzIHx8ICBbXVxuXHRcdH07XG5cdFx0dm0udXBkYXRlIFx0ID0gdXBkYXRlO1xuXHRcdHZtLmdldENhcnMgXHQgPSBnZXRDYXJzO1xuXHRcdHZtLmNhbmNlbCBcdCA9IGNhbmNlbDtcblx0XHR2bS5jYW5jZWxEaXNwYXRjaCA9IGNhbmNlbERpc3BhdGNoO1xuXHRcdHZtLmRpc3BhdGNoICA9IGRpc3BhdGNoO1xuXHRcdHZtLmNsb3NlQ2FzZSA9IGNsb3NlQ2FzZTtcblx0XHR2bS5zYXZlIFx0ID0gc2F2ZTtcblxuXHRcdGlmIChfLmlzRW1wdHkoY2FzZURldGFpbHMpKSB7XG5cdFx0XHR2bS5pc05ldyA9IHRydWU7XG5cdFx0XHRjYXJPYmpzID0gW107XG5cdFx0fWVsc2V7XG5cdFx0XHR2bS5pc05ldyA9IGZhbHNlO1xuXHRcdFx0dmFyIGNhck9ianMgPSBjYXNlRGV0YWlscy5jYXJzO1xuXHRcdH07XG5cblx0XHROdGZTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uKG5mdHMpe1xuXHRcdFx0dm0ubmZ0T3B0aW9uLm5mdHMgPSBuZnRzO1xuXHRcdH0pLnRoZW4oZnVuY3Rpb24oKXtcblx0XHRcdHZtLm5mdE9wdGlvbi5uZnQgPSB2bS5uZnRPcHRpb24ubmZ0c1swXTtcblx0XHR9KVxuXG5cdFx0QnJhbmNoU3ZjLmZldGNoQnlDb3JwcyhVc2VyU3ZjLnVzZXJDb3JwcygpKS5zdWNjZXNzKGZ1bmN0aW9uKGJyYW5jaGVzKXtcblx0XHQgICAgdm0uYnJhbmNoZXMgPSBicmFuY2hlcztcblx0XHR9KTtcblxuXHRcdGZ1bmN0aW9uIGdldENhcnNEZXRhaWwob2JqKXtcblx0XHRcdHZhciBkaXNwYXRjaExpc3QgPSBbXTtcblx0XHRcdHZhciBjYXJJZHMgPSBbXTtcblx0XHRcdHZhciBicmFuY2hlcyA9IFtdO1xuXG5cdFx0XHRpZiAob2JqLmNhcnMpIHtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IG9iai5jYXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0ZGlzcGF0Y2hMaXN0LnB1c2gob2JqLmNhcnNbaV0ucmFkaW9Db2RlKTtcblx0XHRcdFx0XHRjYXJJZHMucHVzaChvYmouY2Fyc1tpXS5faWQpO1xuXHRcdFx0XHRcdGJyYW5jaGVzLnB1c2gob2JqLmNhcnNbaV0uYnJhbmNoKTsgXG5cdFx0XHRcdH07XG5cdFx0XHRcdHJldHVybiB7ZGlzcGF0Y2hMaXN0IDogZGlzcGF0Y2hMaXN0ICwgY2FySWRzIDogY2FySWRzICwgYnJhbmNoZXMgOiAgYnJhbmNoZXN9XG5cblx0XHRcdH1lbHNle1xuXHRcdFx0XHRyZXR1cm4ge307XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBnZXRCcmFuY2hJZChicmFuY2hlc0xpc3Qpe1xuXHRcdFx0dmFyIGJyYW5jaGVzID0gXy51bmlxdWUoYnJhbmNoZXNMaXN0KTtcblx0XHRcdHZhciBicmFuY2hJZHMgPSBbXTtcblx0XHRcdGZvciAodmFyIGkgPSAwOyBpIDwgdm0uYnJhbmNoZXMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKGJyYW5jaGVzLmluZGV4T2Yodm0uYnJhbmNoZXNbaV0ubmFtZSkgPiAtMSkge1xuXHRcdFx0XHRcdGJyYW5jaElkcy5wdXNoKHZtLmJyYW5jaGVzW2ldLl9pZCk7XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdFx0cmV0dXJuICBicmFuY2hJZHM7XG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiBnZXRDYXJzKCBicmFuY2ggKXtcblx0XHRcdCBDYXJTdmMuZmV0Y2hCeUJyYW5jaChicmFuY2gubmFtZSkuc3VjY2VzcyhmdW5jdGlvbihjYXJzKXtcblx0XHRcdCBcdGZvciAodmFyIGkgPSBjYXJzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHQgXHRcdGlmICh2bS5jYXNlT2JqLmNhcklkcy5pbmRleE9mKGNhcnNbaV0uX2lkKSA+IC0xICkge1xuXHRcdFx0IFx0XHRcdGNhcnNbaV0uaXNDaGVja2VkID0gdHJ1ZTsgXG5cdFx0XHQgXHRcdH07XG5cdFx0XHQgXHR9O1xuXHRcdFx0IFx0dm0uY2FycyA9IGNhcnM7XG5cdFx0XHQgfSk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGNhbmNlbCgpIHtcblx0XHRcdCRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBjYW5jZWxEaXNwYXRjaChjYXIpe1xuXHRcdFx0Y2FyLmlzQ2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0Y2FyT2Jqcy5zcGxpY2UoY2FyT2Jqcy5pbmRleE9mKGNhciksMSlcblx0XHRcdHZtLmNhc2VPYmouY2FySWRzLnNwbGljZSh2bS5jYXNlT2JqLmRpc3BhdGNoTGlzdC5pbmRleE9mKGNhci5faWQpLDEpO1xuXHRcdFx0dm0uY2FzZU9iai5kaXNwYXRjaExpc3Quc3BsaWNlKHZtLmNhc2VPYmouZGlzcGF0Y2hMaXN0LmluZGV4T2YoY2FyLnJhZGlvQ29kZSksMSk7XG5cdFx0XHR2bS5jYXNlT2JqLmJyYW5jaGVzLnNwbGljZSh2bS5jYXNlT2JqLmRpc3BhdGNoTGlzdC5pbmRleE9mKGNhci5icmFuY2gpLDEpO1xuXHRcdFx0dm0uZGlzcGF0Y2hMaXN0ID0gdm0uY2FzZU9iai5kaXNwYXRjaExpc3Quam9pbihcIiBcIik7XG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiBkaXNwYXRjaCggY2FyICl7XG5cdFx0XHRjYXIuaXNDaGVja2VkID0gdHJ1ZTsgXG5cdFx0XHRjYXJPYmpzLnB1c2goY2FyKTtcblx0XHRcdHZtLmNhc2VPYmouY2FySWRzLnB1c2goY2FyLl9pZCk7XG5cdFx0XHR2bS5jYXNlT2JqLmRpc3BhdGNoTGlzdC5wdXNoKGNhci5yYWRpb0NvZGUpO1xuXHRcdFx0dm0uY2FzZU9iai5icmFuY2hlcy5wdXNoKGNhci5icmFuY2gpO1xuXHRcdFx0dm0uZGlzcGF0Y2hMaXN0ID0gdm0uY2FzZU9iai5kaXNwYXRjaExpc3Quam9pbihcIiBcIik7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGNsb3NlQ2FzZSgpe1xuXHRcdFx0U3RTdmMuY291bnQoY2FzZURldGFpbHMuX2lkKS5zdWNjZXNzKGZ1bmN0aW9uKHRvdGFsKXtcblx0XHRcdFx0aWYgKHRvdGFsID4gMCApIHtcblx0XHRcdFx0XHQkd2luZG93LmFsZXJ0KFwi5bCa5pyJ6ZqK5ZOh5Zyo5a6J5YWo566h5Yi2XCIpXG5cdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdENhc2VTdmMuY2xvc2VDYXNlKHtcblx0XHRcdFx0XHRcdGlkIDogY2FzZURldGFpbHMuX2lkLFxuXHRcdFx0XHRcdFx0aXNPbmdvaW5nIDogZmFsc2Vcblx0XHRcdFx0XHR9KS5zdWNjZXNzKGZ1bmN0aW9uKG1zZyl7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhtc2cpXG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0JG1vZGFsSW5zdGFuY2UuZGlzbWlzcygnY2FuY2VsJyk7XG5cdFx0XHRcdFx0JHN0YXRlLnJlbG9hZCgpXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gc2F2ZSgpe1xuXHRcdFx0Q2FzZVN2Yy5jcmVhdGUoe1xuXHRcdFx0XHRjYXNlSWQgICA6IGNhc2VJZCArIDEsIFxuXHRcdFx0XHRhZGRyZXNzICAgOiB2bS5jYXNlT2JqLmFkZHJlc3MgfHwgXCLmuKzoqaZcIixcblx0XHRcdFx0b2ZmaWNlclJlY2VpdmVyIDogVXNlclN2Yy5jdXJyZW50VXNlcigpIHx8ICBcIuWKieabieabvFwiLFxuXHRcdFx0XHR0eXBlICAgICAgOiB2bS5jYXNlT2JqLnR5cGUgfHwgXCLmlZHorbdcIixcblx0XHRcdFx0cGhvbmUgICAgIDogdm0uY2FzZU9iai5waG9uZSB8fCBcIua4rOipplwiLFxuXHRcdFx0XHRicmFuY2hlcyAgOiBfLnVuaXF1ZSh2bS5jYXNlT2JqLmJyYW5jaGVzKSxcblx0XHRcdFx0YnJhbmNoSWRzIDogZ2V0QnJhbmNoSWQodm0uY2FzZU9iai5icmFuY2hlcyksXG5cdFx0ICBcdFx0Y2FycyAgICAgIDogdm0uY2FzZU9iai5jYXJJZHMsXG5cdFx0XHRcdGlzT25nb2luZyA6IHRydWUsXG5cdFx0XHRcdGNvcnBzIFx0ICA6IFVzZXJTdmMudXNlckNvcnBzKCksXG5cdFx0XHRcdGVudiBcdCAgOiB2bS5jYXNlT2JqLmVudixcblx0XHRcdFx0Zmxvb3IgXHQgIDogdm0uY2FzZU9iai5mbG9vclxuXHRcdFx0fSkuc3VjY2VzcyhmdW5jdGlvbihuZXdDYXNlKXtcblx0XHRcdFx0JG1vZGFsSW5zdGFuY2UuY2xvc2UobmV3Q2FzZSlcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB1cGRhdGUoKXtcblx0XHRcdHZhciBjb250ZW50ID0ge1xuXHRcdFx0XHRpZCA6IGNhc2VEZXRhaWxzLl9pZCxcblx0XHRcdFx0Y2FzZUlkICAgOiBjYXNlSWQsIFxuXHRcdFx0XHRhZGRyZXNzICAgOiB2bS5jYXNlT2JqLmFkZHJlc3MsXG5cdFx0XHRcdG9mZmljZXJSZWNlaXZlciA6IFVzZXJTdmMuY3VycmVudFVzZXIoKSB8fCBcIuWKieabieabvFwiLFxuXHRcdFx0XHR0eXBlICAgICAgOiB2bS5jYXNlT2JqLnR5cGUsXG5cdFx0XHRcdHBob25lICAgICA6IHZtLmNhc2VPYmoucGhvbmUsXG5cdFx0XHRcdGJyYW5jaGVzICA6IF8udW5pcXVlKHZtLmNhc2VPYmouYnJhbmNoZXMpLFxuXHRcdFx0XHRicmFuY2hJZHMgOiBnZXRCcmFuY2hJZCh2bS5jYXNlT2JqLmJyYW5jaGVzKSxcblx0XHQgIFx0XHRjYXJzICAgICAgOiB2bS5jYXNlT2JqLmNhcklkcyxcblx0XHRcdFx0aXNPbmdvaW5nIDogdHJ1ZSxcblx0XHRcdFx0ZW52IFx0ICA6IHZtLmNhc2VPYmouZW52LFxuXHRcdFx0XHRmbG9vciBcdCAgOiB2bS5jYXNlT2JqLmZsb29yXG5cdFx0XHR9O1xuXHRcdFx0XG5cdFx0XHRDYXNlU3ZjLnVwZGF0ZShjb250ZW50KTtcblx0XHRcdCRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuXHRcdH07XG5cdH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmNhc2UgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmNhc2UnKVxuXHRcdC5jb250cm9sbGVyKCdDYXNlTmV3Q29udHJvbGxlcicsQ2FzZU5ld0NvbnRyb2xsZXIpO1xuXG5cdENhc2VOZXdDb250cm9sbGVyLiRpbmplY3QgPSBbJ0NhclN2YycsICdCcmFuY2hTdmMnLCAnTnRmU3ZjJywgJ1VzZXJTdmMnLCckbG9jYXRpb24nLCdsZWFmbGV0RGF0YScsICckc3RhdGVQYXJhbXMnLCAnQ2FzZVN2YycsICckd2luZG93JywgJyRzdGF0ZScsICdHZW9TdmMnXTtcblxuXHRmdW5jdGlvbiBDYXNlTmV3Q29udHJvbGxlcihDYXJTdmMsIEJyYW5jaFN2YywgTnRmU3ZjLCBVc2VyU3ZjLCRsb2NhdGlvbixsZWFmbGV0RGF0YSwgJHN0YXRlUGFyYW1zLCBDYXNlU3ZjLCAkd2luZG93LCAkc3RhdGUsIEdlb1N2Yyl7XG5cdFx0dmFyIHZtID0gdGhpcztcblx0XHR2bS5zZWxlY3RCcmFuY2ggPSBzZWxlY3RCcmFuY2g7XG5cdFx0dm0uc2F2ZSA9IHNhdmU7XG5cdFx0dm0ubG9jYXRlQWRkcmVzcyA9IGxvY2F0ZUFkZHJlc3M7XG5cdFx0dm0uY2FuY2VsRGlzcGF0Y2ggPSBjYW5jZWxEaXNwYXRjaDtcblx0XHR2bS5kaXNwYXRjaCA9IGRpc3BhdGNoO1xuXHRcdHZtLmN1cnJlbnRUaW1lID0gIG1vbWVudCgpLmZvcm1hdCgnaDptbTpzcyBhJyk7IFxuXHRcdHZhciBiYXR0bGVSYWRpdXNzID0gW107XG5cdFx0dmFyIGRpc3BhdGNoQ2FycyA9IFtdO1xuXHRcdHZhciBub3RpZmljYXRpb25zO1xuXHRcdHZtLmRpc3BhdGNoTGlzdCA9IHZtLmN1cnJlbnRDYXNlLmRpc3BhdGNoTGlzdC5qb2luKCcgJyk7XG5cdFx0XG5cdFx0dm0uY3VycmVudENhc2UgPSB7XG5cdFx0XHRwaG9uZSBcdDogbnVsbCxcblx0XHQgICAgdHlwZSBcdDogJ+eBq+itpicsIFxuXHRcdCAgICB0eXBlcyBcdDogWyAn54Gr6K2mJywgJ+aVkeittycsICfngb3lrrMnLCAn5qqi6IiJJywn5YW25LuWJ10sXG5cdFx0ICAgIGVudiAgIFx0OiAn5L2P5a6F54Gr6K2mJyxcblx0XHQgICAgZW52cyAgXHQ6IFsn5L2P5a6F54Gr6K2mJywn6auY5qiT44CB5Zyw5LiL6IiH5bel5bugJywn5pC25pWR5Zuw6Zuj5Y2AJywn5YW25LuWJ10sXG5cdFx0ICAgIGZsb29yIFx0OiAxLCBcblx0XHQgICAgY2FySWRzICA6IFtdLFxuXHRcdCAgICBkaXNwYXRjaExpc3QgOiBbXSxcblx0XHQgICAgYnJhbmNoZXMgOiAgW10sXG5cdFx0ICAgIGxvY2F0aW9uIDogR2VvU3ZjLmRlZmF1bHRMb2NhdGlvbigpXG5cdFx0fTsgXG5cblx0XHRHZW9TdmMuZmV0Y2hCYXNlTG9jYXRpb24oVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihsb2NhdGlvbnMpe1xuXHRcdFx0dm0ubG9jYXRpb25zID0gbG9jYXRpb25zO1xuXHRcdH0pO1xuXG5cdCAgICBhbmd1bGFyLmV4dGVuZCh2bSwge1xuXHQgICAgICAgIG5vd1Bvczoge1xuXHQgICAgICAgICAgICBsYXQ6IEdlb1N2Yy5kZWZhdWx0TG9jYXRpb24oKS5sYXQsXG5cdCAgICAgICAgICAgIGxuZzogR2VvU3ZjLmRlZmF1bHRMb2NhdGlvbigpLmxuZyxcblx0ICAgICAgICAgICAgem9vbTogMTdcblx0ICAgICAgICB9LFxuXHQgICAgICAgbWFya2Vyczoge30sXG5cdCAgICB9KTtcblxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5Q29ycHMoVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2hlcyl7XG5cdFx0ICAgIHZtLmJyYW5jaGVzID0gYnJhbmNoZXM7XG5cdFx0ICAgIHZtLmN1cnJlbnRCcmFuY2ggPSBicmFuY2hlc1swXS5uYW1lXG5cdFx0fSk7XG5cblx0XHRDYXJTdmMuZmV0Y2hCeUNvcnBzKFVzZXJTdmMudXNlckNvcnBzKCkpLnN1Y2Nlc3MoZnVuY3Rpb24oY2Fycyl7XG5cdFx0XHR2bS5jYXJzID0gY2FyczsgXG5cdFx0fSk7XG5cblx0XHROdGZTdmMuZmV0Y2goKS5zdWNjZXNzKGZ1bmN0aW9uKG50ZnMpe1xuXHRcdFx0bm90aWZpY2F0aW9ucyA9IG50ZnM7XG5cdFx0XHR2bS5jdXJyZW50Q2FzZS5udGZzID0gXy5wbHVjayhudGZzLCd0eXBlJylcblx0XHRcdHZtLmN1cnJlbnRDYXNlLm50ZiAgPSB2bS5jdXJyZW50Q2FzZS5udGZzWzBdO1xuXHRcdH0pO1xuXG5cdFx0ZnVuY3Rpb24gbG9jYXRlQWRkcmVzcygpe1xuXHRcdFx0aWYgKHZtLmN1cnJlbnRDYXNlLmFkZHJlc3MpIHtcblx0XHRcdFx0R2VvU3ZjLmdldEdlb0VuY29kZWRJbmZvKHZtLmN1cnJlbnRDYXNlLmFkZHJlc3MpLnRoZW4oZnVuY3Rpb24ocmVzKXtcblx0XHRcdCAgICAgICAgdm0ubm93UG9zLmxhdCA9IHJlcy5KO1xuXHRcdFx0ICAgICAgICB2bS5ub3dQb3MubG5nID0gcmVzLk07XG5cdFx0ICAgICAgICAgICAgdm0ubWFya2Vycy5tYWluTWFya2VyID0ge1xuXHRcdCAgICAgICAgICAgIFx0bGF0OiByZXMuSixcblx0XHQgICAgICAgICAgICAgICAgbG5nOiByZXMuTSxcblx0XHQgICAgICAgICAgICAgICAgZm9jdXM6IHRydWUsXG5cdFx0ICAgICAgICAgICAgICAgIG1lc3NhZ2U6IFwi5qGI5Lu25qiZ55qEXCIsXG5cdFx0ICAgICAgICAgICAgfTtcblxuXHRcdCAgICAgICAgICAgIGlmIChyZXMpIHtcblx0XHQgICAgICAgICAgICBcdHZtLmxvY2F0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKGxvY2F0aW9uKXtcblx0XHRcdCAgICAgICAgICAgIFx0dmFyIHIgPSBHZW9TdmMuZ2V0RGlzdGFuY2UoIGxvY2F0aW9uLCB7IGxhdCA6IHJlcy5KICwgbG5nIDogcmVzLk0gfSApO1xuXHRcdFx0ICAgICAgICAgICAgXHR2YXIgYmF0dGxlUmFkaXVzID0gIHsgYmFzZSA6IGxvY2F0aW9uLmJyYW5jaCwgIHRvIDogeyBsYXQgOiByZXMuSiwgbG5nIDogIHJlcy5NIH0sIGZyb20gOiB7IGxhdCA6IGxvY2F0aW9uLmxhdCwgbG5nIDogbG9jYXRpb24ubG5nIH0sIGQgOiByIH07IFxuXHRcdFx0ICAgICAgICAgICAgXHRiYXR0bGVSYWRpdXNzLnB1c2goIEpTT04uc3RyaW5naWZ5KGJhdHRsZVJhZGl1cykpO1xuXHRcdFx0ICAgICAgICAgICAgfSk7XG5cdFx0ICAgICAgICAgICAgfTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBzZWxlY3RCcmFuY2goYnJhbmNoKXtcblx0ICAgIFx0dm0uY3VycmVudEJyYW5jaCA9IGJyYW5jaC5uYW1lO1xuXHQgICAgfTtcblxuXHRcdGZ1bmN0aW9uIGRpc3BhdGNoKCBjYXIgKXtcblx0XHRcdGNhci5pc0NoZWNrZWQgPSB0cnVlOyBcblx0XHRcdGRpc3BhdGNoQ2Fycy5wdXNoKGNhcik7XG5cdFx0XHR2bS5kaXNwYXRjaExpc3QgPSBfLnBsdWNrKGRpc3BhdGNoQ2FycywgJ3JhZGlvQ29kZScpLmpvaW4oXCIgXCIpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBjYW5jZWxEaXNwYXRjaChjYXIpe1xuXHRcdFx0Y2FyLmlzQ2hlY2tlZCA9IGZhbHNlO1xuXHRcdFx0ZGlzcGF0Y2hDYXJzLnNwbGljZShfLnBsdWNrKGRpc3BhdGNoQ2FycywgJ19pZCcpLmluZGV4T2YoY2FyLl9pZCksMSk7XG5cdFx0XHR2bS5kaXNwYXRjaExpc3QgPSBfLnBsdWNrKGRpc3BhdGNoQ2FycywgJ3JhZGlvQ29kZScpLmpvaW4oXCIgXCIpO1xuXHRcdFx0dm0uZGlzcGF0Y2hMaXN0ID0gdm0uY3VycmVudENhc2UuZGlzcGF0Y2hMaXN0LmpvaW4oXCIgXCIpO1xuXHRcdH07XG5cdFxuXHRcdGZ1bmN0aW9uIHNhdmUoKXtcblx0XHRcdHZhciBjdXJyZW50TnRmO1xuXHRcdFx0dmFyIGJyYW5jaGVzICA9IF8udW5pcXVlKF8ucGx1Y2soZGlzcGF0Y2hDYXJzLCAnYnJhbmNoJykpO1xuXHRcdFx0dmFyIGRpc3BhdGNoID0gdm0uYnJhbmNoZXMuZmlsdGVyKGZ1bmN0aW9uKGJyYW5jaCkgeyByZXR1cm4gYnJhbmNoZXMuaW5kZXhPZihicmFuY2gubmFtZSkgPiAtMSB9KTtcblxuXHRcdFx0bm90aWZpY2F0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uKG50ZixpZCl7XG5cdFx0XHRcdGlmIChudGYudHlwZSA9PSB2bS5jdXJyZW50Q2FzZS5udGYgKXtcblx0XHRcdFx0XHRjdXJyZW50TnRmICA9IG5vdGlmaWNhdGlvbnNbaWRdXG5cdFx0XHRcdH07XG5cdFx0XHR9KTtcblxuXHRcdFx0Q2FzZVN2Yy5jcmVhdGUoe1xuXHRcdFx0XHRvZmZpY2VyUmVjZWl2ZXIgOiBVc2VyU3ZjLmN1cnJlbnRVc2VyKCkgfHwgICflionmm4nmm7wnLFxuXHRcdFx0XHR0eXBlICAgICAgXHRcdDogdm0uY3VycmVudENhc2UudHlwZSB8fCAn54Gr6K2mJyxcblx0XHRcdFx0dHlwZXMgXHQgIFx0XHQ6IHZtLmN1cnJlbnRDYXNlLnR5cGVzLFxuXHRcdFx0XHRwaG9uZSAgICAgXHRcdDogdm0uY3VycmVudENhc2UucGhvbmUgfHwgJ+a4rOippicsXG5cdFx0XHRcdGJyYW5jaGVzICBcdFx0OiBfLnVuaXF1ZShfLnBsdWNrKGRpc3BhdGNoQ2FycywgJ2JyYW5jaCcpKSxcblx0XHRcdFx0YnJhbmNoSWRzIFx0XHQ6IF8ucGx1Y2soZGlzcGF0Y2gsICdfaWQnKSxcblx0XHQgIFx0XHRjYXJzICAgICAgXHRcdDogXy5wbHVjayhkaXNwYXRjaENhcnMsJ19pZCcpLFxuXHRcdFx0XHRjb3JwcyBcdCAgXHRcdDogVXNlclN2Yy51c2VyQ29ycHMoKSxcblx0XHRcdFx0ZW52IFx0ICBcdFx0OiB2bS5jdXJyZW50Q2FzZS5lbnYsXG5cdFx0XHRcdGVudnMgXHQgIFx0XHQ6IHZtLmN1cnJlbnRDYXNlLmVudnMsXG5cdFx0XHRcdGZsb29yIFx0ICBcdFx0OiB2bS5jdXJyZW50Q2FzZS5mbG9vcixcblx0XHRcdFx0bnRmICAgICAgIFx0XHQ6IGN1cnJlbnROdGYuX2lkLFxuXHRcdFx0XHRjcmVhdGVBdCAgXHRcdDogbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NTS1ERCwgaDptbTpzcyBhJyksXG5cdFx0XHRcdGxhc3RVcGRhdGUgXHRcdDogbW9tZW50KCkuZm9ybWF0KCdZWVlZLU1NTS1ERCwgaDptbTpzcyBhJyksXG5cdFx0XHRcdGxvY2F0aW9uICBcdFx0OiAge1xuXHRcdFx0XHRcdGxhdCBcdDogdm0uY3VycmVudENhc2UubG9jYXRpb24ubGF0LFxuXHRcdFx0XHRcdGxuZyBcdDogdm0uY3VycmVudENhc2UubG9jYXRpb24ubG5nLFxuXHRcdFx0XHRcdGFkZHJlc3MgOiB2bS5jdXJyZW50Q2FzZS5sb2NhdGlvbi5hZGRyZXNzIHx8ICfmuKzoqaYnXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGJhdHRsZVJhZGl1c3MgXHQ6IGJhdHRsZVJhZGl1c3Ncblx0XHRcdH0pLnN1Y2Nlc3MoZnVuY3Rpb24oKXtcblx0XHRcdFx0JHdpbmRvdy5oaXN0b3J5LmJhY2soKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cdH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLmNhc2UgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmNhc2UnKVxuXHRcdC5zZXJ2aWNlKCdDYXNlU3ZjJywgQ2FzZVN2Yyk7XG5cblx0Q2FzZVN2Yy4kaW5qZWN0ID0gWyckaHR0cCddO1xuXG5cdGZ1bmN0aW9uIENhc2VTdmMoICRodHRwICkge1xuXHRcdHZhciBzdmMgPSB0aGlzO1xuXHRcdHN2Yy5mZXRjaCBcdFx0PSBmZXRjaDtcblx0XHRzdmMuZmV0Y2hBbGwgXHQ9IGZldGNoQWxsO1xuXHRcdHN2Yy5jbG9zZUNhc2UgXHQ9IGNsb3NlQ2FzZTtcblx0XHRzdmMuZmV0Y2hSZWxhdGl2ZUNhc2UgPSBmZXRjaFJlbGF0aXZlQ2FzZTsgXG5cdFx0c3ZjLmZldGNoRGV0YWlscyA9IGZldGNoRGV0YWlscztcblx0XHRzdmMuZmV0Y2hCeUlkIFx0PSBmZXRjaEJ5SWQ7XG5cdFx0c3ZjLmNyZWF0ZSBcdFx0PSBjcmVhdGU7XG5cdFx0c3ZjLmRlbGV0ZSBcdFx0PSBkZWxldGVDYXNlO1xuXHRcdHN2Yy51cGRhdGUgXHRcdD0gdXBkYXRlO1xuXHRcdFxuXHRcdGZ1bmN0aW9uIGZldGNoKGNvcnBzLCBwYWdlLCBpdGVtc1BlclBhZ2Upe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXNlcz9jb3Jwcz0nICsgY29ycHMgKyAnJnBhZ2U9JyArIHBhZ2UgKyAnJmlwcD0nICsgaXRlbXNQZXJQYWdlICk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGZldGNoQWxsKCl7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2Nhc2VzL2RldGFpbHMnKTtcblx0XHR9O1xuXHRcdFxuXHRcdGZ1bmN0aW9uIGZldGNoUmVsYXRpdmVDYXNlKGNvbil7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL2Nhc2VzL2JyYW5jaD9icmFuY2g9JyArIGNvbi5icmFuY2ggKyAnJmFjY2Vzc0xldmVsPScgKyBjb24uYWNjZXNzTGV2ZWwgKyAnJmNvcnBzPScgKyBjb24uY29ycHMgKTtcblx0XHR9O1xuXHRcdFxuXHRcdGZ1bmN0aW9uIGZldGNoRGV0YWlscyhjYXNlSWQpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXNlcy9kZXRhaWxzLycgKyBjYXNlSWQpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBmZXRjaEJ5SWQoIGNhc2VJZCApe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9jYXNlcy8nICsgY2FzZUlkICk7XG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiBjcmVhdGUoY2FzZV9pbmZvKXtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL2Nhc2VzJywgY2FzZV9pbmZvKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gZGVsZXRlQ2FzZShjYXNlSWQpe1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvY2FzZXMvJyArIGNhc2VJZCk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZSh1cGRhdGVkX2Nhc2Upe1xuXHRcdFx0cmV0dXJuICRodHRwLnB1dCgnL2FwaS9jYXNlcy8nICsgdXBkYXRlZF9jYXNlLmNhc2VJZCAsIHVwZGF0ZWRfY2FzZSk7XG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiBjbG9zZUNhc2UoZGF0YSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL2Nhc2VzL2Nsb3NlP2lkPScgKyBkYXRhLmlkLCBkYXRhICk7XG5cdFx0fTtcblx0fVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAuY2FzZSBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuY2FzZScpXG5cdFx0LmNvbnRyb2xsZXIoJ0Nhc2VTaG93Q29udHJvbGxlcicsIENhc2VTaG93Q29udHJvbGxlcik7XG5cblx0XHRDYXNlU2hvd0NvbnRyb2xsZXIuJGluamVjdCA9ICBbICdTdFN2YycsICckc3RhdGVQYXJhbXMnLCAnJGludGVydmFsJywgJyRzdGF0ZScsICdTb2NrZXRTdmMnLCAnQ2FzZVN2YycsICdCcmFuY2hTdmMnLCAnU3RNaXNzaW9uRmFjJ107XG5cblx0XHRmdW5jdGlvbiBDYXNlU2hvd0NvbnRyb2xsZXIoKXtcblx0XHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdFx0dm0uaXNDb2xsYXBzZWQgPSB0cnVlIDtcblx0XHRcdHZtLm1lbWJlcnMgPSBbXTtcblx0XHRcdHZtLnBvc2l0aW9ucyA9IFN0TWlzc2lvbkZhYy5wb3NpdGlvbigpLnBvc3M7XG5cblx0XHRcdFNvY2tldFN2Yy5vbignbmV3U3QnLCBmdW5jdGlvbihzdCl7XG5cdFx0XHRcdGlmICggYW5ndWxhci5lcXVhbHMoY2FzZUlkLHN0LmNhc2VJZCkpIHtcblx0XHRcdFx0XHR2YXIgbmV3U3QgPSBhbmd1bGFyLmNvcHkoc3QpO1xuXHRcdFx0XHRcdHZtLnN0cmlrZVRlYW1zLnB1c2gobmV3U3QpO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR2bS5kZXBsb3lzID0gaW5pdFRhYmxlKHZtLnN0cmlrZVRlYW1zKTtcblx0XHRcdFx0dm0uZGVwbG95RGV0YWlscyA9IGluaXREZXBsb3kodm0uc3RyaWtlVGVhbXMpO1xuXHRcdFx0fSk7XG5cblx0XHRcdFNvY2tldFN2Yy5vbigndXBkYXRlU3QnLCBmdW5jdGlvbihkYXRhKXtcblx0XHRcdFx0U3RTdmMuZmV0Y2hCeUNhc2UoY2FzZUlkKS5zdWNjZXNzKGZ1bmN0aW9uKHN0cmlrZVRlYW1zKXtcblx0XHRcdFx0XHR2bS5zdHJpa2VUZWFtcyA9IHN0cmlrZVRlYW1zO1xuXHRcdFx0XHRcdHZtLnN0cmlrZVRlYW1zLmZvckVhY2goZnVuY3Rpb24oc3Qpe1xuXHRcdFx0XHRcdFx0c3QubGltaXRUaW1lID0gbW9tZW50LmR1cmF0aW9uKHN0LndvcmtpbmdUaW1lLCdzZWNvbmRzJyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dm0uZGVwbG95cyA9IGluaXRUYWJsZSh2bS5zdHJpa2VUZWFtcyk7XG5cdFx0XHRcdFx0dm0uZGVwbG95RGV0YWlscyA9IGluaXREZXBsb3kodm0uc3RyaWtlVGVhbXMpO1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0fSlcblxuXHRcdFx0U29ja2V0U3ZjLm9uKCdkaXNtaXNzJywgZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHRcdFN0U3ZjLmZldGNoQnlDYXNlKGNhc2VJZCkuc3VjY2VzcyhmdW5jdGlvbihzdHJpa2VUZWFtcyl7XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXMgXHQgPSBzdHJpa2VUZWFtcztcblx0XHRcdFx0XHR2bS5kZXBsb3lzIFx0XHQgPSBpbml0VGFibGUodm0uc3RyaWtlVGVhbXMpO1xuXHRcdFx0XHRcdHZtLmRlcGxveURldGFpbHMgPSBpbml0RGVwbG95KHZtLnN0cmlrZVRlYW1zKTtcblx0XHRcdFx0fSk7XG5cdFx0XHR9KTtcblxuXG5cdFx0XHR2YXIgY2FzZUlkID0gJHN0YXRlUGFyYW1zLmlkO1xuXHRcdFx0Q2FzZVN2Yy5mZXRjaERldGFpbHMoY2FzZUlkKS5zdWNjZXNzKGZ1bmN0aW9uKF9jYXNlKXtcblx0XHRcdFx0X2Nhc2UuZW52ID09ICfkvY/lroXngavoraYnID8gdm0uYXBhcnRtZW50ID0gdHJ1ZSA6IHZtLmFwYXJ0bWVudCA9IGZhbHNlO1xuXHRcdFx0XHR2bS5jYXNlRGV0YWlsID0gX2Nhc2U7XG5cdFx0XHRcdHZtLnBvc2l0aW9uID0ge1xuXHRcdFx0XHRcdGRlZmF1bHRQb3MgXHQ6IFwi56ys5LiA6Z2iXCIsXG5cdFx0XHRcdFx0cG9zaXRpb25zIFx0OiBbXCLnrKzkuIDpnaJcIixcIuesrOS6jOmdolwiLFwi56ys5LiJ6Z2iXCIsXCLnrKzlm5vpnaJcIl0sXG5cdFx0XHRcdFx0Zmxvb3IgXHRcdDogdm0uY2FzZURldGFpbC5mbG9vcixcblx0XHRcdFx0XHRmbG9vcnMgIFx0OiB2bS5jYXNlRGV0YWlsLmZsb29yIDwgNT8gXy5yYW5nZSgxLDYsMSkgOiBfLnJhbmdlKHZtLmNhc2VEZXRhaWwuZmxvb3ItMix2bS5jYXNlRGV0YWlsLmZsb29yKzMsMSlcblx0XHRcdFx0fTtcblx0XHRcdH0pO1xuXG5cdFx0XHRTdFN2Yy5mZXRjaEJ5Q2FzZShjYXNlSWQpLnN1Y2Nlc3MoZnVuY3Rpb24oc3RyaWtlVGVhbXMpe1xuXHRcdFx0XHRpZiAoc3RyaWtlVGVhbXMpIHtcblx0XHRcdFx0XHR2bS5zdHJpa2VUZWFtcyA9IHN0cmlrZVRlYW1zO1xuXHRcdFx0XHRcdHZtLnN0cmlrZVRlYW1zLmZvckVhY2goZnVuY3Rpb24oc3Qpe1xuXHRcdFx0XHRcdFx0c3QubGltaXRUaW1lID0gbW9tZW50LmR1cmF0aW9uKHN0LndvcmtpbmdUaW1lLCdzZWNvbmRzJyk7XG5cdFx0XHRcdFx0fSk7XG5cdFx0XHRcdFx0dm0uZGVwbG95cyA9IGluaXRUYWJsZSh2bS5zdHJpa2VUZWFtcyk7XG5cdFx0XHRcdFx0dm0uZGVwbG95RGV0YWlscyA9aW5pdERlcGxveSh2bS5zdHJpa2VUZWFtcyk7XG5cdFx0XHRcdFx0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0cmV0dXJuIFxuXHRcdFx0XHR9O1xuXHRcdFx0fSk7XG5cblxuXHRcdFx0dmFyIGluaXREZXBsb3kgPSBmdW5jdGlvbihzdHJpa2VUZWFtcyl7XG5cdFx0XHRcdHJldHVybiAgXy5ncm91cEJ5KHN0cmlrZVRlYW1zLGZ1bmN0aW9uKHN0KXtcblx0XHRcdFx0XHRcdHJldHVybiBzdC5wb3NpdGlvbjtcblx0XHRcdFx0fSk7XG5cdFx0XHR9O1xuXG5cdFx0XHR2YXIgaW5pdFRhYmxlID0gIGZ1bmN0aW9uKHN0cmlrZVRlYW1zKXtcblx0XHRcdCAgXHR2YXIgZGVwbG95QXJyYXkgPSBfLnJhbmdlKDQpLm1hcChmdW5jdGlvbiAoKSB7XG5cdFx0XHQgICAgICAgIHJldHVybiBfLnJhbmdlKDUpLm1hcChmdW5jdGlvbiAoKSB7XG5cdFx0XHQgICAgICAgICAgICByZXR1cm4geyB0b3RhbE1lbWJlciA6IDAsIHN0VG90YWwgOiAwICwgc3RzIDogW10gfSA7XG5cdFx0XHQgICAgICAgIH0pO1xuXHRcdFx0ICAgIH0pO1xuXG5cdFx0XHRcdGlmICggc3RyaWtlVGVhbXMgKXtcblx0XHRcdFx0XHRmb3IgKHZhciBpID0gc3RyaWtlVGVhbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0XHRcdHZhciB0b3RhbE1lbWJlciA9IDA7XG5cdFx0XHRcdFx0XHR2YXIgeSA9IG51bGw7XG5cdFx0XHRcdFx0XHR2YXIgc3QgPSAwO1xuXHRcdFx0XHRcdFx0dmFyIHggPSBfLmluZGV4T2Yoc3RyaWtlVGVhbXNbaV0ucG9zaXRpb25zLCBzdHJpa2VUZWFtc1tpXS5wb3NpdGlvbik7XG5cdFx0XHRcdFx0XHR2bS5hcGFydG1lbnQgPyB5ID0gXy5pbmRleE9mKHN0cmlrZVRlYW1zW2ldLmZsb29ycywgc3RyaWtlVGVhbXNbaV0uZmxvb3IpIDogeSA9IF8uaW5kZXhPZihzdHJpa2VUZWFtc1tpXS5hcmVhcywgc3RyaWtlVGVhbXNbaV0uYXJlYSlcblx0XHRcdFx0XHRcdGRlcGxveUFycmF5W3hdW3ldLnN0VG90YWwgKz0gMTtcblx0XHRcdFx0XHRcdGRlcGxveUFycmF5W3hdW3ldLnRvdGFsTWVtYmVyICs9IHN0cmlrZVRlYW1zW2ldLm1lbWJlcnMubGVuZ3RoO1xuXHRcdFx0XHRcdFx0dmFyIHN0SW5GbyA9IHt9O1xuXHRcdFx0XHRcdFx0c3RJbkZvLmlkID0gc3RyaWtlVGVhbXNbaV0uYnJhbmNoICsgc3RyaWtlVGVhbXNbaV0uaWRcblx0XHRcdFx0XHRcdHN0SW5Gby5udW1iZXIgPSBzdHJpa2VUZWFtc1tpXS5tZW1iZXJzLmxlbmd0aDtcblx0XHRcdFx0XHRcdHN0SW5Gby5ncm91cCA9IHN0cmlrZVRlYW1zW2ldLmdyb3VwO1xuXHRcdFx0XHRcdFx0ZGVwbG95QXJyYXlbeF1beV0uc3RzLnB1c2goc3RJbkZvKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBkZXBsb3lBcnJheVxuXHRcdFx0fTtcblx0XHRcdFxuXHRcdFx0dm0uJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIChldmVudCkge1xuXHRcdCAgICAgICAgU29ja2V0U3ZjLnJlbW92ZUFsbExpc3RlbmVycygpO1xuXHRcdCAgICB9KTtcblx0XHR9XG59KSgpOyIsIjsoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwJylcblx0XHQuY29udHJvbGxlcignTG9naW5Db250cm9sbGVyJyxMb2dpbkNvbnRyb2xsZXIpO1xuXG5cdFx0TG9naW5Db250cm9sbGVyLiRpbmplY3QgPSBbJ1VzZXJTdmMnLCAnc3RvcmUnLCAnJHN0YXRlJywnand0SGVscGVyJywnJGh0dHAnLCAnU29ja2V0U3ZjJ107XG5cblx0XHRmdW5jdGlvbiBMb2dpbkNvbnRyb2xsZXIoVXNlclN2Yywgc3RvcmUsICRzdGF0ZSxqd3RIZWxwZXIsJGh0dHAsIFNvY2tldFN2YyApe1xuXHRcdFx0dmFyIHZtIFx0ID0gdGhpczsgXG5cdFx0XHR2bS5sb2dpbiA9IGxvZ2luO1xuXHRcdFx0dm0udXNlciAgPSB7fTtcblxuXHRcdFx0ZnVuY3Rpb24gbG9naW4oKXtcblx0XHRcdFx0VXNlclN2Yy5sb2dpbih2bS51c2VyKS5zdWNjZXNzKGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0XHRcdGlmIChkYXRhLnN1Y2Nlc3MpIHtcblx0XHRcdFx0XHRcdHN0b3JlLnNldCgnand0JyxkYXRhLnRva2VuKTtcblx0XHRcdFx0XHRcdCRodHRwLmRlZmF1bHRzLmhlYWRlcnMuY29tbW9uWyd4LWFjY2Vzcy10b2tlbiddID0gZGF0YS50b2tlbjtcblx0XHRcdFx0XHRcdHJldHVybiBkYXRhLnRva2VuOyBcblx0XHRcdFx0XHR9IGVsc2UgeyBcblx0XHRcdFx0XHRcdHJldHVybiBjb25zb2xlLmxvZyhcInBhc3N3b3JkIGlzIG5vdCBleGlzdGVkXCIpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSkudGhlbihmdW5jdGlvbih0b2tlbil7XG5cdFx0XHRcdFx0U29ja2V0U3ZjLmluaXQodG9rZW4pO1xuXHRcdFx0XHRcdFNvY2tldFN2Yy5lbWl0KCdsb2dpbicpO1xuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0aWYgKGp3dEhlbHBlci5kZWNvZGVUb2tlbih0b2tlbikucm9sZSA9PSBcImFkbWluXCIpIHtcblx0XHRcdFx0XHRcdHZhciB1c2VyQnJhbmNoID0gand0SGVscGVyLmRlY29kZVRva2VuKHRva2VuKS5icmFuY2g7XG5cdFx0XHRcdFx0XHRpZiAodXNlckJyYW5jaC5zbGljZSh1c2VyQnJhbmNoLmxlbmd0aC0yICx1c2VyQnJhbmNoLmxlbmd0aCkgPT0gXCLlpKfpmopcIikge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gJHN0YXRlLmdvKCdkdXR5RGVzay5jb3JwcycpXG5cdFx0XHRcdFx0XHR9IGVsc2V7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAkc3RhdGUuZ28oJ2R1dHlEZXNrLmJyYW5jaCcpXG5cdFx0XHRcdFx0XHR9O1xuXHRcdFx0XHRcdH1lbHNle1xuXHRcdFx0XHRcdFx0cmV0dXJuICRzdGF0ZS5nbygnZGlyZWN0b3Iuc2FmZXR5LmluZGV4Jylcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pXG5cdFx0XHR9O1xuXHRcdH07XG59KSgpOyIsIjsoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLnJvdXRlcicsWyd1aS5yb3V0ZXInXSlcblx0XHQuY29uZmlnKHJvdXRlckNvbmZpZylcblxuXHRcdHJvdXRlckNvbmZpZy4kaW5qZWN0ID0gWyckc3RhdGVQcm92aWRlcicsJyR1cmxSb3V0ZXJQcm92aWRlcicsJyRsb2NhdGlvblByb3ZpZGVyJ107XG5cdFx0XG5cdFx0ZnVuY3Rpb24gcm91dGVyQ29uZmlnKCRzdGF0ZVByb3ZpZGVyLCR1cmxSb3V0ZXJQcm92aWRlciwgJGxvY2F0aW9uUHJvdmlkZXIpIHtcblx0XHQgICAgJHVybFJvdXRlclByb3ZpZGVyXG4gICAgXHRcdFx0Lm90aGVyd2lzZSgnL2xvZ2luJyk7XG5cblx0XHQgICAgJHN0YXRlUHJvdmlkZXJcblx0XHQgICAgICAgIC5zdGF0ZSgnYW5vbicse1xuXHRcdCAgICAgICAgICAgIHVybCA6IFwiXCIsXG5cdFx0ICAgICAgICAgICAgYWJzdHJhY3QgOiB0cnVlLFxuXHRcdCAgICAgICAgICAgIHRlbXBsYXRlIDogXCI8dWktdmlldz5cIixcblx0XHQgICAgICAgIH0pXG5cdFx0ICAgICAgICAuc3RhdGUoJ2Fub24ubG9naW4nLHtcblx0XHQgICAgICAgICAgICB1cmwgOiBcIi9sb2dpblwiLFxuXHRcdCAgICAgICAgICAgIHRlbXBsYXRlVXJsIDpcImxvZ2luLmh0bWxcIixcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyIDogXCJMb2dpbkNvbnRyb2xsZXJcIixcblx0XHQgICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcIkxvZ2luQ3RybFwiXG5cdFx0ICAgICAgICB9KVxuXHRcdCAgICAgICAgLnN0YXRlKCdhbm9uLjQwNCcse1xuXHRcdCAgICAgICAgICAgIHVybCA6IFwiLzQwNFwiLFxuXHRcdCAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCI0MDQuaHRtbFwiXG5cdFx0ICAgICAgICB9KVxuXG4gICAgXHRcdFx0Ly8gZHV0eSBkZXNrIFxuXHRcdFx0Ly8gJHN0YXRlUHJvdmlkZXJcblx0XHRcdC8vIFx0LnN0YXRlKCdkdXR5RGVzaycsIHtcblx0XHQgLy8gICAgICAgICAgICBhYnN0cmFjdDogdHJ1ZSxcblx0XHQgLy8gICAgICAgICAgICB1cmw6IFwiL2R1dHlEZXNrXCIsXG5cdFx0IC8vICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvY29tbW9uL2NvbnRlbnQuaHRtbFwiLFxuXHRcdCAvLyAgICAgICAgICAgIGRhdGEgOiB7XG5cdFx0IC8vICAgICAgICAgICAgICAgIHJlcXVpcmVkTG9naW4gOiB0cnVlLFxuXHRcdCAvLyAgICAgICAgICAgICAgICByb2xlIDogW1wiYWRtaW5cIl1cblx0XHQgLy8gICAgICAgICAgICB9XG5cdFx0IC8vICAgICAgICB9KVxuXHRcdCAvLyAgICAgICAgLnN0YXRlKCdkdXR5RGVzay5jb3JwcycsIHtcblx0XHQgLy8gICAgICAgICAgICB1cmw6IFwiL2NvcnBzXCIsXG5cdFx0IC8vICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwidmlld3MvZGFzaGJvYXJkL2NvcnBzLmRhc2hib2FyZC5odG1sXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlciA6IFwiRGFzaGJvYXJkQ29udHJvbGxlclwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiRGFzaGJvYXJkQ3RybFwiLFxuXHRcdCAvLyAgICAgICAgICAgIGRhdGEgOiB7XG5cdFx0IC8vICAgICAgICAgICAgICAgIHJlcXVpcmVkTG9naW4gOiB0cnVlLFxuXHRcdCAvLyAgICAgICAgICAgICAgICByb2xlIDogW1wiYWRtaW5cIl1cblx0XHQgLy8gICAgICAgICAgICB9XG5cdFx0IC8vICAgICAgICB9KVxuXHRcdCAvLyAgICAgICAgLnN0YXRlKCdkdXR5RGVzay5icmFuY2gnLHtcblx0XHQgLy8gICAgICAgICAgICB1cmwgOiBcIi9icmFuY2hcIixcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6IFwidmlld3MvZGFzaGJvYXJkL2JyYW5jaC5kYXNoYm9hcmQuaHRtbFwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXIgOiBcIkRhc2hib2FyZENvbnRyb2xsZXJcIixcblx0XHQgLy8gICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcIkRhc2hib2FyZEN0cmxcIixcblx0XHQgLy8gICAgICAgICAgICBkYXRlIDoge1xuXHRcdCAvLyAgICAgICAgICAgICAgICByZXF1aXJlZExvZ2luIDogdHJ1ZSxcblx0XHQgLy8gICAgICAgICAgICAgICAgcm9sZSA6IFtcImFkbWluXCJdXG5cdFx0IC8vICAgICAgICAgICAgfVxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suY2FzZScse1xuXHRcdCAvLyAgICAgICAgICAgIGFic3RyYWN0IDogdHJ1ZSxcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZSA6IFwiPHVpLXZpZXc+XCJcblx0XHQgLy8gICAgICAgIH0pXG5cdFx0IC8vICAgICAgICAuc3RhdGUoJ2R1dHlEZXNrLmNhc2UuaW5kZXgnLCB7XG5cdFx0IC8vICAgICAgICAgICAgdXJsOiBcIi9jYXNlXCIsXG5cdFx0IC8vICAgICAgICAgICAgdGVtcGxhdGVVcmw6IFwiY2FzZS9jYXNlLmluZGV4Lmh0bWxcIixcblx0XHQgLy8gICAgICAgICAgICBjb250cm9sbGVyIDogXCJDYXNlQ29udHJvbGxlclwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiQ2FzZUN0cmxcIlxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suY2FzZS5uZXcnLHtcblx0XHQgLy8gICAgICAgICAgICB1cmwgOiBcIi9jYXNlL25ld1wiLFxuXHRcdCAvLyAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjYXNlL2Nhc2UubmV3Lmh0bWxcIixcblx0XHQgLy8gICAgICAgICAgICBjb250cm9sbGVyIDogXCJDYXNlTmV3Q29udHJvbGxlclwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiQ2FzZU5ld0N0cmxcIlxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suY2FzZS5zaG93Jyx7XG5cdFx0IC8vICAgICAgICAgICAgdXJsIDogXCIvY2FzZS86aWQvc2hvd1wiLFxuXHRcdCAvLyAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjYXNlL2Nhc2Uuc2hvdy5odG1sXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlciA6IFwiQ2FzZVNob3dDb250cm9sbGVyXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJDYXNlU2hvd0N0cmxcIlxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suY2FzZS5lZGl0Jyx7XG5cdFx0IC8vICAgICAgICAgICAgdXJsIDogXCIvY2FzZS86aWQvZWRpdFwiLFxuXHRcdCAvLyAgICAgICAgICAgIHRlbXBsYXRlVXJsIDogXCJjYXNlL2Nhc2UuZWRpdC5odG1sXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlciA6IFwiQ2FzZUVkaXRDb250cm9sbGVyXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJDYXNlRWRpdEN0cmxcIlxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suc2FmZXR5Jyx7XG5cdFx0IC8vICAgICAgICAgICAgdXJsIDogXCIvY2FzZS86aWRcIixcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6IFwic3VtbWFyeS9zdW1tYXJ5LmluZGV4Lmh0bWxcIixcblx0XHQgLy8gICAgICAgICAgICBjb250cm9sbGVyIDogXCJTdW1tYXJ5Q29udHJvbGxlclwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiU3VtbWFyeUN0cmxcIlxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suZHV0eWxpc3QnLHtcblx0XHQgLy8gICAgICAgICAgICBhYnN0cmFjdCA6IHRydWUsXG5cdFx0IC8vICAgICAgICAgICAgdGVtcGxhdGUgOiBcIjx1aS12aWV3PlwiXG5cdFx0IC8vICAgICAgICB9KVxuXHRcdCAvLyAgICAgICAgLnN0YXRlKCdkdXR5RGVzay5kdXR5bGlzdC5pbmRleCcsIHtcblx0XHQgLy8gICAgICAgICAgICB1cmw6IFwiL2R1dHlsaXN0LzpicmFuY2hcIixcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybDogXCJ2aWV3cy9kdXR5bGlzdC9kdXR5bGlzdC5pbmRleC5odG1sXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlciA6IFwiRHV0eUxpc3RDb250cm9sbGVyXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJEdXR5TGlzdEN0cmxcIlxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suZHV0eWxpc3Quc2hvdycse1xuXHRcdCAvLyAgICAgICAgXHR1cmwgOiBcIi9kdXR5bGlzdC86YnJhbmNoL2luZGV4XCIsXG5cdFx0IC8vICAgICAgICBcdHRlbXBsYXRlIDogXCI8aDI+IHNob3cgPC9oMj5cIlxuXHRcdCAvLyAgICAgICAgfSlcblx0XHQgLy8gICAgICAgIC5zdGF0ZSgnZHV0eURlc2suZHV0eWxpc3QuZWRpdCcsIHtcblx0XHQgLy8gICAgICAgICAgICB1cmw6IFwiL2R1dHlsaXN0LzpicmFuY2gvZWRpdFwiLFxuXHRcdCAvLyAgICAgICAgICAgIHRlbXBsYXRlVXJsICA6IFwidmlld3MvZHV0eWxpc3QvZHV0eWxpc3QuZWRpdC5odG1sXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlciAgIDogXCJEdXR5TGlzdEVkaXRDb250cm9sbGVyXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJEdXR5TGlzdEVkaXRDdHJsXCJcblx0XHQgLy8gICAgICAgIH0pXG5cdFx0IC8vICAgICAgICAuc3RhdGUoJ2R1dHlEZXNrLm1lbWJlcicse1xuXHRcdCAvLyAgICAgICAgICAgIGFic3RyYWN0IDogdHJ1ZSxcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZSA6IFwiPHVpLXZpZXc+XCJcblx0XHQgLy8gICAgICAgIH0pXG5cdFx0IC8vICAgICAgICAuc3RhdGUoJ2R1dHlEZXNrLm1lbWJlci5zaG93Jywge1xuXHRcdCAvLyAgICAgICAgICAgIHVybDogXCIvbWVtYmVyLzpicmFuY2hcIixcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybCAgOiBcInZpZXdzL21lbWJlci9tZW1iZXIuaW5kZXguaHRtbFwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXIgICA6IFwiTWVtYmVyQ29udHJvbGxlclwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiTWVtYmVyQ3RybFwiXG5cdFx0IC8vICAgICAgICB9KVxuXHRcdCAvLyAgICAgICAgLnN0YXRlKCdkdXR5RGVzay5tZW1iZXIuZWRpdCcsIHtcblx0XHQgLy8gICAgICAgICAgICB1cmw6IFwiL21lbWJlci86YnJhbmNoL2VkaXRcIixcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybCAgOiBcInZpZXdzL21lbWJlci9tZW1iZXIuZWRpdC5odG1sXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlciBcdCA6IFwiTWVtYmVyRWRpdENvbnRyb2xsZXJcIixcblx0XHQgLy8gICAgICAgICAgICBjb250cm9sbGVyQXMgOiBcIk1lbWJlckVkaXRDdHJsXCJcblx0XHQgLy8gICAgICAgIH0pXG5cdFx0IC8vICAgICAgICAuc3RhdGUoJ2R1dHlEZXNrLmNhcicsIHtcblx0XHQgLy8gICAgICAgICAgICBhYnN0cmFjdCA6IHRydWUsXG5cdFx0IC8vICAgICAgICAgICAgdGVtcGxhdGUgOiBcIjx1aS12aWV3PlwiXG5cdFx0IC8vICAgICAgICB9KVxuXHRcdCAvLyAgICAgICAgLnN0YXRlKCdkdXR5RGVzay5jYXIuc2hvdycse1xuXHRcdCAvLyAgICAgICAgICAgIHVybDogXCIvY2FyLzpicmFuY2hcIixcblx0XHQgLy8gICAgICAgICAgICB0ZW1wbGF0ZVVybCA6IFwidmlld3MvY2Fycy9jYXIuaW5kZXguaHRtbFwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXIgOiBcIkNhckluZGV4Q29udHJvbGxlclwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXJBcyA6IFwiQ2FySW5kZXhDdHJsXCJcblx0XHQgLy8gICAgICAgIH0pXG5cdFx0IC8vICAgICAgICAuc3RhdGUoJ2R1dHlEZXNrLmNhci5lZGl0Jyx7XG5cdFx0IC8vICAgICAgICAgICAgdXJsOiBcIi9jYXIvOmJyYW5jaC9lZGl0XCIsXG5cdFx0IC8vICAgICAgICAgICAgdGVtcGxhdGVVcmwgOiBcInZpZXdzL2NhcnMvY2FyLmVkaXQuaHRtbFwiLFxuXHRcdCAvLyAgICAgICAgICAgIGNvbnRyb2xsZXIgOiBcIkNhckVkaXRDb250cm9sbGVyXCIsXG5cdFx0IC8vICAgICAgICAgICAgY29udHJvbGxlckFzIDogXCJDYXJFZGl0Q3RybFwiXG5cdFx0IC8vICAgICAgICB9KVxuXHRcdH1cbn0pKCk7XG4iLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLnRvcG5hdicsIFtdKVxuXHRcdC5jb250cm9sbGVyKCdUb3BOYXZDb250cm9sbGVyJyxUb3BOYXZDb250cm9sbGVyKTtcblxuXHRUb3BOYXZDb250cm9sbGVyLiRpbmplY3QgPSBbXTtcblx0ZnVuY3Rpb24gVG9wTmF2Q29udHJvbGxlcigkbG9jYXRpb24sJHN0YXRlLCAkaW50ZXJ2YWwsIHN0b3JlLCBTb2NrZXRTdmMsIFVzZXJTdmMsICR3aW5kb3cpe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdHZtLmN1cnJlbnRUaW1lID0gIG1vbWVudCgpLmZvcm1hdCgnTU1NIERvLCBoOm1tOnNzIGEnKTtcblx0XHR2bS5sb2dvdXQgPSBsb2dvdXQ7XG5cblxuXHRcdCRpbnRlcnZhbChmdW5jdGlvbigpe1xuXHRcdFx0bW9tZW50LmxvY2FsZSgnemgtdHcnKTtcblx0XHRcdHZtLmN1cnJlbnRUaW1lID0gIG1vbWVudCgpLmZvcm1hdCgnTU1NIERvLCBoOm1tOnNzIGEnKTtcblx0XHR9LCAxMDAwKTtcblx0XHQgXG5cdFx0ZnVuY3Rpb24gbG9nb3V0KCl7XG5cdFx0XHR2YXIgYWNjb3VudCA9IFVzZXJTdmMuY3VycmVudEFjY291bnQoKTtcblx0XHRcdFNvY2tldFN2Yy5lbWl0KCdsb2dvdXQnKTtcblx0XHRcdCRzdGF0ZS5nbygnYW5vbi5sb2dpbicpO1xuXHRcdH07XG5cdH1cblxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0LyoqXG5cdCogYXBwLmRhc2hib2FyZCBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuZGFzaGJvYXJkJylcblx0XHQuY29udHJvbGxlcignRGFzaGJvYXJkQ29udHJvbGxlcicsRGFzaGJvYXJkQ29udHJvbGxlcik7XG5cblx0RGFzaGJvYXJkQ29udHJvbGxlci4kaW5qZWN0ID0gWyckbG9jYXRpb24nLCAnU29ja2V0U3ZjJywgJ1VzZXJTdmMnLCAnQnJhbmNoU3ZjJ107XG5cdGZ1bmN0aW9uIERhc2hib2FyZENvbnRyb2xsZXIoJGxvY2F0aW9uLCBTb2NrZXRTdmMsIFVzZXJTdmMsIEJyYW5jaFN2Yyl7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cblx0XHRCcmFuY2hTdmMuZmV0Y2hCeUNvcnBzKFVzZXJTdmMudXNlckNvcnBzKCkpLnN1Y2Nlc3MoZnVuY3Rpb24oYnJhbmNoZXMpe1xuXHRcdFx0cmV0dXJuIHZtLmJyYW5jaGVzID0gYnJhbmNoZXM7XG5cdFx0fSk7XG5cblx0XHRVc2VyU3ZjLmZldGNoT25saW5lVXNlcigpLnN1Y2Nlc3MoZnVuY3Rpb24odXNlcnMpe1xuXHRcdFx0cmV0dXJuIHZtLnVzZXJzID0gdXNlcnM7XG5cdFx0fSk7XG5cblx0XHRTb2NrZXRTdmMub24oJ3VzZXJMb2dpbicsZnVuY3Rpb24odXNlcil7XG5cdFx0XHRyZXR1cm4gdm0udXNlcnMucHVzaCh1c2VyKTtcblx0XHR9KTtcblxuXHRcdFNvY2tldFN2Yy5vbigndXNlckRpc2Nvbm5lY3QnLGZ1bmN0aW9uKGRpc2Nvbm5lY3RVc2VyKXtcblx0XHRcdHZtLnVzZXJzID0gdm0udXNlcnMuZmlsdGVyKGZ1bmN0aW9uKHVzZXIpIHtcblx0XHRcdFx0cmV0dXJuIHVzZXIudXNlcm5hbWUgIT0gZGlzY29ubmVjdFVzZXIudXNlcm5hbWVcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG5cdFx0U29ja2V0U3ZjLm9uKCd1c2VyTG9nb3V0JyxmdW5jdGlvbihsb2dvdXRVc2VyKXtcblx0XHRcdHZtLnVzZXJzID0gdm0udXNlcnMuZmlsdGVyKGZ1bmN0aW9uKHVzZXIpIHtcblx0XHRcdFx0cmV0dXJuIHVzZXIudXNlcm5hbWUgIT0gbG9nb3V0VXNlci51c2VybmFtZVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR2bS4kb24oJyRkZXN0cm95JywgZnVuY3Rpb24gKGV2ZW50KSB7XG5cdCAgICAgICAgcmV0dXJuIFNvY2tldFN2Yy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblx0ICAgIH0pO1xuXHR9XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5kaXJlY3RvciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuZGlyZWN0b3InKVxuXHRcdC5jb250cm9sbGVyKCdEaXJEdXR5TGlzdENvbnRyb2xsZXInLERpckR1dHlMaXN0Q29udHJvbGxlcik7XG5cblx0RGlyRHV0eUxpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbJ1VzZXJTdmMnLCAnQnJhbmNoU3ZjJ107XG5cblx0ZnVuY3Rpb24gRGlyRHV0eUxpc3RDb250cm9sbGVyKCBVc2VyU3ZjICwgQnJhbmNoU3ZjICl7XG5cdFx0dmFyIHZtID0gdGhpcztcblx0XHR2YXIgYnJhbmNoID0gVXNlclN2Yy51c2VyQnJhbmNoKCk7XG5cdFx0XG5cdFx0QnJhbmNoU3ZjLmZldGNoQnlOYW1lKGJyYW5jaCkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2gpe1xuXHRcdFx0dm0uYnJhbmNoIFx0XHQ9IGJyYW5jaDtcblx0XHRcdHZtLm9uRHV0eVRvdGFsIFx0PSB2bS5icmFuY2gubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24obWVtYmVyKSB7XG5cdFx0XHRcdHJldHVybiBtZW1iZXIub25EdXR5ID09IHRydWUgXG5cdFx0XHR9KTtcblx0XHR9KTsgXG5cdH07XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5kYXNoYm9hcmQgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmRpcmVjdG9yJylcblx0XHQuY29udHJvbGxlcignRGlyRHV0eUxpc3RFZGl0Q29udHJvbGxlcicsRGlyRHV0eUxpc3RFZGl0Q29udHJvbGxlcik7XG5cblx0RGlyRHV0eUxpc3RFZGl0Q29udHJvbGxlci4kaW5qZWN0ID0gWydCcmFuY2hTdmMnLCAnJHN0YXRlUGFyYW1zJywnTWVtYmVyU3ZjJywgJyRsb2NhdGlvbicsICckd2luZG93JywgJ1VzZXJTdmMnLCAnQ2FyU3ZjJywgJ1N0TWlzc2lvbkZhYyddO1xuXG5cdGZ1bmN0aW9uIERpckR1dHlMaXN0RWRpdENvbnRyb2xsZXIoQnJhbmNoU3ZjLCAkc3RhdGVQYXJhbXMsTWVtYmVyU3ZjLCAkbG9jYXRpb24sICR3aW5kb3csIFVzZXJTdmMsIENhclN2YywgU3RNaXNzaW9uRmFjKXtcblx0XHR2YXIgdm0gPSB0aGlzO1xuXHRcdHZhciBicmFuY2ggXHQ9IFVzZXJTdmMudXNlckJyYW5jaCgpO1xuXHRcdHZtLmNoZWNrIFx0PSBjaGVjaztcblx0XHR2bS5zYXZlIFx0PSBzYXZlOyAgIFxuXG5cdFx0QnJhbmNoU3ZjLmZldGNoQnlOYW1lKGJyYW5jaCkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2gpe1xuXHRcdFx0dm0uYnJhbmNoID0gYnJhbmNoO1xuXHRcdFx0dm0uaXNDb3JwcyA9ICB0cnVlID8gYnJhbmNoLm5hbWUuc3BsaXQoXCLmlZHngb3mlZHorbdcIilbMV0gOiBmYWxzZSBcblx0XHRcdHZhciBtZW1iZXJzID0gXy5wbHVjayhicmFuY2gubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24obWVtYmVyKSB7IHJldHVybiBtZW1iZXIubGV2ZWwgPCAyLjQgfSksICduYW1lJylcblx0XHRcdHZtLmJyYW5jaC5zYWZldHlNYW5hZ2VyIFx0PSBicmFuY2guc2FmZXR5TWFuYWdlcjtcblx0XHRcdHZtLmJyYW5jaC5zYWZldHlNYW5hZ2VycyBcdD0gbWVtYmVycztcblx0XHRcdHZtLm9uRHV0eVRvdGFsID0gMDtcblx0XHRcdF8ubWFwKHZtLmJyYW5jaC5tZW1iZXJzLGZ1bmN0aW9uKG1lbWJlcil7IFxuXHRcdFx0XHRtZW1iZXIuZ3JvdXBJZHMgPSBfLnJhbmdlKDEsTWF0aC5yb3VuZCh2bS5icmFuY2gubWVtYmVycy5sZW5ndGgvNiksMSk7XG5cdFx0XHRcdG1lbWJlci5ncm91cElEID0gbWVtYmVyLmdyb3VwICsgbWVtYmVyLmdyb3VwSWQgXG5cdFx0XHR9KVxuXHRcdH0pXG5cblx0XHRmdW5jdGlvbiBjaGVjayhtZW1iZXIpe1xuXHRcdFx0bWVtYmVyLm9uRHV0eSBcdCA9ICFtZW1iZXIub25EdXR5O1xuXHRcdFx0bWVtYmVyLmlzQ2hlY2tlZCA9ICFtZW1iZXIuaXNDaGVja2VkO1xuXHRcdFx0bWVtYmVyLmdyb3VwSUQgXHQgPSBtZW1iZXIuZ3JvdXAgKyBtZW1iZXIuZ3JvdXBJZFxuXHRcdH07XG5cblx0XHRcblx0XHRmdW5jdGlvbiBzYXZlKCl7XG5cdFx0XHR2YXIgRGlzcGF0Y2hOdW1iZXIgPSB2bS5icmFuY2gubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24obWVtYmVyKSB7XG5cdFx0XHRcdHJldHVybiBtZW1iZXIub25EdXR5XG5cdFx0XHR9KTtcblxuXHRcdFx0QnJhbmNoU3ZjLnVwZGF0ZU1pc3Npb24oe1xuXHRcdFx0XHRicmFuY2ggICBcdFx0OiB2bS5icmFuY2gubmFtZSxcblx0XHRcdFx0ZGlyZWN0b3IgXHRcdDogdm0uYnJhbmNoLmRpcmVjdG9yLFxuXHRcdFx0XHRkaXNwYXRjaE51bSBcdDogRGlzcGF0Y2hOdW1iZXIubGVuZ3RoLFxuXHRcdFx0XHRzYWZldHlNYW5hZ2VyIFx0OiB2bS5icmFuY2guc2FmZXR5TWFuYWdlcixcblx0XHRcdFx0bWVtYmVycyBcdFx0OiB2bS5icmFuY2gubWVtYmVyc1xuXHRcdFx0fSk7XG5cdFx0XHQkd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuXHRcdH07XG5cdH07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHQvKipcblx0KiBhcHAuZGlzcGF0Y2ggTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLmRpc3BhdGNoJywgW10pXG5cdFx0LmNvbnRyb2xsZXIoJ0Rpc3BhdGNoQ29udHJvbGxlcicsRGlzcGF0Y2hDb250cm9sbGVyKTtcblxuXHREaXNwYXRjaENvbnRyb2xsZXIuJGluamVjdCA9IFsnJHN0YXRlUGFyYW1zJywnJG1vZGFsJywnQ2FzZVN2YycsJ0JyYW5jaFN2YycsICdDYXJTdmMnLCAnVXNlclN2YyddO1xuXHRmdW5jdGlvbiBEaXNwYXRjaENvbnRyb2xsZXIoJHN0YXRlUGFyYW1zLCRtb2RhbCxDYXNlU3ZjLEJyYW5jaFN2YywgQ2FyU3ZjLCBVc2VyU3ZjKXtcblx0XHR2YXIgdm0gPSB0aGlzOyBcblx0XHRDYXNlU3ZjLmZldGNoKFVzZXJTdmMudXNlckNvcnBzKCkpLnN1Y2Nlc3MoZnVuY3Rpb24oY2FzZXMpe1xuXHRcdFx0dm0uY2FzZXMgPSBjYXNlcztcblx0XHRcdENhc2VTdmMuZmV0Y2hCeUlkKHZtLmNhc2VzWyRzdGF0ZVBhcmFtcy5jYXNlSWRdLl9pZCkuc3VjY2VzcyhmdW5jdGlvbihfY2FzZSl7XG5cdFx0XHRcdFx0cmV0dXJuIHZtLmNhc2VEZXRhaWxzID0gX2Nhc2U7XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5Q29ycHMoVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2hlcyl7XG5cdFx0ICAgIHJldHVybiB2bS5icmFuY2hMaXN0ID0gYnJhbmNoZXM7XG5cdFx0IH0pO1xuXG5cdFx0Q2FyU3ZjLmZldGNoKCkuc3VjY2VzcyhmdW5jdGlvbihkYXRhKXtcblx0XHQgICAgcmV0dXJuIHZtLmNhcnNEYXRhID0gZGF0YTtcblx0XHR9KTtcblxuXHRcdHZtLmFkZE5ld0Nhc2UgPSBmdW5jdGlvbiAoKSB7XG5cdFx0ICBcdHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuXHRcdFx0ICAgIHRlbXBsYXRlVXJsOiAnL3BhcnRpYWxzL2Nhc2VQYW5lbC9jYXNlQWRkTW9kYWwnLFxuXHRcdFx0ICAgIGNvbnRyb2xsZXI6ICdDYXNlQWRkTW9kYWxDdHJsJyxcblx0XHRcdCAgICBzaXplOiBcImxnXCIsXG5cdFx0XHQgICAgcmVzb2x2ZSA6IHtcblx0XHRcdCAgICBcdGNhc2VJZCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiB2bS5pZCA9IFwi5paw5aKe5qGI5Lu2XCJcblx0XHRcdCAgICBcdH0sXG5cdFx0XHQgICAgXHRicmFuY2hMaXN0IDogZnVuY3Rpb24oKXtcblx0XHRcdCAgICBcdFx0cmV0dXJuIHZtLmJyYW5jaExpc3Q7XG5cdFx0XHQgICAgXHR9LFxuXHRcdFx0ICAgIFx0Y2Fyc0RhdGEgOiBmdW5jdGlvbigpe1xuXHRcdFx0ICAgIFx0XHRyZXR1cm4gdm0uY2Fyc0RhdGE7XG5cdFx0XHQgICAgXHR9LFxuXHRcdFx0ICAgIFx0aXNOZXcgOiBmdW5jdGlvbigpe1xuXHRcdFx0ICAgIFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdCAgICBcdH0sXG5cdFx0XHQgICAgXHRjYXNlRGV0YWlscyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiB7fVxuXHRcdFx0ICAgIFx0fVxuXHRcdFx0ICAgIH1cblx0XHQgICAgfSk7XG5cdFx0IH07XG5cblx0XHQgdm0uZWRpdENhc2UgPSBmdW5jdGlvbigpe1xuXHRcdCBcdHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuXHRcdFx0ICAgIHRlbXBsYXRlVXJsOiAnL3BhcnRpYWxzL2Nhc2VQYW5lbC9jYXNlQWRkTW9kYWwnLFxuXHRcdFx0ICAgIGNvbnRyb2xsZXI6ICdDYXNlQWRkTW9kYWxDdHJsJyxcblx0XHRcdCAgICBzaXplOiBcImxnXCIsXG5cdFx0XHQgICAgcmVzb2x2ZSA6IHtcblx0XHRcdCAgICBcdGNhc2VJZCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiB2bS5pZCA9IHZtLmNhc2VzWyRzdGF0ZVBhcmFtcy5jYXNlSWRdLmNhc2VJZDsgXG5cdFx0XHQgICAgXHR9LFxuXHRcdFx0ICAgIFx0YnJhbmNoTGlzdCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiB2bS5icmFuY2hMaXN0O1xuXHRcdFx0ICAgIFx0fSxcblx0XHRcdCAgICBcdGNhcnNEYXRhIDogZnVuY3Rpb24oKXtcblx0XHRcdCAgICBcdFx0Zm9yICh2YXIgaSA9IHZtLmNhcnNEYXRhLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHQgICAgXHRcdFx0Zm9yICh2YXIgaiA9IHZtLmNhc2VEZXRhaWxzLmNhcnMubGVuZ3RoIC0gMTsgaiA+PSAwOyBqLS0pIHtcblx0XHRcdCAgICBcdFx0XHRcdGlmICggdm0uY2Fyc0RhdGFbaV0ucmFkaW9Db2RlID09PSB2bS5jYXNlRGV0YWlscy5jYXJzW2pdLnJhZGlvX2NvZGUpIHtcblx0XHRcdCAgICBcdFx0XHRcdFx0cmV0dXJuIHZtLmNhcnNEYXRhW2ldLmlzQ2hlY2tlZCA9IHRydWUgO1xuXHRcdFx0ICAgIFx0XHRcdFx0fTtcblx0XHRcdCAgICBcdFx0XHR9O1x0XHQgICAgXHRcdFx0XG5cdFx0XHQgICAgXHRcdH07XG5cdFx0XHQgICAgXHRcdHJldHVybiB2bS5jYXJzRGF0YTtcblx0XHRcdCAgICBcdH0sXG5cdFx0XHQgICAgXHRpc05ldyA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiBmYWxzZTsgXG5cdFx0XHQgICAgXHR9LFxuXHRcdFx0ICAgIFx0Y2FzZURldGFpbHMgOiBmdW5jdGlvbigpe1xuXHRcdFx0ICAgIFx0XHRyZXR1cm4gdm0uY2FzZURldGFpbHM7XG5cdFx0XHQgICAgXHR9XG5cdFx0XHQgICAgfVxuXHRcdCAgICB9KTtcblx0XHQgfTtcblx0fVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0LyoqXG5cdCogYXBwLmR1dHlsaXN0IE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5kdXR5bGlzdCcsIFtdKVxuXHRcdC5jb250cm9sbGVyKCdEdXR5TGlzdENvbnRyb2xsZXInLER1dHlMaXN0Q29udHJvbGxlcik7XG5cblx0RHV0eUxpc3RDb250cm9sbGVyLiRpbmplY3QgPSBbJ0JyYW5jaFN2YycsICckc3RhdGVQYXJhbXMnLCAnU29ja2V0U3ZjJywgJ1VzZXJTdmMnLCAnJHEnXTtcblx0ZnVuY3Rpb24gRHV0eUxpc3RDb250cm9sbGVyKEJyYW5jaFN2YywgJHN0YXRlUGFyYW1zLCBTb2NrZXRTdmMsIFVzZXJTdmMsICRxKXtcblx0XHR2YXIgdm0gPSB0aGlzOyBcblx0XHR2YXIgYnJhbmNoSWQgPSAkc3RhdGVQYXJhbXMuYnJhbmNoO1xuXHRcdFxuXHRcdEJyYW5jaFN2Yy50b3RhbExpc3RGaW5kQnlOYW1lKGJyYW5jaElkKS5zdWNjZXNzKGZ1bmN0aW9uKGJyYW5jaCl7XG5cdFx0XHR2bS5icmFuY2ggPSBicmFuY2g7XG5cdFx0XHR2bS5vbkR1dHlUb3RhbCA9IHZtLmJyYW5jaC5tZW1iZXJzLmZpbHRlcihmdW5jdGlvbihtZW1iZXIpIHtcblx0XHRcdFx0cmV0dXJuIG1lbWJlci5vbkR1dHkgPT0gdHJ1ZVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH1cblxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAuZ2VvIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5nZW8nKVxuXHRcdC5zZXJ2aWNlKCdHZW9TdmMnLEdlb1N2Yyk7XG5cblx0R2VvU3ZjLiRpbmplY3QgPSBbJyRxJywnJGh0dHAnXTtcblxuXHRmdW5jdGlvbiBHZW9TdmMoKXtcblx0XHR2YXIgc3ZjID0gdGhpczsgXG5cdFx0c3ZjLmdldEdlb2xvY2F0aW9uQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbigpIHtcblx0ICAgICAgICB2YXIgZGVmZXJyZWQgPSAkcS5kZWZlcigpO1xuXHQgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24oXG5cdCAgICAgICAgICAgIGZ1bmN0aW9uKHBvc2l0aW9uKSB7IGRlZmVycmVkLnJlc29sdmUocG9zaXRpb24uY29vcmRzKTsgfSxcblx0ICAgICAgICAgICAgZnVuY3Rpb24oZXJyb3IpIHsgZGVmZXJyZWQucmVzb2x2ZShudWxsKTsgfVxuXHQgICAgICAgICk7XG5cdCAgICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cdCAgICB9O1xuXG5cdCAgICBzdmMuZ2V0R2VvRW5jb2RlZEluZm8gPSBmdW5jdGlvbihhZGRyZXNzKXtcblx0ICAgIFx0dmFyIGRlZmVycmVkID0gJHEuZGVmZXIoKTtcblx0ICAgIFx0Ly8gcmV0dXJuICRodHRwLmdldCgnaHR0cHM6Ly9tYXBzLmdvb2dsZWFwaXMuY29tL21hcHMvYXBpL2dlb2NvZGUvanNvbj9hZGRyZXNzPScrIGFkZHJlc3MgKycma2V5PUFJemFTeUF4cS1aa3hScjFaQXJCWEZET284eGdpNENsMlBlaXRBbycpXG5cdCAgICBcdHZhciBnZW9jb2RlciA9IG5ldyBnb29nbGUubWFwcy5HZW9jb2RlcigpO1xuXHQgICAgXHRpZiAoZ2VvY29kZXIpIHtcblx0XHQgICAgICBnZW9jb2Rlci5nZW9jb2RlKHsgJ2FkZHJlc3MnOiBhZGRyZXNzIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHtcblx0XHQgICAgICAgICBpZiAoc3RhdHVzID09IGdvb2dsZS5tYXBzLkdlb2NvZGVyU3RhdHVzLk9LKSB7XG5cdFx0ICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZShyZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKSBcblx0XHQgICAgICAgICB9XG5cdFx0ICAgICAgICAgZWxzZSB7XG5cdFx0ICAgICAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSggXCJHZW9jb2RpbmcgZmFpbGVkOiBcIiArIHN0YXR1cyApXG5cdFx0ICAgICAgICAgfVxuXHRcdCAgICAgIH0pO1xuXHRcdCAgIH0gXG5cdFx0ICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7ICBcblx0ICAgIH07XG5cblx0ICAgIHN2Yy5mZXRjaEJhc2VMb2NhdGlvbiA9IGZ1bmN0aW9uKGNvcnBzKXtcblx0ICAgIFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9nZW9sb2NhdGlvbnM/Y29ycHM9JyArIGNvcnBzKVxuXHQgICAgfTtcblxuXHQgICAgc3ZjLmdldERpc3RhbmNlID0gZnVuY3Rpb24oIGZyb21fbG9jICwgdG9fbG9jICl7XG5cblx0ICAgIFx0aWYgKHR5cGVvZihOdW1iZXIucHJvdG90eXBlLnRvUmFkKSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0ICBOdW1iZXIucHJvdG90eXBlLnRvUmFkID0gZnVuY3Rpb24oKSB7XG5cdFx0XHQgICAgcmV0dXJuIHN2YyAqIE1hdGguUEkgLyAxODA7XG5cdFx0XHQgIH1cblx0XHRcdH1cblx0XHRcdHZhciBSID0gNjM3MTsgLy8gUmFkaXVzIG9mIHRoZSBlYXJ0aCBpbiBrbVxuXHRcdFx0dmFyIGRMYXQgPSAodG9fbG9jLmxhdCAtIGZyb21fbG9jLmxhdCApLnRvUmFkKCk7ICAvLyBKYXZhc2NyaXB0IGZ1bmN0aW9ucyBpbiByYWRpYW5zXG5cdFx0XHR2YXIgZExvbiA9ICh0b19sb2MubG5nIC0gZnJvbV9sb2MubG5nICkudG9SYWQoKTsgXG5cdFx0XHR2YXIgYSA9IE1hdGguc2luKGRMYXQvMikgKiBNYXRoLnNpbihkTGF0LzIpICtcblx0XHRcdCAgICAgICAgTWF0aC5jb3MoZnJvbV9sb2MubGF0LnRvUmFkKCkpICogTWF0aC5jb3ModG9fbG9jLmxhdC50b1JhZCgpKSAqIFxuXHRcdFx0ICAgICAgICBNYXRoLnNpbihkTG9uLzIpICogTWF0aC5zaW4oZExvbi8yKTsgXG5cdFx0XHR2YXIgYyA9IDIgKiBNYXRoLmF0YW4yKE1hdGguc3FydChhKSwgTWF0aC5zcXJ0KDEtYSkpOyBcblx0XHRcdHJldHVybiBSICogYztcblx0ICAgIH07XG5cblx0ICAgIHN2Yy5kZWZhdWx0TG9jYXRpb24gPSBmdW5jdGlvbigpe1xuXHQgICAgXHRyZXR1cm4geyBsYXQgOiAyNS4wOTI3Mjk3ICwgbG5nIDogIDEyMS40NjA4NjM5LCBhZGRyZXNzIDogbnVsbH07XG5cdCAgICB9O1xuXHR9O1xufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAubWFwIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5tYXAnLCBbXSlcblx0XHQuY29udHJvbGxlcignTWFwSW5kZXhDb250cm9sbGVyJyxNYXBJbmRleENvbnRyb2xsZXIpO1xuXG5cdE1hcEluZGV4Q29udHJvbGxlci4kaW5qZWN0ID0gWydsZWFmbGV0RGF0YScsICdHZW9TdmMnXTtcblx0ZnVuY3Rpb24gTWFwSW5kZXhDb250cm9sbGVyKGxlYWZsZXREYXRhLCBHZW9TdmMpe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXG5cdFx0R2VvU3ZjLmdldEdlb2xvY2F0aW9uQ29vcmRpbmF0ZXMoKS50aGVuKGZ1bmN0aW9uKGNvb3JkKXtcblx0ICAgICAgICB2bS5ub3dQb3MubGF0ID0gY29vcmQubGF0aXR1ZGU7XG5cdCAgICAgICAgdm0ubm93UG9zLmxuZyA9IGNvb3JkLmxvbmdpdHVkZTtcblx0ICAgICAgICB2bS5ub3dQb3Muem9vbSA9IDE3O1xuXHQgICAgfSlcblxuXHQgICAgYW5ndWxhci5leHRlbmQodm0sIHtcblx0ICAgICAgICBub3dQb3M6IHtcblx0ICAgICAgICAgICAgbGF0OiAyNC45ODgsXG5cdCAgICAgICAgICAgIGxuZzogMTIxLjU3NTIsXG5cdCAgICAgICAgICAgIHpvb206IDE3XG5cdCAgICAgICAgfSxcblx0ICAgICAgICBjb250cm9sczoge1xuXHQgICAgICAgICAgICBkcmF3OiB7fVxuXHQgICAgICAgIH1cblx0ICAgIH0pXG5cblx0ICAgIGxlYWZsZXREYXRhLmdldE1hcCgpLnRoZW4oZnVuY3Rpb24obWFwKSB7XG5cdCAgICAgIHZhciBkcmF3bkl0ZW1zID0gdm0uY29udHJvbHMuZWRpdC5mZWF0dXJlR3JvdXA7XG5cdCAgICAgIG1hcC5vbignZHJhdzpjcmVhdGVkJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICB2YXIgbGF5ZXIgPSBlLmxheWVyO1xuXHQgICAgICAgIGRyYXduSXRlbXMuYWRkTGF5ZXIobGF5ZXIpO1xuXHQgICAgICAgIFxuXHQgICAgICAgIEZlYXR1cmVDb2xsZWN0aW9ucy5wdXNoKGxheWVyLnRvR2VvSlNPTigpKVxuXHQgICAgICAgIFxuXHQgICAgICB9KTtcblx0ICAgIH0pXG5cdH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLm1lbWJlciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAubWVtYmVyJylcblx0XHQuY29udHJvbGxlcignTWVtYmVyQWNjb3VudE1vZGFsQ29udHJvbGxlcicsTWVtYmVyQWNjb3VudE1vZGFsQ29udHJvbGxlcik7XG5cblx0TWVtYmVyQWNjb3VudE1vZGFsQ29udHJvbGxlci4kaW5qZWN0ID0gWydVc2VyU3ZjJywgJ01lbWJlclN2YycsICdtZW1iZXInLCAnJG1vZGFsSW5zdGFuY2UnXTtcblx0ZnVuY3Rpb24gTWVtYmVyQWNjb3VudE1vZGFsQ29udHJvbGxlcihVc2VyU3ZjLCBNZW1iZXJTdmMsIG1lbWJlciwgJG1vZGFsSW5zdGFuY2Upe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdHZtLnVzZXIgPSBtZW1iZXI7XG5cdFx0dm0uc2F2ZSA9IHNhdmU7XG5cdFx0dm0uY2FuY2VsID0gY2FuY2VsOyBcblxuXHRcdGZ1bmN0aW9uIHNhdmUoKXtcblx0XHRcdGlmIChfLmlzRW1wdHkodm0udXNlcikpIHtcblx0XHRcdFx0Y29uc29sZS5sb2coXCJwbGVhc2UgZW50ZXIgeW91ciBhY2NvdW50IGFuZCBwYXNzd29yZCFcIilcblx0XHRcdH0gZWxzZXtcblx0XHRcdFx0aWYgKCF2bS51c2VyLmFjY291bnQpIHtcblx0XHRcdFx0XHRjb25zb2xlLmxvZyhcImFjY291bnQgY2FuJ3QgYmUgYmxhbmshXCIpXG5cdFx0XHRcdFx0aWYgKCF2bS51c2VyLnBhc3N3b3JkKSB7XG5cdFx0XHRcdFx0XHRjb25zb2xlLmxvZyhcInBhc3N3b2QgY2FuJ3QgYmUgYmxhbmshXCIpXG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fSBlbHNlIGlmICghdm0udXNlci5wYXNzd29yZCkge1xuXHRcdFx0XHRcdGNvbnNvbGUubG9nKFwicGFzc3dvcmQgY2FuJ3QgYmUgYmxhbmtcIilcblx0XHRcdFx0fWVsc2V7XG5cdFx0XHRcdFx0VXNlclN2Yy5hY3RpdmF0ZSh2bS51c2VyKTtcblx0XHRcdFx0XHRNZW1iZXJTdmMudXBkYXRlVXNlcihtZW1iZXIubmFtZSk7XG5cdFx0XHRcdFx0JG1vZGFsSW5zdGFuY2UuY2xvc2Uodm0udXNlcik7XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBjYW5jZWwoKXtcblx0XHRcdCRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuXHRcdH07XG5cdH07XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCogYXBwLm1lbWJlciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAubWVtYmVyJylcblx0XHQuY29udHJvbGxlcignTWVtYmVyRWRpdENvbnRyb2xsZXInLE1lbWJlckVkaXRDb250cm9sbGVyKTtcblx0XG5cdE1lbWJlckVkaXRDb250cm9sbGVyLiRpbmplY3QgPSBbJ01lbWJlclN2YycsICdCcmFuY2hTdmMnLCAnJHN0YXRlUGFyYW1zJywgJyR3aW5kb3cnLCckbW9kYWwnLCAnJHN0YXRlJywgJ1VzZXJTdmMnXTtcblx0XG5cdGZ1bmN0aW9uIE1lbWJlckVkaXRDb250cm9sbGVyKCBNZW1iZXJTdmMsIEJyYW5jaFN2YywgJHN0YXRlUGFyYW1zLCAkd2luZG93LCRtb2RhbCwgJHN0YXRlLCBVc2VyU3ZjKXtcblx0XHR2YXIgdm0gPSB0aGlzOyBcblxuXHRcdHZtLmFsZXJ0cyA9IFtdO1xuXHRcdHZtLm1lbWJlckRlbGV0ZWQgPSBmYWxzZTtcblx0XHR2YXIgdGVtcERlbE1lbWJlciA9IG51bGw7XG5cdFx0dm0uYWNjZXNzTGV2ZWwgPSBVc2VyU3ZjLmFjY2Vzc0xldmVsKCk7XG5cdFx0dm0uY2xvc2VBbGVydCA9IGNsb3NlQWxlcnQ7XG5cdFx0dm0uc2F2ZSA9IHNhdmU7XG5cdFx0dm0uYWRkTmV3TWVtYmVyID0gYWRkTmV3TWVtYmVyO1xuXHRcdHZtLnVwZGF0ZSA9IHVwZGF0ZTtcblx0XHR2bS5hY3RpdmF0ZUFjY291bnQgPSBhY3RpdmF0ZUFjY291bnQ7XG5cdFx0dm0uZGVsZXRlQWxlcnQgPSBkZWxldGVBbGVydDtcblx0XHR2bS5kZUFjdGl2YXRlQWxlcnQgPSBkZUFjdGl2YXRlQWxlcnQ7XG5cdFx0XG5cdFx0dmFyIG1lbWJlckluaXQgPSBmdW5jdGlvbigpe1xuXHRcdFx0TWVtYmVyU3ZjLmZpbmRCeUJyYW5jaCgkc3RhdGVQYXJhbXMuYnJhbmNoKS5zdWNjZXNzKGZ1bmN0aW9uKG1lbWJlcnMpe1xuXHRcdFx0XHR2bS5tZW1iZXJzID0gbWVtYmVycztcblx0XHRcdFx0dm0ubWVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKG1lbWJlcil7XG5cdFx0XHRcdFx0bWVtYmVyLndvcmtpbmdUaW1lID0gbW9tZW50LmR1cmF0aW9uKG1lbWJlci53b3JraW5nVGltZSwnc2Vjb25kcycpO1xuXHRcdFx0XHR9KTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHRtZW1iZXJJbml0KCk7XG5cblx0XHR2YXIgZGVBY3RpdmF0ZUFjY291bnQgPSBmdW5jdGlvbihpbmRleCl7XG5cdFx0XHRVc2VyU3ZjLnJlbW92ZVVzZXIodGVtcERlbE1lbWJlci5uYW1lKS5zdWNjZXNzKGZ1bmN0aW9uKHVzZXIpe1xuXHRcdFx0XHRNZW1iZXJTdmMucmVtb3ZlVXNlcih1c2VyLnVzZXJuYW1lKTtcblx0XHRcdFx0dm0uY2xvc2VBbGVydChpbmRleCk7XG5cdFx0XHRcdG1lbWJlckluaXQoKTtcblx0XHRcdH0pO1xuXHRcdH07XG5cblx0XHR2YXIgZGVsZXRlTWVtYmVyID0gZnVuY3Rpb24oaW5kZXgpe1xuXHRcdFx0dm0ubWVtYmVyRGVsZXRlZCA9IHRydWU7XG5cdFx0XHRNZW1iZXJTdmMuZGVsZXRlTWVtYmVyKHRlbXBEZWxNZW1iZXIpLnN1Y2Nlc3MoZnVuY3Rpb24oKXtcblx0XHRcdFx0dm0ubWVtYmVyRGVsZXRlZCA9IGZhbHNlO1xuXHRcdFx0fSk7XG5cdFx0XHR2bS5jbG9zZUFsZXJ0KGluZGV4KTtcblx0XHRcdG1lbWJlckluaXQoKTtcblx0XHR9O1xuXG5cdFx0dmFyIGNhbmNlbERlbCA9IGZ1bmN0aW9uKGluZGV4KXtcblx0XHRcdHZtLm1lbWJlckRlbGV0ZWQgPSBmYWxzZTtcblx0XHRcdHZtLmNsb3NlQWxlcnQoaW5kZXgpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBzYXZlKCl7XG5cdFx0XHR2YXIgZGlyZWN0b3JzID0gXy5wbHVjayggdm0ubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24obWVtYmVyKSB7IHJldHVybiBtZW1iZXIubGV2ZWwgPiAxLjMgIH0pICwgJ25hbWUnKTtcblx0XHRcdEJyYW5jaFN2Yy51cGRhdGUoe1xuXHRcdFx0XHRicmFuY2ggOiAkc3RhdGVQYXJhbXMuYnJhbmNoLFxuXHRcdFx0XHRtZW1iZXJzIDogXy5wbHVjayggdm0ubWVtYmVycyAsICdfaWQnKSxcblx0XHRcdFx0ZGlyZWN0b3JzIDogZGlyZWN0b3JzLFxuXHRcdFx0XHRkaXJlY3RvciA6IGRpcmVjdG9yc1swXSxcblx0XHRcdFx0c2FmZXR5TWFuYWdlciA6IGRpcmVjdG9yc1swXVxuXHRcdFx0fSkuc3VjY2VzcyhmdW5jdGlvbigpe1xuXHRcdFx0XHQkd2luZG93Lmhpc3RvcnkuYmFjaygpO1xuXHRcdFx0fSk7XHRcdFxuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBhZGROZXdNZW1iZXIoKXtcblx0XHRcdHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuXHRcdFx0ICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbWVtYmVyL21lbWJlci5tb2RhbC5odG1sJyxcblx0XHRcdCAgICBjb250cm9sbGVyOiAnTWVtYmVyTW9kYWxDdHJsJyxcblx0XHRcdCAgICBzaXplOiBcIm1kXCIsXG5cdFx0XHQgICAgcmVzb2x2ZSA6IHtcblx0XHRcdCAgICBcdGJyYW5jaCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiAkc3RhdGVQYXJhbXMuYnJhbmNoIFxuXHRcdFx0ICAgIFx0fSxcblx0XHRcdCAgICBcdG1lbWJlciA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiB7IHdvcmtpbmdUaW1lIDogbnVsbCB9O1xuXHRcdFx0ICAgIFx0fVxuXHRcdFx0ICAgIH1cblx0XHQgICAgfSk7XG5cblx0XHQgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbihtZW1iZXIpe1xuXHRcdCAgICBcdGlmIChtZW1iZXIpIHtcblx0XHQgICAgXHRcdG1lbWJlckluaXQoKTtcblx0XHQgICAgXHR9XG5cdFx0ICAgIFx0dm0uYWxlcnRzLnB1c2goeyB0eXBlIDogXCJzdWNjZXNzXCIgLCAgbXNnOiAn5Lq65ZOh5paw5aKe5oiQ5Yqf77yBICcgKyBtZW1iZXIubmFtZSArICcg5bey5Yqg5YWlICcgKyBtZW1iZXIuYnJhbmNofSk7XG5cdFx0ICAgIH0pXG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZShtZW1iZXIpe1xuXHRcdFx0dmFyIG9sZE1lbWJlciA9IG1lbWJlcjtcblx0XHRcdHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuXHRcdFx0ICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbWVtYmVyL21lbWJlci5tb2RhbC5odG1sJyxcblx0XHRcdCAgICBjb250cm9sbGVyOiAnTWVtYmVyTW9kYWxDdHJsJyxcblx0XHRcdCAgICBzaXplOiBcIm1kXCIsXG5cdFx0XHQgICAgcmVzb2x2ZSA6IHtcblx0XHRcdCAgICBcdGJyYW5jaCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiAkc3RhdGVQYXJhbXMuYnJhbmNoIFxuXHRcdFx0ICAgIFx0fSxcblx0XHRcdCAgICBcdG1lbWJlciA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiB7XG5cdFx0XHQgICAgXHRcdFx0bWVtYmVySWQgOiBtZW1iZXIuX2lkLFxuXHRcdFx0ICAgIFx0XHRcdGlkIDogbWVtYmVyLmlkLFxuXHRcdFx0ICAgIFx0XHRcdG5hbWUgOiBtZW1iZXIubmFtZSxcblx0XHRcdCAgICBcdFx0XHR0aXRsZSA6IG1lbWJlci50aXRsZSxcblx0XHRcdCAgICBcdFx0XHRicmFuY2hlcyA6IG1lbWJlci5icmFuY2hlcyxcblx0XHRcdCAgICBcdFx0XHRjb3JwcyA6IG1lbWJlci5jb3Jwcyxcblx0XHRcdCAgICBcdFx0XHRyYWRpb0NvZGUgOiBtZW1iZXIucmFkaW9Db2RlLCBcblx0XHRcdCAgICBcdFx0XHR3b3JraW5nVGltZSA6IG1lbWJlci53b3JraW5nVGltZS5taW51dGVzKCkgKiA2MCArIG1lbWJlci53b3JraW5nVGltZS5zZWNvbmRzKClcblx0XHRcdCAgICBcdFx0fVxuXHRcdFx0ICAgIFx0fVxuXHRcdFx0ICAgIH1cblx0XHQgICAgfSk7XG5cblx0XHQgICAgbW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbihtZW1iZXIpe1xuXHRcdCAgICBcdG1lbWJlckluaXQoKTtcblx0XHQgICAgXHR2bS5hbGVydHMucHVzaCh7IHR5cGUgOiBcImluZm9cIiAsICBtc2c6ICBvbGRNZW1iZXIubmFtZSArICfkv67mlLnmiJDlip8hJyB9KTtcblx0XHQgICAgfSk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGFjdGl2YXRlQWNjb3VudChtZW1iZXIpe1xuXHRcdFx0dmFyIHVzZXJzID0gdm0ubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24obWVtYmVyKSB7XG5cdFx0XHRcdHJldHVybiBtZW1iZXIuaXNVc2VyO1xuXHRcdFx0fSk7XG5cblx0XHRcdGlmICh1c2Vycy5sZW5ndGggPCAzICkge1xuXHRcdFx0XHR2YXIgbW9kYWxJbnN0YW5jZSA9ICRtb2RhbC5vcGVuKHtcblx0XHRcdFx0ICAgIHRlbXBsYXRlVXJsOiAndmlld3MvbWVtYmVyL21lbWJlci5hY2NvdW50Lmh0bWwnLFxuXHRcdFx0XHQgICAgY29udHJvbGxlcjogJ01lbWJlckFjY291bnRNb2RhbEN0cmwnLFxuXHRcdFx0XHQgICAgc2l6ZTogXCJtZFwiLFxuXHRcdFx0XHQgICAgcmVzb2x2ZSA6IHtcblx0XHRcdFx0ICAgIFx0bWVtYmVyIDogZnVuY3Rpb24oKXtcblx0XHRcdFx0ICAgIFx0XHRyZXR1cm4gbWVtYmVyXG5cdFx0XHRcdCAgICBcdH1cblx0XHRcdFx0ICAgIH1cblx0XHRcdFx0fSk7XG5cblx0XHRcdFx0bW9kYWxJbnN0YW5jZS5yZXN1bHQudGhlbihmdW5jdGlvbihtZW1iZXIpe1xuXHRcdFx0XHRcdG1lbWJlckluaXQoKTtcblx0XHRcdFx0XHR2bS5hbGVydHMucHVzaCh7IHR5cGUgOiBcImluZm9cIiAsIG1zZyA6IG1lbWJlci5uYW1lICsgXCIg5bey6ZaL6YCa54K65L2/55So6ICFXCIgfSlcblx0XHRcdFx0fSk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR2bS5hbGVydHMucHVzaCh7IHR5cGUgOiBcIndhcm5pbmdcIiAsIG1zZyA6IFwi54Sh5rOV6ZaL6YCaXCIgKyBtZW1iZXIubmFtZSArIFwiIOWboOeCuuS9v+eUqOiAheW3sui2hemBjjPkvY3vvIzoq4vop6PpmaTlhbbku5bkurrluLPomZ/lvozlho3plovpgJogXCJ9KTtcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGRlbGV0ZUFsZXJ0KG1lbWJlcil7XG5cdFx0XHR2bS5hbGVydHMucHVzaCh7IFx0XG5cdFx0XHRcdHR5cGUgOiBcImRhbmdlclwiICwgIFxuXHRcdFx0XHRtc2c6ICfmmK/lkKbnorrlrpropoHliKrpmaTvvIEnICsgbWVtYmVyLm5hbWUsIFxuXHRcdFx0XHRleGVjdXRlIDogZGVsZXRlTWVtYmVyLFxuXHRcdFx0XHRjYW5jZWwgOiAgY2FuY2VsRGVsXG5cdFx0XHR9KTtcblx0XHRcdHRlbXBEZWxNZW1iZXIgPSBtZW1iZXI7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGRlQWN0aXZhdGVBbGVydChtZW1iZXIpe1xuXHRcdFx0dmFyIHVzZXJzID0gdm0ubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24obWVtYmVyKSB7XG5cdFx0XHRcdHJldHVybiBtZW1iZXIuaXNVc2VyO1xuXHRcdFx0fSk7XG5cdFx0XHRpZiAodXNlcnMubGVuZ3RoID09IDEgKSB7XG5cdFx0XHRcdHZtLmFsZXJ0cy5wdXNoKHsgXG5cdFx0XHRcdFx0dHlwZSA6IFwid2FybmluZ1wiLCAgXG5cdFx0XHRcdFx0bXNnOiAn5q+P5YiG6ZqK6Iez5bCR6KaB5pyJMeWAi+S9v+eUqOiAhe+8jOeEoeazleWPlua2iCcgKyBtZW1iZXIubmFtZSArIFwi55qE55m75YWl5qyK6ZmQXCIsXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSBlbHNle1xuXHRcdFx0XHR2bS5hbGVydHMucHVzaCh7IFxuXHRcdFx0XHRcdHR5cGUgOiBcImRhbmdlclwiLCAgXG5cdFx0XHRcdFx0bXNnOiAn5piv5ZCm56K65a6a6KaB6Kej6ZmkJyArIG1lbWJlci5uYW1lICsgXCLnmbvlhaXmrIrpmZBcIixcblx0XHRcdFx0XHRleGVjdXRlIDogZGVBY3RpdmF0ZUFjY291bnQsXG5cdFx0XHRcdFx0Y2FuY2VsIDogY2FuY2VsRGVsXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR0ZW1wRGVsTWVtYmVyID0gbWVtYmVyO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcblx0XHRmdW5jdGlvbiBjbG9zZUFsZXJ0KGluZGV4KXtcblx0XHRcdHZtLmFsZXJ0cy5zcGxpY2UoaW5kZXgsMSlcblx0XHR9O1xuXHR9XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cblx0LyoqXG5cdCogYXBwLm1lbWJlciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAubWVtYmVyJywgW10pXG5cdFx0LmNvbnRyb2xsZXIoJ01lbWJlckluZGV4Q29udHJvbGxlcicsTWVtYmVySW5kZXhDb250cm9sbGVyKTtcblxuXHRNZW1iZXJJbmRleENvbnRyb2xsZXIuJGluamVjdCA9IFsgTWVtYmVyU3ZjICwgJHN0YXRlUGFyYW1zIF07XG5cdGZ1bmN0aW9uIE1lbWJlckluZGV4Q29udHJvbGxlciggTWVtYmVyU3ZjICwgJHN0YXRlUGFyYW1zICl7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cblx0XHR2bS5icmFuY2ggPSAkc3RhdGVQYXJhbXMuYnJhbmNoO1xuXHRcdE1lbWJlclN2Yy5maW5kQnlCcmFuY2goJHN0YXRlUGFyYW1zLmJyYW5jaCkuc3VjY2VzcyhmdW5jdGlvbihtZW1iZXJzKXtcblx0XHRcdHZtLm1lbWJlcnMgPSBtZW1iZXJzO1xuXHRcdFx0dm0ubWVtYmVycy5mb3JFYWNoKGZ1bmN0aW9uKG1lbWJlcil7XG5cdFx0XHRcdHJldHVybiBtZW1iZXIud29ya2luZ1RpbWUgPSBtb21lbnQuZHVyYXRpb24obWVtYmVyLndvcmtpbmdUaW1lLCdzZWNvbmRzJyk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblx0fTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLm1lbWJlciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAubWVtYmVyJylcblx0XHQuY29udHJvbGxlcignTWVtYmVyTW9kYWxDb250cm9sbGVyJyxNZW1iZXJNb2RhbENvbnRyb2xsZXIpO1xuXG5cdE1lbWJlck1vZGFsQ29udHJvbGxlci4kaW5qZWN0ID0gWydicmFuY2gnLCAnTWVtYmVyU3ZjJywgJyRtb2RhbEluc3RhbmNlJywgJyRzdGF0ZScsICdtZW1iZXInLCdCcmFuY2hTdmMnLCAnVXNlclN2YyddO1xuXHRmdW5jdGlvbiBNZW1iZXJNb2RhbENvbnRyb2xsZXIoYnJhbmNoLCBNZW1iZXJTdmMsICRtb2RhbEluc3RhbmNlLCAkc3RhdGUsIG1lbWJlcixCcmFuY2hTdmMsIFVzZXJTdmMpe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdHZtLmFsZXJ0cyA9IFtdO1xuXHRcdHZtLmlzTmV3ICA9IF8uaXNOdWxsKG1lbWJlci53b3JraW5nVGltZSk7XG5cdFx0dm0uc2F2ZSAgID0gc2F2ZTtcblx0XHR2bS51cGRhdGUgPSB1cGRhdGU7XG5cdFx0dm0uY2FuY2VsID0gY2FuZWw7XG5cblx0XHR2bS5tZW1iZXIgPSB7XG5cdFx0XHRpZCBcdFx0IFx0OiBtZW1iZXIuaWQgfHwgIFwiXCIsIFxuXHRcdFx0bmFtZSBcdCBcdDogbWVtYmVyLm5hbWUgfHwgbnVsbCAsIFxuXHRcdFx0dGl0bGUgICAgXHQ6IFwi5raI6Ziy6ZqK5ZOhXCIsXG5cdFx0XHR0aXRsZXMgICBcdDogW1wi5raI6Ziy6ZqK5ZOhXCIsXCLlsI/pmorplbdcIixcIuWIhumaiumVt1wiLFwi5Lit6ZqK6ZW3XCIsXCLlpKfpmorplbdcIixcIuWJr+Wkp+maiumVt1wiXSxcblx0XHRcdGJyYW5jaCAgIFx0OiBtZW1iZXIuYnJhbmNoIHx8IGJyYW5jaCxcblx0XHRcdHdvcmtpbmdUaW1lIDogbWVtYmVyLndvcmtpbmdUaW1lIHx8ICAxMjAwLFxuXHRcdFx0cmFkaW9Db2RlIFx0OiBtZW1iZXIucmFkaW9Db2RlIHx8ICBudWxsLCBcblx0XHRcdG1pc3Npb24gIFx0OiBcIueehOWtkOaJi1wiLFxuXHRcdFx0bWlzc2lvbnMgXHQ6IFtcIueehOWtkOaJi1wiLFwi5Ymv556E5a2Q5omLXCIsXCLlj7jmqZ9cIixcIuWwj+e1hOmVt1wiLFwi5a6J5YWo566h5Yi25ZOhXCIsXCLoga/ntaHlrphcIixdLFxuXHRcdFx0Y29ycHNcdCBcdDogVXNlclN2Yy51c2VyQ29ycHMoKSxcblx0XHRcdGNvcnBzcyBcdCBcdDogW1wi56ys5LiA5pWR54G95pWR6K235aSn6ZqKXCIsXCLnrKzkuInmlZHngb3mlZHorbflpKfpmopcIl0sXG5cdFx0fTtcblxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5Q29ycHMoVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2hlcyl7XG5cdFx0XHR2bS5icmFuY2hlcyA9IGJyYW5jaGVzOyBcblx0XHRcdGlmICghdm0uaXNOZXcpIHtcblx0XHRcdFx0dmFyIGJyYW5jaEFycnkgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IGJyYW5jaGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0YnJhbmNoQXJyeS5wdXNoKGJyYW5jaGVzW2ldLm5hbWUpO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR2bS5tZW1iZXIuYnJhbmNoZXMgPSBicmFuY2hBcnJ5O1xuXHRcdFx0fTsgXG5cdFx0fSk7XG5cblx0XHR2YXIgcmFkaW9Db2RlUHJlZml4ID0gZnVuY3Rpb24oYnJhbmNoKXtcblx0XHRcdHZhciBzdWZmaXggPSAgYnJhbmNoLnNwbGl0KCcnKS5zbGljZSgtMikuam9pbignJyk7XG5cdFx0XHRpZiAoc3VmZml4ID09IFwi5aSn6ZqKXCIgfHwgc3VmZml4ID09IFwi5Lit6ZqKXCIpIHtcblx0XHRcdFx0cmV0dXJuIFwi5YyX5rW3XCI7XG5cdFx0XHR9IGVsc2V7XG5cdFx0XHRcdHJldHVybiBicmFuY2guc3BsaXQoJycpLnNsaWNlKDAsMikuam9pbignJyk7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBzYXZlKCl7XG5cdFx0XHRpZiAodm0ubWVtYmVyLm5hbWUpIHtcblx0XHRcdFx0dm0ubWVtYmVyLnJhZGlvQ29kZVByZWZpeCA9IHJhZGlvQ29kZVByZWZpeCh2bS5tZW1iZXIuYnJhbmNoKTtcblx0XHRcdFx0TWVtYmVyU3ZjLmNyZWF0ZSh2bS5tZW1iZXIpLnN1Y2Nlc3MoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHR2bS5tZW1iZXIud29ya2luZ1RpbWUgPSBtb21lbnQuZHVyYXRpb24ocGFyc2VJbnQodm0ubWVtYmVyLndvcmtpbmdUaW1lKSwnc2Vjb25kcycpO1xuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0JG1vZGFsSW5zdGFuY2UuY2xvc2Uodm0ubWVtYmVyKTtcblx0XHRcdFx0fSlcblx0XHRcdH0gZWxzZXtcblxuXHRcdFx0fTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlKCl7XG5cdFx0XHR2YXIgdXBkYXRlTWVtYmVyID0ge1xuXHRcdFx0XHQgIG1lbWJlcklkICA6IG1lbWJlci5tZW1iZXJJZCxcblx0XHRcdFx0ICBpZCBcdFx0OiBcIlwiLFxuXHRcdFx0XHQgIG5hbWUgXHRcdDogdm0ubWVtYmVyLm5hbWUsXG5cdFx0XHRcdCAgY29ycHMgXHQ6IHZtLm1lbWJlci5jb3Jwcyxcblx0XHRcdFx0ICBicmFuY2ggXHQ6IHZtLm1lbWJlci5icmFuY2gsXG5cdFx0XHRcdCAgdGl0bGUgXHQ6IHZtLm1lbWJlci50aXRsZSxcblx0XHRcdFx0ICB3b3JraW5nVGltZSA6IHZtLm1lbWJlci53b3JraW5nVGltZSxcblx0XHRcdFx0ICByYWRpb0NvZGUgIDogdm0ubWVtYmVyLnJhZGlvQ29kZSxcblx0XHRcdFx0ICByYWRpb0NvZGVQcmVmaXggOiByYWRpb0NvZGVQcmVmaXgodm0ubWVtYmVyLmJyYW5jaClcblx0XHRcdH1cblxuXHRcdFx0aWYgKHZtLm1lbWJlci5uYW1lKSB7XG5cdFx0XHRcdE1lbWJlclN2Yy51cGRhdGVCeU1lbWJlcklkKHVwZGF0ZU1lbWJlcik7XG5cdFx0XHRcdCRtb2RhbEluc3RhbmNlLmNsb3NlKHVwZGF0ZU1lbWJlcik7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcblx0XHRcdH07XG5cdFx0fTtcblx0XG5cdFx0ZnVuY3Rpb24gY2FuY2VsKCl7XG5cdFx0XHQkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcblx0XHR9O1xuXHR9O1xufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAubWVtYmVyIE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5tZW1iZXInKVxuXHRcdC5zZXJ2aWNlKCdNZW1iZXJTdmMnLE1lbWJlclN2Yylcblx0XG5cdE1lbWJlclN2Yy4kaW5qZWN0ID0gWyckaHR0cCddO1xuXHRcblx0ZnVuY3Rpb24gTWVtYmVyU3ZjKCl7XG5cdFx0dmFyIHN2YyA9IHRoaXM7IFxuXHRcdHN2Yy5mZXRjaCA9IGZldGNoO1xuXHRcdHN2Yy5maW5kQnlCcmFuY2ggPSBmaW5kQnlCcmFuY2g7XG5cdFx0c3ZjLmZldGNoT25EdXR5ID0gZmV0Y2hPbkR1dHk7XG5cdFx0c3ZjLmNyZWF0ZSA9IGNyZWF0ZTsgXG5cdFx0c3ZjLnVwZGF0ZSA9IHVwZGF0ZTsgXG5cdFx0c3ZjLnVwZGF0ZU9uRHV0eSA9IHVwZGF0ZU9uRHV0eTtcblx0XHRzdmMudXBkYXRlQnlNZW1iZXJJZCA9IHVwZGF0ZUJ5TWVtYmVySWQ7XG5cdFx0c3ZjLnVwZGF0ZUlzQ2hlY2tlZCA9IHVwZGF0ZUlzQ2hlY2tlZDtcblx0XHRzdmMudXBkYXRlVXNlciA9IHVwZGF0ZVVzZXI7XG5cdFx0c3ZjLnJlbW92ZVVzZXIgPSByZW1vdmVVc2VyO1xuXHRcdHN2Yy5kZWxldGVNZW1iZXIgPSBkZWxldGVNZW1iZXI7XG5cblx0XHRmdW5jdGlvbiBmZXRjaCgpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9tZW1iZXJzJyk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGZpbmRCeUJyYW5jaCggYnJhbmNoICl7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL21lbWJlcnMvJyArIGJyYW5jaCApO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBmZXRjaE9uRHV0eShicmFuY2gpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9tZW1iZXJzL29uRHV0eT9icmFuY2g9JyArIGJyYW5jaCk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGNyZWF0ZShtZW1iZXIpe1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvbWVtYmVycy8nLCBtZW1iZXIpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB1cGRhdGUobWVtYmVyKXtcblx0XHRcdHJldHVybiAkaHR0cC5wdXQoJy9hcGkvbWVtYmVycy8nLCBtZW1iZXIuaWQpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB1cGRhdGVPbkR1dHkobWVtYmVyKXtcblx0XHRcdHJldHVybiAkaHR0cC5wdXQoJy9hcGkvbWVtYmVycy9vbkR1dHkvZmluZEJ5SWQ/bWVtYmVySWQ9JyArIG1lbWJlci5tZW1iZXJJZCwgbWVtYmVyKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlQnlNZW1iZXJJZCh1cGRhdGVNZW1iZXIpe1xuXHRcdFx0cmV0dXJuICRodHRwLnB1dCgnL2FwaS9tZW1iZXJzL2ZpbmRCeUlkLycgKyB1cGRhdGVNZW1iZXIubWVtYmVySWQgLCB1cGRhdGVNZW1iZXIpO1xuXHRcdH1cblx0XHRcblx0XHRmdW5jdGlvbiB1cGRhdGVJc0NoZWNrZWQobWVtYmVyRGF0YSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL21lbWJlcnM/aWQ9JyArIG1lbWJlckRhdGEubWVtYmVySWQsIG1lbWJlckRhdGEpXG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiB1cGRhdGVVc2VyKHVzZXJuYW1lKXtcblx0XHRcdHJldHVybiAkaHR0cC5wdXQoJy9hcGkvbWVtYmVycy91c2VyP3VzZXJuYW1lPScrIHVzZXJuYW1lKTtcblx0XHR9O1xuXHRcdFxuXHRcdGZ1bmN0aW9uIHJlbW92ZVVzZXIodXNlcm5hbWUpe1xuXHRcdFx0cmV0dXJuICRodHRwLnB1dCgnL2FwaS9tZW1iZXJzL3VzZXIvcmVtb3ZlP3VzZXJuYW1lPScgKyB1c2VybmFtZSk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGRlbGV0ZU1lbWJlcihtZW1iZXIpe1xuXHRcdFx0cmV0dXJuICRodHRwLmRlbGV0ZSgnL2FwaS9tZW1iZXJzLycgKyBtZW1iZXIuX2lkKTtcblx0XHR9O1xuXHR9XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5ub3RpZmljYXRpb24gTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLm5vdGlmaWNhdGlvbicpXG5cdFx0LnNlcnZpY2UoJ050ZlN2YycsTnRmU3ZjKTtcblxuXHROdGZTdmMuJGluamVjdCA9IFsnJGh0dHAnXTtcblx0XG5cdGZ1bmN0aW9uIE50ZlN2YygkaHR0cCl7XG5cdFx0dmFyIHN2YyA9IHRoaXM7XG5cdFx0c3ZjLmZldGNoID0gZmV0Y2g7IFxuXHRcdGZ1bmN0aW9uIGZldGNoKCl7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZ2V0KCcvYXBpL250ZnMnKTtcblx0XHR9IDtcblx0fTtcblxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8qKlxuXHQqIGFwcC5zYWZldHkgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLnNhZmV0eScpXG5cdFx0LmNvbnRyb2xsZXIoJ1NhZmV0eUNtZFNob3dDb250cm9sbGVyJyxTYWZldHlDbWRTaG93Q29udHJvbGxlcik7XG5cblx0U2FmZXR5Q21kU2hvd0NvbnRyb2xsZXIuJGluamVjdCA9IFsnQ2FzZVN2YycsICdCcmFuY2hTdmMnLCAnVXNlclN2YycsICckc3RhdGVQYXJhbXMnLCAnR2VvU3ZjJ107XG5cdFxuXHRmdW5jdGlvbiBTYWZldHlDbWRTaG93Q29udHJvbGxlcihDYXNlU3ZjLCBCcmFuY2hTdmMsIFVzZXJTdmMsICRzdGF0ZVBhcmFtcywgR2VvU3ZjKXtcblx0XHRcblx0XHR2YXIgdm0gPSB0aGlzOyBcblx0XHR2YXIgYnJhbmNoID0gVXNlclN2Yy51c2VyQnJhbmNoKCk7XG5cdFxuXHRcdEJyYW5jaFN2Yy50b3RhbExpc3RGaW5kQnlOYW1lKGJyYW5jaCkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2gpe1xuXHRcdFx0dm0ubWVtYmVycyA9IGJyYW5jaC5tZW1iZXJzLmZpbHRlcihmdW5jdGlvbihtZW1iZXIpIHtcblx0XHRcdFx0bWVtYmVyLmxpbWl0VGltZSA9IG1vbWVudC5kdXJhdGlvbihtZW1iZXIud29ya2luZ1RpbWUsICdzZWNvbmRzJyk7XG5cdFx0XHRcdHJldHVybiBtZW1iZXIub25EdXR5ID09IHRydWUgXG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXHRcdENhc2VTdmMuZmV0Y2hEZXRhaWxzKCRzdGF0ZVBhcmFtcy5jYXNlSWQpLnN1Y2Nlc3MoZnVuY3Rpb24oX2Nhc2Upe1xuXHRcdFx0dm0uY2FzZURldGFpbCA9IF9jYXNlO1xuXHRcdFx0dm0ub25EdXR5QnJhbmNoZXMgPSBfY2FzZS5icmFuY2hJZHM7XG5cdFx0XHRpZiAoX2Nhc2UubG9jYXRpb24pIHtcblx0XHRcdFx0dmFyIGxvY2F0aW9uID0gSlNPTi5wYXJzZShfY2FzZS5sb2NhdGlvbik7XG5cdFx0XHRcdHZtLm1hcmtlcnMubWFpbk1hcmtlciA9IHtcblx0XHRcdFx0XHRsYXQgOiBOdW1iZXIobG9jYXRpb24ubGF0KSxcblx0XHRcdFx0XHRsbmcgOiBOdW1iZXIobG9jYXRpb24ubG5nKSxcblx0XHRcdFx0XHRtZXNzYWdlIDogXCLmoYjku7bmqJnnmoRcIlxuXHRcdFx0XHR9O1xuXG5cdFx0XHRcdHZtLmJhdHRsZVJhZGl1c3MgPSBfY2FzZS5iYXR0bGVSYWRpdXNzO1xuXHRcdFx0fTtcblx0XHR9KS50aGVuKGZ1bmN0aW9uKCl7XG5cdFx0XHR2bS5vbkR1dHlCcmFuY2hlcy5mb3JFYWNoKGZ1bmN0aW9uKGJyYW5jaCl7XG5cdFx0XHRcdGJyYW5jaC5tZW1iZXJzLmZvckVhY2goZnVuY3Rpb24obWVtYmVyKXtcblx0XHRcdFx0XHRpZiAoYnJhbmNoLmRpcmVjdG9yID09IG1lbWJlci5uYW1lICkge1xuXHRcdFx0XHRcdFx0YnJhbmNoLmRpcmVjdG9yUmFkaW9Db2RlID0gbWVtYmVyLnJhZGlvQ29kZVByZWZpeCArICBTdHJpbmcobWVtYmVyLnJhZGlvQ29kZSk7XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0XHRpZiAoYnJhbmNoLnNhZmV0eU1hbmFnZXIgPT0gbWVtYmVyLm5hbWUpIHtcblx0XHRcdFx0XHRcdGJyYW5jaC5zYWZldHlNYW5hZ2VyUmFkaW9Db2RlID0gbWVtYmVyLnJhZGlvQ29kZVByZWZpeCArIFN0cmluZyhtZW1iZXIucmFkaW9Db2RlKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0XHR9KTtcblxuXHRcdFx0XHRpZiAodm0uYmF0dGxlUmFkaXVzKSB7XG5cdFx0XHRcdFx0dm0uYmF0dGxlUmFkaXVzcy5mb3JFYWNoKGZ1bmN0aW9uKGJhdHRsZVJhZGl1cyl7XG5cdFx0XHRcdFx0XHR2YXIgcmFkaXVzID0gSlNPTi5wYXJzZShiYXR0bGVSYWRpdXMpXG5cdFx0XHRcdFx0XHRpZiAoYnJhbmNoLm5hbWUgPT0gcmFkaXVzLmJhc2UpIHtcblx0XHRcdFx0XHRcdFx0YnJhbmNoLmVzdGltYXRlZEFycml2aW5nVGltZSA9ICBNYXRoLnJvdW5kKCggcmFkaXVzLmQgLyA1MCApICogNjApO1xuXHRcdFx0XHRcdFx0fTtcblx0XHRcdFx0XHR9KVx0XHRcblx0XHRcdFx0fTtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXG4gICAgICAgR2VvU3ZjLmdldEdlb2xvY2F0aW9uQ29vcmRpbmF0ZXMoKS50aGVuKGZ1bmN0aW9uKGNvb3JkKXtcblx0ICAgICAgICB2bS5ub3dQb3MubGF0ID0gY29vcmQubGF0aXR1ZGU7XG5cdCAgICAgICAgdm0ubm93UG9zLmxuZyA9IGNvb3JkLmxvbmdpdHVkZTtcblx0ICAgICAgICB2bS5ub3dQb3Muem9vbSA9IDE3O1xuXHQgICAgICAgIHZtLm1hcmtlcnMubm93UG9zID0ge1xuXHQgICAgICAgIFx0bGF0IDogdm0ubm93UG9zLmxhdCxcblx0ICAgICAgICBcdGxuZyA6IHZtLm5vd1Bvcy5sbmcsXG5cdCAgICAgICAgXHRtZXNzYWdlIDogXCLnj77lnKjkvY3nva5cIlxuXHQgICAgICAgIH1cblx0ICAgIH0pXG5cblx0ICAgIGFuZ3VsYXIuZXh0ZW5kKHZtLCB7XG5cdCAgICAgICAgbm93UG9zOiB7XG5cdCAgICAgICAgICAgIGxhdDogMjQuOTg4LFxuXHQgICAgICAgICAgICBsbmc6IDEyMS41NzUyLFxuXHQgICAgICAgICAgICB6b29tOiAxM1xuXHQgICAgICAgIH0sXG5cdCAgICAgICAgbWFya2Vyczoge30sXG5cdCAgICB9KTtcdFx0XG5cdH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnNhZmV0eSBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuc2FmZXR5Jylcblx0XHQuY29udHJvbGxlcignU2FmZXR5SW5kZXhDb250cm9sbGVyJyxTYWZldHlJbmRleENvbnRyb2xsZXIpO1xuXHRTYWZldHlJbmRleENvbnRyb2xsZXIuJGluamVjdCA9IFsnQ2FzZVN2YycsICdVc2VyU3ZjJ107XG5cdGZ1bmN0aW9uIFNhZmV0eUluZGV4Q29udHJvbGxlcigpe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdHZhciB1c2VyQ29uZGl0aW9uID0ge1xuXHRcdFx0YnJhbmNoIFx0XHQ6IFVzZXJTdmMudXNlckJyYW5jaCgpLFxuXHRcdFx0YWNjZXNzTGV2ZWwgOiBVc2VyU3ZjLmFjY2Vzc0xldmVsKCksXG5cdFx0XHRjb3JwcyBcdFx0OiBVc2VyU3ZjLnVzZXJDb3JwcygpXG5cdFx0fTtcblxuXHRcdENhc2VTdmMuZmV0Y2hSZWxhdGl2ZUNhc2UodXNlckNvbmRpdGlvbikuc3VjY2VzcyhmdW5jdGlvbihjYXNlcyl7IFxuXHRcdFx0dm0uY2FzZXMgPSBjYXNlcztcblx0XHRcdGNhc2VzLmZvckVhY2goZnVuY3Rpb24oX2Nhc2Upe1xuXHRcdFx0XHRfY2FzZS5kaXNwYXRjaEJyYW5jaGVzID0gJydcblx0XHRcdFx0X2Nhc2UuYnJhbmNoZXMuZm9yRWFjaChmdW5jdGlvbihicmFuY2gpe1xuXHRcdFx0XHRcdF9jYXNlLmRpc3BhdGNoQnJhbmNoZXMgKz0gYnJhbmNoICsgJyAnXG5cdFx0XHRcdH0pO1xuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHR2bS5pc0JyYW5jaE1lbWJlciA9IHRydWUgPyBVc2VyU3ZjLmFjY2Vzc0xldmVsKCkgPCAyICA6IGZhbHNlIDsgXG5cdH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnNhZmV0eSBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuc2FmZXR5Jylcblx0XHQuY29udHJvbGxlcignU2FmZXR5TWFuYWdlQ29udHJvbGxlcicsU2FmZXR5TWFuYWdlQ29udHJvbGxlcik7XG5cdFxuXHRTYWZldHlNYW5hZ2VDb250cm9sbGVyLiRpbmplY3QgPSBbJyRzdGF0ZVBhcmFtcycsICckbW9kYWwnLCAnU3RTdmMnLCAnJHN0YXRlJywgJ01lbWJlclN2YycsJyRsb2cnLCAnVXNlclN2YycsICdCcmFuY2hTdmMnLCAnU29ja2V0U3ZjJywgJ0Nhc2VTdmMnLCAnU3RNaXNzaW9uRmFjJ107XG5cdFxuXHRmdW5jdGlvbiBTYWZldHlNYW5hZ2VDb250cm9sbGVyKCRzdGF0ZVBhcmFtcywgJG1vZGFsLCBTdFN2YywgJHN0YXRlLCBNZW1iZXJTdmMsJGxvZywgVXNlclN2YywgQnJhbmNoU3ZjLCBTb2NrZXRTdmMsIENhc2VTdmMsIFN0TWlzc2lvbkZhYyl7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cdFx0dmFyIEJSQU5DSCBcdFx0PSBVc2VyU3ZjLnVzZXJCcmFuY2goKTtcblx0XHR2YXIgY2FzZURldGFpbCBcdD0gbnVsbDtcblx0XHR2bS5xdWlja1N0YXJ0IFx0PSBmYWxzZTtcblx0XHR2bS5hcGFydG1lbnQgXHQ9IHRydWU7IFxuXHRcdHZtLkFDQ0VTU0xFVkVMIFx0PSBVc2VyU3ZjLmFjY2Vzc0xldmVsKCk7XG5cdFx0dm0ucXVpY2tPcmdhbml6aW5nID0gcXVpY2tPcmdhbml6aW5nO1xuXHRcdHZtLnN0cmlrZVRlYW0gPSBzdHJpa2VUZWFtO1xuXHRcdHZtLm9wZW5TZXR0aW5nTW9kYWwgPSBvcGVuU2V0dGluZ01vZGFsO1xuXHRcdHZtLmRpc21pc3MgPSBkaXNtaXNzOyBcblxuXHRcdHZtLmJyYW5jaE9wdGlvbnMgPSB7XG5cdFx0XHRicmFuY2ggOiBCUkFOQ0gsXG5cdFx0XHRicmFuY2hlcyA6IFtdXG5cdFx0fTtcblxuXHRcdENhc2VTdmMuZmV0Y2hCeUlkKCRzdGF0ZVBhcmFtcy5jYXNlSWQpLnN1Y2Nlc3MoZnVuY3Rpb24oX2Nhc2Upe1xuXHRcdFx0Y2FzZURldGFpbCA9IF9jYXNlO1xuXHRcdFx0X2Nhc2UuZW52ID09ICfkvY/lroXngavoraYnPyB2bS5hcGFydG1lbnQgPSB0cnVlIDogdm0uYXBhcnRtZW50ID0gZmFsc2U7IFxuXHRcdFx0dm0uYnJhbmNoT3B0aW9ucy5icmFuY2hlcyA9IF9jYXNlLmJyYW5jaGVzXG5cdFx0XHR2bS5icmFuY2hPcHRpb25zLmJyYW5jaGVzLnNwbGljZSgwLDAsQlJBTkNIKTtcblx0XHR9KTtcblxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5TmFtZShCUkFOQ0gpLnN1Y2Nlc3MoZnVuY3Rpb24oZGV0YWlscyl7XG5cdFx0XHR2bS5kZXRhaWxzID0gZGV0YWlscztcblx0XHR9KS50aGVuKGZ1bmN0aW9uKCl7XG5cdFx0XHRpZiAodm0uQUNDRVNTTEVWRUwgPiAxICkge1xuXHRcdFx0XHRTdFN2Yy5mZXRjaEJ5Q2FzZSgkc3RhdGVQYXJhbXMuY2FzZUlkKS5zdWNjZXNzKGZ1bmN0aW9uKHN0cyl7XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXMgPSBzdHM7IFxuXHRcdFx0XHR9KTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFN0U3ZjLmZldGNoKCRzdGF0ZVBhcmFtcy5jYXNlSWQsQlJBTkNIKS5zdWNjZXNzKGZ1bmN0aW9uKHN0cyl7XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXMgPSBzdHM7XG5cdFx0XHRcdFx0aWYgKHZtLmRldGFpbHMuZGlzcGF0Y2hOdW0gPCA4ICYmIF8uaXNFbXB0eSh2bS5zdHJpa2VUZWFtcykpIHsgdm0ucXVpY2tTdGFydCA9IHRydWUgIH07IFxuXHRcdFx0XHR9KTsgXG5cdFx0XHR9O1xuXHRcdH0pO1xuXG5cdFx0U29ja2V0U3ZjLm9uKCduZXdTdCcsIGZ1bmN0aW9uKHN0KXtcblx0XHRcdGlmICh2bS5BQ0NFU1NMRVZFTCA+IDEgJiYgYW5ndWxhci5lcXVhbHMoJHN0YXRlUGFyYW1zLmNhc2VJZCxzdC5jYXNlSWQpICkge1xuXHRcdFx0XHRcdHZtLnN0cmlrZVRlYW1zLnB1c2goc3QpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aWYgKGFuZ3VsYXIuZXF1YWxzKEJSQU5DSCxzdC5icmFuY2gpICYmIGFuZ3VsYXIuZXF1YWxzKCRzdGF0ZVBhcmFtcy5jYXNlSWQsc3QuY2FzZUlkKSApIHtcblx0XHRcdFx0XHR2bS5zdHJpa2VUZWFtcy5wdXNoKHN0KTtcblx0XHRcdFx0fTtcblx0XHRcdH07XG5cdFx0fSk7XG5cblx0XHRTb2NrZXRTdmMub24oJ3VwZGF0ZVN0JywgZnVuY3Rpb24oZGF0YSl7XG5cdFx0XHR2YXIgbWVtYmVycyA9IGFuZ3VsYXIuY29weShkYXRhLm1lbWJlcnMpO1xuXHRcdFx0Zm9yICh2YXIgaSA9IHZtLnN0cmlrZVRlYW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdGlmKGFuZ3VsYXIuZXF1YWxzKHZtLnN0cmlrZVRlYW1zW2ldLl9pZCxkYXRhLmlkKSl7XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXNbaV0ucG9zaXRpb24gXHQ9IGRhdGEucG9zaXRpb247XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXNbaV0uYXJlYSBcdFx0PSBkYXRhLmFyZWE7XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXNbaV0uZmxvb3IgXHQ9IGRhdGEuZmxvb3I7XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXNbaV0ubWlzc2lvbiBcdD0gZGF0YS5taXNzaW9uO1xuXHRcdFx0XHR9O1xuXHRcdFx0fTtcblx0XHR9KVxuXG5cdFx0U29ja2V0U3ZjLm9uKCdkaXNtaXNzJywgZnVuY3Rpb24oc3Qpe1xuXHRcdFx0dmFyIF9zdElkID0gc3Quc3RJZDtcblx0XHRcdHZtLnN0cmlrZVRlYW1zID0gdm0uc3RyaWtlVGVhbXMuZmlsdGVyKGZ1bmN0aW9uKHN0KSB7XHRcdFx0XHRcblx0XHRcdFx0cmV0dXJuIHN0Ll9pZCAhPSBfc3RJZDtcblx0XHRcdH0pO1xuXHRcdH0pO1xuXHRcdFxuXHRcdGZ1bmN0aW9uIHN0cmlrZVRlYW0oKXtcblx0XHRcdHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xuXHRcdFx0ICBcdHRlbXBsYXRlVXJsOiAndmlld3Mvc2FmZXR5L3NhZmV0eS5tb2RhbC5odG1sJyxcblx0XHRcdCAgICBjb250cm9sbGVyOiAnU2FmZXR5TW9kYWxDdHJsJyxcblx0XHRcdCAgICBzaXplOiBcIm1kXCIsXG5cdFx0XHQgICAgcmVzb2x2ZSA6IHtcblx0XHRcdCAgICBcdHN0SWQgOiBmdW5jdGlvbigpe1xuXHRcdFx0ICAgIFx0XHRpZiAoIF8uaXNFbXB0eSh2bS5zdHJpa2VUZWFtcykpIHtcblx0XHRcdCAgICBcdFx0XHRyZXR1cm4gMFxuXHRcdFx0ICAgIFx0XHR9IGVsc2V7XG5cdFx0XHQgICAgXHRcdFx0cmV0dXJuIHZtLnN0cmlrZVRlYW1zW3ZtLnN0cmlrZVRlYW1zLmxlbmd0aC0xXS5pZDtcblx0XHRcdCAgICBcdFx0fTtcblx0XHRcdCAgICBcdH0sXG5cdFx0XHQgICAgXHRicmFuY2ggOiBmdW5jdGlvbigpe1xuXHRcdFx0ICAgIFx0XHRyZXR1cm4gdm0uYnJhbmNoT3B0aW9ucy5icmFuY2g7XG5cdFx0XHQgICAgXHR9LFxuXHRcdFx0ICAgIFx0Y2FzZURldGFpbCA6IGZ1bmN0aW9uKCl7XG5cdFx0XHQgICAgXHRcdHJldHVybiBjYXNlRGV0YWlsXG5cdFx0XHQgICAgXHR9XG5cdFx0XHQgICAgfVxuXHRcdCAgICB9KTtcblx0XHR9O1xuXG5cdFx0XG5cdFx0ZnVuY3Rpb24gb3BlblNldHRpbmdNb2RhbChzdHJpa2VUZWFtLCBpZCl7XG5cdCAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XG5cdCAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAndmlld3Mvc2FmZXR5L3NhZmV0eS5zZXR0aW5nLm1vZGFsLmh0bWwnLFxuXHQgICAgICAgICAgICBjb250cm9sbGVyOiAnU2FmZXR5U2V0dGluZ0N0cmwnLFxuXHQgICAgICAgICAgICBzaXplOiBcImxnXCIsXG5cdCAgICAgICAgICAgIHJlc29sdmU6IHtcblx0ICAgICAgICAgICAgICAgIHN0cmlrZVRlYW0gOiBmdW5jdGlvbigpe1xuXHQgICAgICAgICAgICAgICAgICAgIHJldHVybiBzdHJpa2VUZWFtO1xuXHQgICAgICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIGNhc2VEZXRhaWwgOiBmdW5jdGlvbigpe1xuXHQgICAgICAgICAgICAgICAgXHRyZXR1cm4gY2FzZURldGFpbDtcblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgfTtcblxuXHRcdFxuXHRcdGZ1bmN0aW9uIGRpc21pc3Moc3RyaWtlVGVhbSAsIGlkKXtcblxuXHRcdFx0U29ja2V0U3ZjLmVtaXQoXCJkaXNtaXNzU3RyaWtlVGVhbVwiLHtcblx0XHRcdFx0aWQgOiBzdHJpa2VUZWFtLl9pZCxcblx0XHRcdFx0bWVtYmVycyA6IHN0cmlrZVRlYW0ubWVtYmVycyBcblx0XHRcdH0pO1xuXHQgICAgICAgXHR2bS5zdHJpa2VUZWFtcy5zcGxpY2UoaWQsMSk7XG5cdFx0fTtcblxuXHRcdFxuXHRcdGZ1bmN0aW9uIHF1aWNrT3JnYW5pemluZygpe1xuXHRcdFx0dm0ucXVpY2tTdGFydCA9IGZhbHNlO1xuXHRcdFxuXHRcdFx0dmFyIG1lbWJlcnMgPSAgdm0uZGV0YWlscy5tZW1iZXJzLmZpbHRlcihmdW5jdGlvbihtZW1iZXIpIHtcblx0XHRcdFx0aWYgKCBtZW1iZXIubWlzc2lvbiA9PSAn5Y+45qmfJyB8fCBtZW1iZXIubWlzc2lvbiA9PSAn5a6J5YWo566h5Yi25ZOhJyB8fCBtZW1iZXIubWlzc2lvbiA9PSAn5pWR6K235Lq65ZOhJykge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZSAgXG5cdFx0XHRcdH1lbHNlIHtcblx0XHRcdFx0XHRtZW1iZXIuaXNDaGVja2VkID0gdHJ1ZTtcblx0XHRcdFx0XHRyZXR1cm4gbWVtYmVyLm9uRHV0eTtcblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cblx0XHRcdHZhciBzdHJpa2VUZWFtID0ge1xuXHRcdFx0XHRpZCBcdFx0ICA6IDEsXG5cdFx0XHRcdGNhc2VJZCBcdCAgOiBjYXNlRGV0YWlsLl9pZCxcblx0XHRcdFx0YnJhbmNoIFx0ICA6IFVzZXJTdmMudXNlckJyYW5jaCgpLFxuXHRcdFx0XHRkaXJlY3RvciAgOiBfLnBsdWNrKG1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uKG1lbWJlcikgeyByZXR1cm4gbWVtYmVyLm1pc3Npb24gPT0gJ+W4tumaiuWumCd9KSwnbmFtZScpWzBdLFxuXHRcdFx0XHRwb3NpdGlvbiAgOiBTdE1pc3Npb25GYWMucG9zaXRpb24oKS5kZWZhdWx0UG9zLFxuXHRcdFx0XHRwb3NpdGlvbnMgOiBTdE1pc3Npb25GYWMucG9zaXRpb24oKS5wb3NzLFxuXHRcdFx0XHRncm91cCAgICAgOiBTdE1pc3Npb25GYWMuZ3JvdXBzKCkuYnJhbmNoWzFdLFxuXHRcdFx0XHRncm91cHMgICAgOiBTdE1pc3Npb25GYWMuZ3JvdXBzKCkuYnJhbmNoLFxuXHRcdFx0XHRhcmVhIFx0ICA6IFN0TWlzc2lvbkZhYy5hcmVhKCkuZGVmYXVsdEFyZWEsXG5cdFx0XHRcdGFyZWFzIFx0ICA6IFN0TWlzc2lvbkZhYy5hcmVhKCkuYXJlYXMsXG5cdFx0XHRcdGZsb29yIFx0ICA6IDEsIFxuXHRcdFx0XHRmbG9vcnMgICAgOiBbMSwyLDMsNCw1XSxcblx0XHRcdFx0bWVtYmVySWRzIDogXy5wbHVjayhtZW1iZXJzLCdfaWQnKSxcblx0XHRcdFx0bWVtYmVycyAgIDogbWVtYmVycyxcblx0XHRcdFx0Y3JlYXRvciAgIDogVXNlclN2Yy5jdXJyZW50VXNlcigpLFxuXHRcdFx0fTtcblx0ICAgICAgXHRTb2NrZXRTdmMuZW1pdChcImNyZWF0ZVN0cmlrZVRlYW1cIiwgc3RyaWtlVGVhbSk7XG5cdFx0fTtcblxuXHRcdHZtLiRvbignJGRlc3Ryb3knLCBmdW5jdGlvbiAoZXZlbnQpIHtcblx0ICAgICAgICBTb2NrZXRTdmMucmVtb3ZlQWxsTGlzdGVuZXJzKCk7XG5cdCAgICB9KVxuXHR9XG59KSgpOyIsIihmdW5jdGlvbigpe1xuXHQndXNlIHN0cmljdCc7XG5cdC8qKlxuXHQqIGFwcC5zYWZldHkgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLnNhZmV0eScpXG5cdFx0LmNvbnRyb2xsZXIoJ01lbWJlck1vZGFsQ29udHJvbGxlcicsTWVtYmVyTW9kYWxDb250cm9sbGVyKTtcblxuXHRNZW1iZXJNb2RhbENvbnRyb2xsZXIuJGluamVjdCA9IFsnYnJhbmNoJywgJ01lbWJlclN2YycsICckbW9kYWxJbnN0YW5jZScsICckc3RhdGUnLCAnbWVtYmVyJywnQnJhbmNoU3ZjJywgJ1VzZXJTdmMnXTtcblx0ZnVuY3Rpb24gTWVtYmVyTW9kYWxDb250cm9sbGVyKCl7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cdFx0dm0uYWxlcnRzID0gW107XG5cdFx0dm0uaXNOZXcgPSBfLmlzTnVsbChtZW1iZXIud29ya2luZ1RpbWUpO1xuXHRcdHZtLnNhdmUgPSBzYXZlO1xuXHRcdHZtLnVwZGF0ZSA9IHVwZGF0ZTsgXG5cdFx0dm0uY2FuY2VsID0gY2FuY2VsOyAgXG5cblx0XHR2bS5tZW1iZXIgPSB7XG5cdFx0XHRpZCBcdFx0IFx0OiBtZW1iZXIuaWQgfHwgIFwiXCIsIFxuXHRcdFx0bmFtZSBcdCBcdDogbWVtYmVyLm5hbWUgfHwgbnVsbCAsIFxuXHRcdFx0dGl0bGUgICAgXHQ6IFwi5raI6Ziy6ZqK5ZOhXCIsXG5cdFx0XHR0aXRsZXMgICBcdDogW1wi5raI6Ziy6ZqK5ZOhXCIsXCLlsI/pmorplbdcIixcIuWIhumaiumVt1wiLFwi5Lit6ZqK6ZW3XCIsXCLlpKfpmorplbdcIixcIuWJr+Wkp+maiumVt1wiXSxcblx0XHRcdGJyYW5jaCAgIFx0OiBtZW1iZXIuYnJhbmNoIHx8IGJyYW5jaCxcblx0XHRcdHdvcmtpbmdUaW1lIDogbWVtYmVyLndvcmtpbmdUaW1lIHx8ICAxMjAwLFxuXHRcdFx0cmFkaW9Db2RlIFx0OiBtZW1iZXIucmFkaW9Db2RlIHx8ICBudWxsLCBcblx0XHRcdG1pc3Npb24gIFx0OiBcIueehOWtkOaJi1wiLFxuXHRcdFx0bWlzc2lvbnMgXHQ6IFtcIueehOWtkOaJi1wiLFwi5Ymv556E5a2Q5omLXCIsXCLlj7jmqZ9cIixcIuWwj+e1hOmVt1wiLFwi5a6J5YWo566h5Yi25ZOhXCIsXCLoga/ntaHlrphcIixdLFxuXHRcdFx0Y29ycHNcdCBcdDogVXNlclN2Yy51c2VyQ29ycHMoKSxcblx0XHRcdGNvcnBzcyBcdCBcdDogW1wi56ys5LiA5pWR54G95pWR6K235aSn6ZqKXCIsXCLnrKzkuInmlZHngb3mlZHorbflpKfpmopcIl0sXG5cdFx0fTtcblxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5Q29ycHMoVXNlclN2Yy51c2VyQ29ycHMoKSkuc3VjY2VzcyhmdW5jdGlvbihicmFuY2hlcyl7XG5cdFx0XHR2bS5icmFuY2hlcyA9IGJyYW5jaGVzOyBcblx0XHRcdGlmICghdm0uaXNOZXcpIHtcblx0XHRcdFx0dmFyIGJyYW5jaEFycnkgPSBbXTtcblx0XHRcdFx0Zm9yICh2YXIgaSA9IGJyYW5jaGVzLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdFx0YnJhbmNoQXJyeS5wdXNoKGJyYW5jaGVzW2ldLm5hbWUpO1xuXHRcdFx0XHR9O1xuXHRcdFx0XHR2bS5tZW1iZXIuYnJhbmNoZXMgPSBicmFuY2hBcnJ5O1xuXHRcdFx0fTsgXG5cdFx0fSk7XG5cblx0XHR2YXIgcmFkaW9Db2RlUHJlZml4ID0gZnVuY3Rpb24oYnJhbmNoKXtcblx0XHRcdHZhciBzdWZmaXggPSAgYnJhbmNoLnNwbGl0KCcnKS5zbGljZSgtMikuam9pbignJyk7XG5cdFx0XHRpZiAoc3VmZml4ID09IFwi5aSn6ZqKXCIgfHwgc3VmZml4ID09IFwi5Lit6ZqKXCIpIHtcblx0XHRcdFx0cmV0dXJuIFwi5YyX5rW3XCI7XG5cdFx0XHR9IGVsc2V7XG5cdFx0XHRcdHJldHVybiBicmFuY2guc3BsaXQoJycpLnNsaWNlKDAsMikuam9pbignJyk7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBzYXZlKCl7XG5cdFx0XHRpZiAodm0ubWVtYmVyLm5hbWUpIHtcblx0XHRcdFx0dm0ubWVtYmVyLnJhZGlvQ29kZVByZWZpeCA9IHJhZGlvQ29kZVByZWZpeCh2bS5tZW1iZXIuYnJhbmNoKTtcblx0XHRcdFx0TWVtYmVyU3ZjLmNyZWF0ZSh2bS5tZW1iZXIpLnN1Y2Nlc3MoZnVuY3Rpb24oKXtcblx0XHRcdFx0XHR2bS5tZW1iZXIud29ya2luZ1RpbWUgPSBtb21lbnQuZHVyYXRpb24ocGFyc2VJbnQodm0ubWVtYmVyLndvcmtpbmdUaW1lKSwnc2Vjb25kcycpO1xuXHRcdFx0XHR9KS50aGVuKGZ1bmN0aW9uKCl7XG5cdFx0XHRcdFx0JG1vZGFsSW5zdGFuY2UuY2xvc2Uodm0ubWVtYmVyKTtcblx0XHRcdFx0fSlcblx0XHRcdH07XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZSgpe1xuXHRcdFx0dmFyIHVwZGF0ZU1lbWJlciA9IHtcblx0XHRcdFx0ICBtZW1iZXJJZCAgOiBtZW1iZXIubWVtYmVySWQsXG5cdFx0XHRcdCAgaWQgXHRcdDogXCJcIixcblx0XHRcdFx0ICBuYW1lIFx0XHQ6IHZtLm1lbWJlci5uYW1lLFxuXHRcdFx0XHQgIGNvcnBzIFx0OiB2bS5tZW1iZXIuY29ycHMsXG5cdFx0XHRcdCAgYnJhbmNoIFx0OiB2bS5tZW1iZXIuYnJhbmNoLFxuXHRcdFx0XHQgIHRpdGxlIFx0OiB2bS5tZW1iZXIudGl0bGUsXG5cdFx0XHRcdCAgd29ya2luZ1RpbWUgOiB2bS5tZW1iZXIud29ya2luZ1RpbWUsXG5cdFx0XHRcdCAgcmFkaW9Db2RlICA6IHZtLm1lbWJlci5yYWRpb0NvZGUsXG5cdFx0XHRcdCAgcmFkaW9Db2RlUHJlZml4IDogcmFkaW9Db2RlUHJlZml4KHZtLm1lbWJlci5icmFuY2gpXG5cdFx0XHR9XG5cblx0XHRcdGlmICh2bS5tZW1iZXIubmFtZSkge1xuXHRcdFx0XHRNZW1iZXJTdmMudXBkYXRlQnlNZW1iZXJJZCh1cGRhdGVNZW1iZXIpO1xuXHRcdFx0XHQkbW9kYWxJbnN0YW5jZS5jbG9zZSh1cGRhdGVNZW1iZXIpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBjYW5jZWwoKXtcblx0XHRcdCRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xuXHRcdH07XG5cdH1cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnNhZmV0eSBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuc2FmZXR5Jylcblx0XHQuY29udHJvbGxlcignU2FmZXR5U2V0dGluZ0NvbnRyb2xsZXInLFNhZmV0eVNldHRpbmdDb250cm9sbGVyKTtcblxuXHRTYWZldHlTZXR0aW5nQ29udHJvbGxlci4kaW5qZWN0ID0gWydzdHJpa2VUZWFtJywgJyRtb2RhbEluc3RhbmNlJywgJ1N0U3ZjJywgJyRzdGF0ZScsICdNZW1iZXJTdmMnLCAnQ2FzZVN2YycsICckc3RhdGVQYXJhbXMnLCAnU29ja2V0U3ZjJywgJ2Nhc2VEZXRhaWwnXTtcblx0XG5cdGZ1bmN0aW9uIFNhZmV0eVNldHRpbmdDb250cm9sbGVyKHN0cmlrZVRlYW0sICRtb2RhbEluc3RhbmNlLCBTdFN2YywgJHN0YXRlLCBNZW1iZXJTdmMsIENhc2VTdmMsICRzdGF0ZVBhcmFtcywgU29ja2V0U3ZjLCBjYXNlRGV0YWlsKXtcblx0XHR2YXIgdm0gPSB0aGlzOyBcblx0XHR2bS5zdHJpa2VUZWFtID0gc3RyaWtlVGVhbTtcblx0XHR2bS5jaG9vc2VCcmFuY2ggPSBjaG9vc2VCcmFuY2g7XG5cdFx0dm0uY2FuY2VsID0gY2FuY2VsO1xuXHRcdHZtLmNoZWNrID0gY2hlY2s7XG5cdFx0dm0udW5jaGVjayA9IHVuY2hlY2s7XG5cdFx0dm0uc2F2ZSA9IHNhdmU7ICAgXG5cdFx0Y2FzZURldGFpbC5lbnYgPT0gJ+S9j+WuheeBq+itpic/IHZtLmFwYXJ0bWVudCA9ICB0cnVlICA6IHZtLmFwYXJ0bWVudCA9IGZhbHNlIFxuXG5cdFx0dmFyIG5ld01lbWJlcnMgPSBbXTtcblxuXHRcdENhc2VTdmMuZmV0Y2hEZXRhaWxzKCRzdGF0ZVBhcmFtcy5jYXNlSWQpLnN1Y2Nlc3MoZnVuY3Rpb24oZGV0YWlscyl7XG5cdFx0XHR2bS5kaXNwYXRjaCA9IGRldGFpbHMuYnJhbmNoSWRzO1xuXHRcdFx0dm0uY3VycmVudEJyYW5jaCA9IHZtLmRpc3BhdGNoWzBdLm5hbWU7XG5cdFx0XHR2YXIgbWVtYmVyTGlzdCA9IF8ucGx1Y2soZGV0YWlscy5icmFuY2hJZHMsJ21lbWJlcnMnKTtcblx0XHRcdHZtLm1lbWJlcnMgPSBbXVxuXHRcdFx0bWVtYmVyTGlzdC5mb3JFYWNoKGZ1bmN0aW9uKGJyYW5jaE1lbWJlcnMpe1xuXHRcdFx0XHR2bS5tZW1iZXJzLnB1c2guYXBwbHkodm0ubWVtYmVycywgYnJhbmNoTWVtYmVycylcblx0XHRcdH0pO1xuXHRcdFx0dm0ubWVtYmVycyA9IHZtLm1lbWJlcnMuZmlsdGVyKGZ1bmN0aW9uKG1lbWJlcikgeyByZXR1cm4gIW1lbWJlci5pc0NoZWNrZWQgfSk7XG5cdFx0fSlcblxuXHRcdGZ1bmN0aW9uIGNob29zZUJyYW5jaChicmFuY2gpe1xuXHRcdFx0dm0uY3VycmVudEJyYW5jaCA9IGJyYW5jaDtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gY2FuY2VsKCl7XG5cdFx0XHQkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gY2hlY2sobWVtYmVyKXtcblx0XHRcdG1lbWJlci5pc0NoZWNrZWQgPSAhbWVtYmVyLmlzQ2hlY2tlZDtcblx0XHRcdG5ld01lbWJlcnMucHVzaChtZW1iZXIpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiB1bmNoZWNrKG1lbWJlciwgaWQpe1xuXHRcdFx0bWVtYmVyLmlzQ2hlY2tlZCA9ICFtZW1iZXIuaXNDaGVja2VkO1xuXHRcdFx0bmV3TWVtYmVycy5zcGxpY2UoXy5wbHVjayhuZXdNZW1iZXJzLCAnX2lkJykuaW5kZXhPZihtZW1iZXIuX2lkKSwxKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gc2F2ZSgpe1xuXHRcdFx0dm0uc3RyaWtlVGVhbS5tZW1iZXJzLnB1c2guYXBwbHkodm0uc3RyaWtlVGVhbS5tZW1iZXJzLCBuZXdNZW1iZXJzKTtcblx0XHRcdFNvY2tldFN2Yy5lbWl0KCd1cGRhdGVTdHJpa2VUZWFtJyx7XG5cdFx0XHRcdGlkIDogc3RyaWtlVGVhbS5faWQsIFxuXHRcdFx0XHRwb3NpdGlvbiA6IHN0cmlrZVRlYW0ucG9zaXRpb24sXG5cdFx0XHRcdGFyZWEgOiBzdHJpa2VUZWFtLmFyZWEsIFxuXHRcdFx0XHRmbG9vciA6IHN0cmlrZVRlYW0uZmxvb3IsXG5cdFx0XHRcdGdyb3VwIDogc3RyaWtlVGVhbS5ncm91cCxcblx0XHRcdFx0bWVtYmVySWRzIDogXy5wbHVjayh2bS5zdHJpa2VUZWFtLm1lbWJlcnMsJ19pZCcpLCBcblx0XHRcdFx0bWVtYmVycyA6IHZtLnN0cmlrZVRlYW0ubWVtYmVyc1xuXHRcdFx0fSk7XG5cblx0XHRcdCRtb2RhbEluc3RhbmNlLmNsb3NlKCdkaXNtaXNzJyk7XHRcdFx0XG5cdFx0fTtcblx0fTtcblxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAuc2FmZXR5IE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5zYWZldHknKVxuXHRcdC5jb250cm9sbGVyKCdTYWZldHlTaG93Q29udHJvbGxlcicsU2FmZXR5U2hvd0NvbnRyb2xsZXIpO1xuXG5cdFNhZmV0eVNob3dDb250cm9sbGVyLiRpbmplY3QgPSBbJ0Nhc2VTdmMnLCAnVXNlclN2YycsICdTb2NrZXRTdmMnLCdHZW9TdmMnLCAnQnJhbmNoU3ZjJywgJyRzdGF0ZVBhcmFtcyddO1xuXG5cdGZ1bmN0aW9uIFNhZmV0eVNob3dDb250cm9sbGVyKCl7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cdFx0dmFyIGJyYW5jaCA9IFVzZXJTdmMudXNlckJyYW5jaCgpO1xuXHRcdFxuXHRcdEJyYW5jaFN2Yy5mZXRjaEJ5TmFtZShicmFuY2gpLnN1Y2Nlc3MoZnVuY3Rpb24oYnJhbmNoKXtcblx0XHRcdHZtLm1lbWJlcnMgPSBicmFuY2gubWVtYmVycy5maWx0ZXIoZnVuY3Rpb24obWVtYmVyKSB7XG5cdFx0XHRcdG1lbWJlci5saW1pdFRpbWUgPSBtb21lbnQuZHVyYXRpb24obWVtYmVyLndvcmtpbmdUaW1lLCAnc2Vjb25kcycpO1xuXHRcdFx0XHRyZXR1cm4gbWVtYmVyLm9uRHV0eSA9PSB0cnVlIFxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cblx0XHRDYXNlU3ZjLmZldGNoRGV0YWlscygkc3RhdGVQYXJhbXMuY2FzZUlkKS5zdWNjZXNzKGZ1bmN0aW9uKF9jYXNlKXtcblx0XHRcdHZtLmNhc2VEZXRhaWwgPSBfY2FzZTtcblx0XHRcdGlmIChfY2FzZS5sb2NhdGlvbikge1xuXHRcdFx0XHR2YXIgbG9jYXRpb24gPSBKU09OLnBhcnNlKF9jYXNlLmxvY2F0aW9uKTtcblx0XHRcdFx0dm0ubWFya2Vycy5tYWluTWFya2VyID0ge1xuXHRcdFx0XHRcdGxhdCA6IE51bWJlcihsb2NhdGlvbi5sYXQpLFxuXHRcdFx0XHRcdGxuZyA6IE51bWJlcihsb2NhdGlvbi5sbmcpLFxuXHRcdFx0XHRcdG1lc3NhZ2UgOiBcIuahiOS7tuaomeeahFwiXG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXHRcdH0pO1xuXG4gICAgICAgR2VvU3ZjLmdldEdlb2xvY2F0aW9uQ29vcmRpbmF0ZXMoKS50aGVuKGZ1bmN0aW9uKGNvb3JkKXtcblx0ICAgICAgICB2bS5ub3dQb3MubGF0ID0gY29vcmQubGF0aXR1ZGU7XG5cdCAgICAgICAgdm0ubm93UG9zLmxuZyA9IGNvb3JkLmxvbmdpdHVkZTtcblx0ICAgICAgICB2bS5ub3dQb3Muem9vbSA9IDE3O1xuXHQgICAgICAgIHZtLm1hcmtlcnMubm93UG9zID17XG5cdCAgICAgICAgXHRsYXQgOiB2bS5ub3dQb3MubGF0LFxuXHQgICAgICAgIFx0bG5nIDogdm0ubm93UG9zLmxuZyxcblx0ICAgICAgICBcdG1lc3NhZ2UgOiBcIuePvuWcqOS9jee9rlwiXG5cdCAgICAgICAgfVxuXHQgICAgfSlcblxuXHQgICAgYW5ndWxhci5leHRlbmQodm0sIHtcblx0ICAgICAgICBub3dQb3M6IHtcblx0ICAgICAgICAgICAgbGF0OiAyNC45ODgsXG5cdCAgICAgICAgICAgIGxuZzogMTIxLjU3NTIsXG5cdCAgICAgICAgICAgIHpvb206IDEzXG5cdCAgICAgICAgfSxcblx0ICAgICAgICBtYXJrZXJzOiB7fSxcblx0ICAgIH0pO1x0XHRcblx0fVxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAuc29ja2V0IE1vZHVsZVxuXHQqXG5cdCogRGVzY3JpcHRpb25cblx0Ki9cblx0YW5ndWxhclxuXHRcdC5tb2R1bGUoJ2FwcC5zb2NrZXQnKVxuXHRcdC5zZXJ2aWNlKCdTb2NrZXRTdmMnLFNvY2tldFN2Yyk7XG5cblx0U29ja2V0U3ZjLiRpbmplY3QgPSBbJyRyb290U2NvcGUnLCAnc3RvcmUnLCAnJHEnLCAnJHRpbWVvdXQnXTtcblx0XG5cdGZ1bmN0aW9uIFNvY2tldFN2Yygkcm9vdFNjb3BlLCBzdG9yZSwgJHEsICR0aW1lb3V0KXtcblx0XHR2YXIgc3ZjID0gdGhpczsgXG5cdFx0c3ZjLmluaXQgPSAgZnVuY3Rpb24odG9rZW4pe1xuXHQgICAgXHR2YXIgYXV0aFRva2VuID0gbnVsbFxuXHQgICAgXHRpZiAodG9rZW4pIHtcblx0XHQgICAgICBhdXRoVG9rZW4gPSB0b2tlbiBcblx0XHRcdH0gZWxzZSB7XG5cdFx0ICAgICAgYXV0aFRva2VuID0gc3RvcmUuZ2V0KCdqd3QnKVxuXHRcdCAgICB9O1xuXHRcdCAgICByZXR1cm4gaW8uY29ubmVjdCgnaHR0cDovL2xvY2FsaG9zdDozMDAwJyx7IHF1ZXJ5IDogJ3Rva2VuPScgKyBhdXRoVG9rZW4gLCAnZm9yY2VOZXcnOnRydWUgfSk7XG5cdFx0fVxuXG5cdCAgXHR2YXIgc29ja2V0ID0gc3ZjLmluaXQoKTtcblxuXHQgIFx0c3ZjLm9uID0gIGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XG5cdCAgICBcdHN2Yy5pbml0KCkub24oZXZlbnROYW1lLCBmdW5jdGlvbiAoKSB7ICBcblx0XHQgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHQgICAgICAkcm9vdFNjb3BlLiRhcHBseShmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICBjYWxsYmFjay5hcHBseShzb2NrZXQsIGFyZ3MpO1xuXHRcdCAgICAgIH0pO1xuXHRcdCAgICB9KTtcblx0XHR9O1xuXG5cdCAgXHRzdmMuZW1pdCA9ICBmdW5jdGlvbiAoZXZlbnROYW1lLCBkYXRhLCBjYWxsYmFjaykge1xuXHQgICAgXHRzdmMuaW5pdCgpLmVtaXQoZXZlbnROYW1lLCBkYXRhLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIFx0XHR2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0ICAgICAgXHRcdCRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBcdFx0aWYgKGNhbGxiYWNrKSB7XG5cdCAgICAgICAgICBcdFx0XHRjYWxsYmFjay5hcHBseShzb2NrZXQsIGFyZ3MpO1xuXHQgICAgICAgIFx0XHR9O1xuXHQgICAgICBcdFx0fSk7XG5cdCAgICBcdH0pXG5cdCAgXHR9O1xuXG5cdFx0c3ZjLnJlbW92ZUFsbExpc3RlbmVycyA9IGZ1bmN0aW9uIChldmVudE5hbWUsIGNhbGxiYWNrKSB7XG5cdFx0ICAgIHN2Yy5pbml0KCkucmVtb3ZlQWxsTGlzdGVuZXJzKGV2ZW50TmFtZSwgZnVuY3Rpb24oKSB7XG5cdFx0ICAgICAgICB2YXIgYXJncyA9IGFyZ3VtZW50cztcblx0XHQgICAgICAgICRyb290U2NvcGUuJGFwcGx5KGZ1bmN0aW9uICgpIHtcblx0XHQgICAgICAgICAgY2FsbGJhY2suYXBwbHkoc29ja2V0LCBhcmdzKTtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9KTsgXG5cdFx0fTtcblx0fTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnN0cmlrZVRlYW0gTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLnN0cmlrZVRlYW0nLCBbXSlcblx0XHQuZmFjdG9yeSgnU3RNaXNzaW9uRmFjJyxTdE1pc3Npb25GYWMpO1xuXG5cdFN0TWlzc2lvbkZhYy4kaW5qZWN0ID0gW107XG5cdGZ1bmN0aW9uIFN0TWlzc2lvbkZhYygpe1xuXHRcdHJldHVybiB7XG5cdFx0XHRncm91cHM6IGZ1bmN0aW9uKCl7XG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0Y29ycHMgOiBbIFwi6IGv57Wh57WEXCIgLCBcIuawtOa6kOe1hFwiICwgXCLlvozli6TntYRcIl0sXG5cdFx0XHRcdFx0c3F1YWRyb24gOiBbXCJcIl0sXG5cdFx0XHRcdFx0YnJhbmNoIDogW1wi5bi26ZqK5a6YXCIsXCLmu4XngavlsI/ntYRcIixcIuaQnOaVkeWwj+e1hFwiLFwi5pC25pWR5bCP57WEXCIsXCLlvozli6TlsI/ntYRcIl0sXG5cdFx0XHRcdFx0cHJlU3QgIDogW1wi5pCc5pWR5bCP57WEXCIsXCLmkLbmlZHlsI/ntYRcIixcIua7heeBq+Wwj+e1hFwiXVxuXHRcdFx0XHR9XG5cdFx0XHR9LFxuXHRcdFx0cG9zaXRpb24gOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGRlZmF1bHRQb3MgOiBcIuesrOS4gOmdolwiLFxuXHRcdFx0XHRcdHBvc3MgOiBbXCLnrKzkuIDpnaJcIixcIuesrOS6jOmdolwiLFwi56ys5LiJ6Z2iXCIsXCLnrKzlm5vpnaJcIl1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGFyZWEgOiBmdW5jdGlvbigpe1xuXHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdGRlZmF1bHRBcmVhIDogXCLnrKzkuIDljYBcIixcblx0XHRcdFx0XHRhcmVhcyA6IFtcIuesrOS4gOWNgFwiLFwi56ys5LqM5Y2AXCIsXCLnrKzkuInljYBcIixcIuesrOWbm+WNgFwiLFwi56ys5LqU5Y2AXCJdXG5cdFx0XHRcdH07XG5cdFx0XHR9XG5cdFx0fTtcblx0fTtcbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnN0cmlrVGVhbSBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAuc3RyaWtUZWFtJylcblx0XHQuc2VyaXZjZSgnU3RTdmMnLFN0U3ZjKTtcblx0XHRcblx0U3RTdmMuJGluamVjdCA9IFsnJGh0dHAnXTtcblxuXHRmdW5jdGlvbiBTdFN2Yygpe1xuXHRcdHZhciBzdmMgPSB0aGlzOyBcblx0XHRzdmMuZmV0Y2ggPSBmZXRjaDtcblx0XHRzdmMuZmV0Y2hCeUNhc2UgPSBmZXRjaEJ5Q2FzZTtcblx0XHRzdmMuZmluZEJ5SWQgPSBmaW5kQnlJZDtcblx0XHRzdmMuZGlzbWlzc1N0ID0gZGlzbWlzc1N0O1xuXHRcdHN2Yy51cGRhdGVTdCA9IHVwZGF0ZVN0O1xuXHRcdHN2Yy51cGRhdGVUaW1lUmVjb3JkID0gdXBkYXRlVGltZVJlY29yZDtcblx0XHRzdmMuY3JlYXRlID0gY3JlYXRlO1xuXHRcdHN2Yy5jb3VudCA9IGNvdW50OyBcblxuXHRcdGZ1bmN0aW9uIGZldGNoKGNhc2VJZCwgYnJhbmNoKXtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvc3RyaWtlVGVhbXM/Y2FzZUlkPScgKyBjYXNlSWQgKyAnJmJyYW5jaD0nICsgYnJhbmNoKTtcblx0XHR9O1xuXHRcblx0XHRmdW5jdGlvbiBmZXRjaEJ5Q2FzZShjYXNlSWQpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9zdHJpa2VUZWFtcy90b3RhbD9jYXNlSWQ9JyArIGNhc2VJZCk7XG5cdFx0fTtcblx0XHRcblx0XHRmdW5jdGlvbiBmaW5kQnlJZChjYXNlSWQpe1xuXHRcdFx0cmV0dXJuICRodHRwLmdldCgnL2FwaS9zdHJpa2VUZWFtcy8nICsgY2FzZUlkKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gZGlzbWlzc1N0KGRhdGEpe1xuXHRcdFx0cmV0dXJuICRodHRwLnB1dCgnL2FwaS9zdHJpa2VUZWFtcy9kaXNtaXNzP2lkPScgKyBkYXRhLmlkKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdXBkYXRlU3QoZGF0YSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL3N0cmlrZVRlYW1zL3VwZGF0ZT9pZD0nICsgZGF0YS5pZCwgZGF0YSk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIHVwZGF0ZVRpbWVSZWNvcmQoZGF0YSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucHV0KCcvYXBpL3N0cmlrZVRlYW1zL3RpbWU/aWQ9JyArIGRhdGEuaWQsIGRhdGEpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBjcmVhdGUoc3RyaWtlVGVhbSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAucG9zdCgnL2FwaS9zdHJpa2VUZWFtcycsIHN0cmlrZVRlYW0pO1xuXHRcdH07XG5cdFx0XG5cdFx0ZnVuY3Rpb24gY291bnQoY2FzZUlkKXtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvc3RyaWtlVGVhbXMvY291bnQ/Y2FzZUlkPScgKyBjYXNlSWQpO1xuXHRcdH07XG5cdH1cblxufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXG5cdC8qKlxuXHQqIGFwcC50aW1lciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAudGltZXInKVxuXHRcdC5jb250cm9sbGVyKCdUaW1lckNvbnRyb2xsZXInLFRpbWVyQ29udHJvbGxlcik7XG5cblx0VGltZXJDb250cm9sbGVyLiRpbmplY3QgPSBbJ1NvY2tldFN2YyddO1xuXG5cdGZ1bmN0aW9uIFRpbWVyQ29udHJvbGxlcigpe1xuXHRcdHZhciB2bSA9IHRoaXM7IFxuXHRcdHZtLnRpbWVyUnVubmluZyA9IGZhbHNlO1xuXHRcdHZtLnN0YXJ0VGltZXIgPSBzdGFydFRpbWVyO1xuXHRcdHZtLnN0b3BUaW1lciA9IHN0b3BUaW1lcjtcblx0ICAgIFxuXHQgICAgZnVuY3Rpb24gc3RhcnRUaW1lcihzdCwgaWQpe1xuXHQgICAgXHR2bS4kYnJvYWRjYXN0KCd0aW1lci1zdGFydCcpO1xuXHQgICAgXHR2bS50aW1lclJ1bm5pbmcgPSB0cnVlO1xuXHQgICAgICAgIFNvY2tldFN2Yy5lbWl0KCd0aW1lcicsIHsgc3RJZCA6IHN0Ll9pZCwgdGltZXJSdW5uaW5nIDogdHJ1ZSB9IClcblx0ICAgIH07XG5cdCAgICBcblx0ICAgIGZ1bmN0aW9uIHN0b3BUaW1lcihzdCxpZCl7XG5cdCAgICBcdHZtLiRicm9hZGNhc3QoJ3RpbWVyLXN0b3AnKTtcblx0ICAgIFx0dm0udGltZXJSdW5uaW5nID0gZmFsc2U7XG5cdCAgICAgICAgU29ja2V0U3ZjLmVtaXQoJ3RpbWVyJywgeyBzdElkIDogc3QuX2lkLCB0aW1lclJ1bm5pbmcgOiBmYWxzZSB9IClcblx0ICAgIH07XG5cdH07XG5cbn0pKCk7IiwiKGZ1bmN0aW9uKCl7XG5cdCd1c2Ugc3RyaWN0Jztcblx0LyoqXG5cdCogYXBwLnN1bW1hcnkgTW9kdWxlXG5cdCpcblx0KiBEZXNjcmlwdGlvblxuXHQqL1xuXHRhbmd1bGFyXG5cdFx0Lm1vZHVsZSgnYXBwLnN1bW1hcnknKVxuXHRcdC5jb250cm9sbGVyKCdTdW1tYXJ5Q29udHJvbGxlcicsU3VtbWFyeUNvbnRyb2xsZXIpO1xuXG5cdFN1bW1hcnlDb250cm9sbGVyLiRpbmplY3QgPSBbJ1N0U3ZjJywgJyRzdGF0ZVBhcmFtcycsICckaW50ZXJ2YWwnLCAnJHN0YXRlJywgJ1NvY2tldFN2YycsICdDYXNlU3ZjJ107XG5cdGZ1bmN0aW9uIFN1bW1hcnlDb250cm9sbGVyKCl7XG5cdFx0dmFyIHZtID0gdGhpczsgXG5cdFx0dm0uaXNDb2xsYXBzZWQgPSB0cnVlIDtcblx0XHR2bS5tZW1iZXJzID0gW107XG5cblx0XHRTb2NrZXRTdmMub24oJ3RpbWVyUnVubmluZycsZnVuY3Rpb24oc3Qpe1xuXHRcdFx0Zm9yICh2YXIgaSA9IHZtLnN0cmlrZVRlYW1zLmxlbmd0aCAtIDE7IGkgPj0gMDsgaS0tKSB7XG5cdFx0XHRcdGlmKCBhbmd1bGFyLmVxdWFscyh2bS5zdHJpa2VUZWFtc1tpXS5faWQsIHN0LnN0SWQpKXtcblx0XHRcdFx0XHRyZXR1cm4gdm0uc3RyaWtlVGVhbXNbaV0udGltZXJSdW5uaW5nID0gc3QudGltZXJSdW5uaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXHRcdH0pXG5cblx0XHRTb2NrZXRTdmMub24oJ3Byb2dyZXNzVXBkYXRlJyxmdW5jdGlvbihkYXRhKXtcblx0XHRcdGZvciAodmFyIGkgPSB2bS5zdHJpa2VUZWFtcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuXHRcdFx0XHRpZiggYW5ndWxhci5lcXVhbHModm0uc3RyaWtlVGVhbXNbaV0uX2lkLCBkYXRhLmlkKSApe1xuXHRcdFx0XHRcdHZtLnN0cmlrZVRlYW1zW2ldLnRpbWVyXHQ9IG1vbWVudC5kdXJhdGlvbihkYXRhLm1pbGxpcyk7IFxuXHRcdFx0XHRcdHZtLnN0cmlrZVRlYW1zW2ldLnByb2dyZXNzICA9IGRhdGEucHJvZ3Jlc3M7XG5cdFx0XHRcdFx0dm0uc3RyaWtlVGVhbXNbaV0ucHJvZ3Jlc3NTdGF0ZSA9ICBkYXRhLnByb2dyZXNzU3RhdGU7XG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0fSlcblxuXHRcdFNvY2tldFN2Yy5vbignbmV3U3QnLCBmdW5jdGlvbihzdCl7XG5cdFx0XHRpZiAoIGFuZ3VsYXIuZXF1YWxzKGNhc2VJZCxzdC5jYXNlSWQpKSB7XG5cdFx0XHRcdHZhciBuZXdTdCA9IGFuZ3VsYXIuY29weShzdCk7XG5cdFx0XHRcdHJldHVybiB2bS5zdHJpa2VUZWFtcy5wdXNoKG5ld1N0KTtcblx0XHRcdH07XG5cdFx0XHR2bS5kZXBsb3lzID0gaW5pdFRhYmxlKHZtLnN0cmlrZVRlYW1zKTtcblx0XHR9KTtcblxuXHRcdFxuXG5cdFx0U29ja2V0U3ZjLm9uKCd1cGRhdGVTdCcsIGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0U3RTdmMuZmV0Y2hCeUNhc2UoY2FzZUlkKS5zdWNjZXNzKGZ1bmN0aW9uKHN0cmlrZVRlYW1zKXtcblx0XHRcdFx0dm0uc3RyaWtlVGVhbXMgPSBzdHJpa2VUZWFtcztcblx0XHRcdFx0dm0uc3RyaWtlVGVhbXMuZm9yRWFjaChmdW5jdGlvbihzdCl7XG5cdFx0XHRcdFx0c3QubGltaXRUaW1lID0gbW9tZW50LmR1cmF0aW9uKHN0LndvcmtpbmdUaW1lLCdzZWNvbmRzJyk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0XHR2bS5kZXBsb3lzID0gaW5pdFRhYmxlKHZtLnN0cmlrZVRlYW1zKTtcblx0XHRcdH0pO1xuXG5cdFx0fSlcblxuXHRcdFNvY2tldFN2Yy5vbignZGlzbWlzcycsIGZ1bmN0aW9uKGRhdGEpe1xuXHRcdFx0U3RTdmMuZmV0Y2hCeUNhc2UoY2FzZUlkKS5zdWNjZXNzKGZ1bmN0aW9uKHN0cmlrZVRlYW1zKXtcblx0XHRcdFx0dm0uc3RyaWtlVGVhbXMgPSBzdHJpa2VUZWFtcztcblx0XHRcdFx0dm0uZGVwbG95cyA9IGluaXRUYWJsZSh2bS5zdHJpa2VUZWFtcyk7XG5cdFx0XHR9KTtcblx0XHR9KTtcblxuXG5cdFx0dmFyIGNhc2VJZCA9ICRzdGF0ZVBhcmFtcy5jYXNlSWQ7XG5cdFx0Q2FzZVN2Yy5mZXRjaEJ5SWQoY2FzZUlkKS5zdWNjZXNzKGZ1bmN0aW9uKF9jYXNlKXtcblx0XHRcdF9jYXNlLmVudiA9PSAn5L2P5a6F54Gr6K2mJyA/IHZtLmFwYXJ0bWVudCA9IHRydWUgOiB2bS5hcGFydG1lbnQgPSBmYWxzZTtcblx0XHRcdHZtLmNhc2VEZXRhaWwgPSBfY2FzZTtcblx0XHRcdHZtLnBvc2l0aW9uID0ge1xuXHRcdFx0XHRkZWZhdWx0UG9zIFx0OiBcIuesrOS4gOmdolwiLFxuXHRcdFx0XHRwb3NpdGlvbnMgXHQ6IFtcIuesrOS4gOmdolwiLFwi56ys5LqM6Z2iXCIsXCLnrKzkuInpnaJcIixcIuesrOWbm+mdolwiXSxcblx0XHRcdFx0Zmxvb3IgXHRcdDogdm0uY2FzZURldGFpbC5mbG9vcixcblx0XHRcdFx0Zmxvb3JzICBcdDogdm0uY2FzZURldGFpbC5mbG9vciA8IDU/IF8ucmFuZ2UoMSw2LDEpIDogXy5yYW5nZSh2bS5jYXNlRGV0YWlsLmZsb29yLTIsdm0uY2FzZURldGFpbC5mbG9vciszLDEpXG5cdFx0XHR9O1xuXHRcdH0pXG5cblx0XHRTdFN2Yy5mZXRjaEJ5Q2FzZShjYXNlSWQpLnN1Y2Nlc3MoZnVuY3Rpb24oc3RyaWtlVGVhbXMpe1xuXHRcdFx0aWYgKHN0cmlrZVRlYW1zKSB7XG5cdFx0XHRcdHZtLnN0cmlrZVRlYW1zID0gc3RyaWtlVGVhbXM7XG5cdFx0XHRcdHZtLnN0cmlrZVRlYW1zLmZvckVhY2goZnVuY3Rpb24oc3Qpe1xuXHRcdFx0XHRcdHN0LmxpbWl0VGltZSA9IG1vbWVudC5kdXJhdGlvbihzdC53b3JraW5nVGltZSwnc2Vjb25kcycpO1xuXHRcdFx0XHR9KTtcblx0XHRcdFx0dm0uZGVwbG95cyA9IGluaXRUYWJsZSh2bS5zdHJpa2VUZWFtcyk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRyZXR1cm4gXG5cdFx0XHR9O1xuXHRcdH0pO1xuXG5cblxuXHRcdHZhciBpbml0VGFibGUgPSAgZnVuY3Rpb24oc3RyaWtlVGVhbXMpe1xuXHRcdCAgXHR2YXIgZGVwbG95QXJyYXkgPSBfLnJhbmdlKDQpLm1hcChmdW5jdGlvbiAoKSB7XG5cdFx0ICAgICAgICByZXR1cm4gXy5yYW5nZSg1KS5tYXAoZnVuY3Rpb24gKCkge1xuXHRcdCAgICAgICAgICAgIHJldHVybiB7IHRvdGFsTWVtYmVyIDogMCwgc3RUb3RhbCA6IDAgLCBzdHMgOiBbXSB9IDtcblx0XHQgICAgICAgIH0pO1xuXHRcdCAgICB9KTtcblxuXHRcdFx0aWYgKCBzdHJpa2VUZWFtcyApe1xuXHRcdFx0XHRmb3IgKHZhciBpID0gc3RyaWtlVGVhbXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0pIHtcblx0XHRcdFx0XHR2YXIgdG90YWxNZW1iZXIgPSAwO1xuXHRcdFx0XHRcdHZhciB5ID0gbnVsbDtcblx0XHRcdFx0XHR2YXIgc3QgPSAwO1xuXHRcdFx0XHRcdHZhciB4ID0gXy5pbmRleE9mKHN0cmlrZVRlYW1zW2ldLnBvc2l0aW9ucywgc3RyaWtlVGVhbXNbaV0ucG9zaXRpb24pO1xuXHRcdFx0XHRcdHZtLmFwYXJ0bWVudCA/IHkgPSBfLmluZGV4T2Yoc3RyaWtlVGVhbXNbaV0uZmxvb3JzLCBzdHJpa2VUZWFtc1tpXS5mbG9vcikgOiB5ID0gXy5pbmRleE9mKHN0cmlrZVRlYW1zW2ldLmFyZWFzLCBzdHJpa2VUZWFtc1tpXS5hcmVhKVxuXHRcdFx0XHRcdGRlcGxveUFycmF5W3hdW3ldLnN0VG90YWwgKz0gMTtcblx0XHRcdFx0XHRkZXBsb3lBcnJheVt4XVt5XS50b3RhbE1lbWJlciArPSBzdHJpa2VUZWFtc1tpXS5tZW1iZXJzLmxlbmd0aDtcblx0XHRcdFx0XHR2YXIgc3RJbkZvID0ge307XG5cdFx0XHRcdFx0c3RJbkZvLmlkID0gc3RyaWtlVGVhbXNbaV0uYnJhbmNoICsgc3RyaWtlVGVhbXNbaV0uaWRcblx0XHRcdFx0XHRzdEluRm8ubnVtYmVyID0gc3RyaWtlVGVhbXNbaV0ubWVtYmVycy5sZW5ndGg7XG5cdFx0XHRcdFx0c3RJbkZvLmdyb3VwID0gc3RyaWtlVGVhbXNbaV0uZ3JvdXA7XG5cdFx0XHRcdFx0ZGVwbG95QXJyYXlbeF1beV0uc3RzLnB1c2goc3RJbkZvKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBkZXBsb3lBcnJheVxuXHRcdH07XG5cdFx0XG5cdFx0dm0uJG9uKCckZGVzdHJveScsIGZ1bmN0aW9uIChldmVudCkge1xuXHQgICAgICAgIFNvY2tldFN2Yy5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblx0ICAgIH0pO1xuXHR9O1xufSkoKTsiLCIoZnVuY3Rpb24oKXtcblx0J3VzZSBzdHJpY3QnO1xuXHQvKipcblx0KiBhcHAudXNlciBNb2R1bGVcblx0KlxuXHQqIERlc2NyaXB0aW9uXG5cdCovXG5cdGFuZ3VsYXJcblx0XHQubW9kdWxlKCdhcHAudXNlcicpXG5cdFx0LnNlcnZpY2UoJ1VzZXJTdmMnLFVzZXJTdmMpO1xuXG5cdFVzZXJTdmMuJGluamVjdCA9IFsnJGh0dHAnLCAnc3RvcmUnLCAnand0SGVscGVyJ107XG5cdGZ1bmN0aW9uIFVzZXJTdmMoKXtcblx0XHR2YXIgc3ZjID0gdGhpczsgXG5cdFx0c3ZjLmZldGNoT25saW5lVXNlciA9IGZldGNoT25saW5lVXNlcjtcblx0XHRzdmMuYWN0aXZhdGUgPSBhY3RpdmF0ZTtcblx0XHRzdmMucmVtb3ZlVXNlciA9IHJlbW92ZVVzZXI7XG5cdFx0c3ZjLmxvZ2luID0gbG9naW47XG5cdFx0c3ZjLmlzTG9nZ2VkSW4gPSBpc0xvZ2dlZEluO1xuXHRcdHN2Yy5pc1ZhbGlkID0gaXNWYWxpZDtcblx0XHRzdmMudXNlckJyYW5jaCA9IHVzZXJCcmFuY2g7XG5cdFx0c3ZjLnVzZXJDb3JwcyA9IHVzZXJDb3Jwcztcblx0XHRzdmMuY3VycmVudFVzZXIgPSBjdXJyZW50VXNlcjtcblx0XHRzdmMuY3VycmVudEFjY291bnQgPSBjdXJyZW50QWNjb3VudDtcblx0XHRzdmMuYWNjZXNzTGV2ZWwgPSBhY2Nlc3NMZXZlbDtcblx0XHRzdmMuY2FzZUlkID0gY2FzZUlkO1xuXG5cblx0XHRmdW5jdGlvbiBmZXRjaE9ubGluZVVzZXIoKXtcblx0XHRcdHJldHVybiAkaHR0cC5nZXQoJy9hcGkvdXNlcnMvdXNlclN0YXRlJyk7XG5cdFx0fTtcblxuXHRcdGZ1bmN0aW9uIGFjdGl2YXRlKHVzZXIpe1xuXHRcdFx0cmV0dXJuICRodHRwLnBvc3QoJy9hcGkvdXNlcnMnLCB1c2VyKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gcmVtb3ZlVXNlcih1c2VybmFtZSl7XG5cdFx0XHRyZXR1cm4gJGh0dHAuZGVsZXRlKCcvYXBpL3VzZXJzL2RlbGV0ZT91c2VybmFtZT0nICsgdXNlcm5hbWUpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBsb2dpbih1c2VyKXtcblx0XHRcdHJldHVybiAkaHR0cC5wb3N0KCcvYXBpL3VzZXJzL2F1dGhlbnRpY2F0ZScsIHVzZXIpO1xuXHRcdH07XG5cblx0XHRmdW5jdGlvbiBpc0xvZ2dlZEluKCl7XG5cdFx0XHRyZXR1cm4gc3RvcmUuZ2V0KCdqd3QnKTtcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gaXNWYWxpZCggYnJhbmNoICl7XG5cdFx0XHRpZiAoc3ZjLmlzTG9nZ2VkSW4pIHtcblx0XHRcdFx0aWYgKGp3dEhlbHBlci5kZWNvZGVUb2tlbihzdG9yZS5nZXQoJ2p3dCcpKS5hY2Nlc3NMZXZlbCA+IDEgICB8fCBqd3RIZWxwZXIuZGVjb2RlVG9rZW4oc3RvcmUuZ2V0KCdqd3QnKSkuYnJhbmNoID09IGJyYW5jaCkge1xuXHRcdFx0XHRcdHJldHVybiB0cnVlOyBcblx0XHRcdFx0fWVsc2Uge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fTtcblx0XHRcdH07XG5cblx0XHRcdHJldHVybiBmYWxzZSBcblx0XHR9O1xuXG5cdFx0ZnVuY3Rpb24gdXNlckJyYW5jaCgpe1xuXHRcdFx0aWYgKHN2Yy5pc0xvZ2dlZEluKSB7XG5cdFx0XHRcdHJldHVybiBqd3RIZWxwZXIuZGVjb2RlVG9rZW4oc3RvcmUuZ2V0KCdqd3QnKSkuYnJhbmNoO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcblx0XHRmdW5jdGlvbiB1c2VyQ29ycHMoKXtcblx0XHRcdGlmIChzdmMuaXNMb2dnZWRJbikge1xuXHRcdFx0XHRyZXR1cm4gand0SGVscGVyLmRlY29kZVRva2VuKHN0b3JlLmdldCgnand0JykpLmNvcnBzO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcblx0XHRmdW5jdGlvbiBjdXJyZW50VXNlcigpe1xuXHRcdFx0aWYgKHN2Yy5pc0xvZ2dlZEluKSB7XG5cdFx0XHRcdHJldHVybiBqd3RIZWxwZXIuZGVjb2RlVG9rZW4oc3RvcmUuZ2V0KCdqd3QnKSkudXNlcm5hbWU7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFxuXHRcdGZ1bmN0aW9uIGN1cnJlbnRBY2NvdW50KCl7XG5cdFx0XHRpZiAoc3ZjLmlzTG9nZ2VkSW4pIHtcblx0XHRcdFx0cmV0dXJuIGp3dEhlbHBlci5kZWNvZGVUb2tlbihzdG9yZS5nZXQoJ2p3dCcpKS5hY2NvdW50O1xuXHRcdFx0fTsgXG5cdFx0fTtcblx0XG5cdFx0ZnVuY3Rpb24gYWNjZXNzTGV2ZWwoKXtcblx0XHRcdGlmIChzdmMuaXNMb2dnZWRJbikge1xuXHRcdFx0XHRyZXR1cm4gand0SGVscGVyLmRlY29kZVRva2VuKHN0b3JlLmdldCgnand0JykpLmFjY2Vzc0xldmVsO1xuXHRcdFx0fTtcblx0XHR9O1xuXHRcblx0XHRmdW5jdGlvbiBjYXNlSWQoKXtcblx0XHRcdGlmIChzdmMuaXNMb2dnZWRJbikge1xuXHRcdFx0XHRyZXR1cm4gand0SGVscGVyLmRlY29kZVRva2VuKHN0b3JlLmdldCgnand0JykpLmNhc2VJZDtcblx0XHRcdH07XG5cdFx0fTtcblx0fTtcblxufSkoKTsiXSwic291cmNlUm9vdCI6Ii9zb3VyY2UvIn0=
