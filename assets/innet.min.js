;(function(){
	'use strict';
	angular.module('app',[
		'app.router',
		'app.directive',
		'app.topnav',
		'app.case',
		'app.car',
		'app.branch',
		'app.map',
		'app.member',
		'app.strikeTeam',
		'app.socket',
		'app.user',
		'app.timer',
		'app.notification'
	])
})();


(function(){
	'use strict';
	/**
	* app.branch Module
	*
	* Description
	*/
	angular
		.module('app.branch',[])
})();
(function(){
	'use strict';
	/**
	* app.car Module
	*
	* Description
	*/
	angular.module('app.car', [])
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular.module('app.case', [
		'ui.router',
		'ui.bootstrap'
	])
})();
(function(){
	/**
	* app.dashboard Module
	*
	* Description
	*/
	angular
		.module('app.dashboard',[]);
})();
(function(){
	'use strict';
	/**
	* app.director Module
	*
	* Description
	*/
	angular.module('app.director', [])

})();
(function(){
	'use strict';
	/**
	* app.dispatch Module
	*
	* Description
	*/
	angular.module('app.dispatch', [])
})();
(function(){
	'use strict';
	/**
	* app.dutylist Module
	*
	* Description
	*/
	angular.module('app.dutylist', [])
})();
(function(){
	'use strict';
	/**
	* app.geo Module
	*
	* Description
	*/
	angular.module('app.geo', []);
})();
(function(){
	/**
	* app.map Module
	*
	* Description
	*/
	angular.module('app.map', [])
})();
(function(){
	/**
	* app.member Module
	*
	* Description
	*/
	angular.module('app.member', [])
})();
(function(){
	'use strict';
	/**
	* app.notification Module
	*
	* Description
	*/
	angular.module('app.notification', []);
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular.module('app.safety',[])
})();
(function(){
	'use strict';
	/**
	* app.socket Module
	*
	* Description
	*/
	angular.module('app.socket', []);
})();
(function(){
	'use strict';
	/**
	* app.strikeTeam Module
	*
	* Description
	*/
	angular.module('app.strikeTeam',[]);
})();
(function(){
	'use strict';
	/**
	* app.summary Module
	*
	* Description
	*/
	angular.module('app.summary',[]);
})();
(function(){
	'use strict';
	/**
	* app.timer Module
	*
	* Description
	*/
	angular.module('app.timer', [])
})();
(function(){
	'use strict';
	/**
	* app.user Module
	*
	* Description
	*/
	angular.module('app.user', []);
});
(function(){
    angular
        .module('app.directive')
        .directive('minimalizaSidebar',minimalizaSidebar)
        .directive('sideNavigation',sideNavigation)
        .directive('iboxTools',iboxTools)
        .directive('back',back);

    minimalizaSidebar.$inject   = ['$timeout'];
    sideNavigation.$inject      = ['$timeout'];
    iboxTools.$inject           = ['$timeout'];
    back.$inject                = ['$window'];

    function minimalizaSidebar($timeout){
         return {
            restrict: 'A',
            template: '<a class="navbar-minimalize minimalize-styl-2 btn btn-primary" href="" ng-click="minimalize()"><i class="fa fa-bars"></i></a>',
            controller: ["$scope", "$element", function ($scope, $element) {
                $scope.minimalize = function () {
                    $("body").toggleClass("mini-navbar");
                    if (!$('body').hasClass('mini-navbar') || $('body').hasClass('body-small')) {
                        // Hide menu in order to smoothly turn on when maximize menu
                        $('#side-menu').hide();
                        // For smoothly turn on menu
                        setTimeout(
                            function () {
                                $('#side-menu').fadeIn(500);
                            }, 100);
                    } else if ($('body').hasClass('fixed-sidebar')){
                        $('#side-menu').hide();
                        setTimeout(
                            function () {
                                $('#side-menu').fadeIn(500);
                            }, 300);
                    } else {
                        // Remove all inline style from jquery fadeIn function to reset menu state
                        $('#side-menu').removeAttr('style');
                    }
                }
            }]
        };
    };

    function sideNavigation($timeout){
         return {
            restrict: 'A',
            link: function(scope, element) {
                // Call the metsiMenu plugin and plug it to sidebar navigation
                $timeout(function(){
                    element.metisMenu();
                });
            }
        }
    };

    function iboxTools($timeout){
        return {
            restrict: 'A',
            scope: true,
            templateUrl: 'views/common/ibox_tools.html',
            controller: ["$scope", "$element", function ($scope, $element) {
                // Function for collapse ibox
                $scope.showhide = function () {
                    var ibox = $element.closest('div.ibox');
                    var icon = $element.find('i:first');
                    var content = ibox.find('div.ibox-content');
                    content.slideToggle(200);
                    // Toggle icon from up to down
                    icon.toggleClass('fa-chevron-up').toggleClass('fa-chevron-down');
                    ibox.toggleClass('').toggleClass('border-bottom');
                    $timeout(function () {
                        ibox.resize();
                        ibox.find('[id^=map-]').resize();
                    }, 50);
                },
                    // Function for close ibox
                    $scope.closebox = function () {
                        var ibox = $element.closest('div.ibox');
                        ibox.remove();
                    }
            }]
        };
    };

    function back($window){
        return {
            restrict: 'A',
            link: function (scope, iElement, iAttrs) {
                iElement.bind('click',function(){
                    $window.history.back();
                })
            }
        };
    };

})();
(function(){

	/**
	* app.branch Module
	*
	* Description
	*/
	angular
		.module('app.branch')
		.controller('BranchSvc',BranchSvc);

	BranchSvc.$inject = ['$http'];
	function BranchSvc($http){
		var svc = this;
		svc.fetchByCorps 	= fetchByCorps;
		svc.fetchByName 	= fetchByName;
		svc.totalListFindByName = totalListFindByName;
		svc.getDetails 		= getDetails;
		svc.fetchOnDutyBranches = fetchOnDutyBranches;
		svc.update 			= update;
		svc.updateMission 	= updateMission;
		
		function fetchByCorps(corps){
			return $http.get('/api/branches?corps=' + corps);
		};
		
		function fetchByName(branch){
			return $http.get('/api/branches?branch=' + branch);
		};

		function totalListFindByName(branch){
			return $http.get('/api/branches/' + branch)
		}

		function getDetails(id){
			return $http.get('/api/branches/' + id);
		};

		function fetchOnDutyBranches(branches){
			return $http.post('/api/branches/onduty',branches);
		};
	
		function update(data){
			return $http.put('/api/branches/' + data.branch , data);
		};

		function updateMission(data){
			return $http.put('/api/branches?branch=' + data.branch, data);
		};
	};

})();
(function(){
	'use strict';
	/**
	* app.car Module
	*
	* Description
	*/
	angular
		.module('app.car')
		.controller('CarEditController',CarEditController);

	CarEditController.$inject = [];
	function CarEditController(){

	};

})();
(function(){
	'use strict';
	/**
	* app.car Module
	*
	* Description
	*/
	angular
		.module('app.car')
		.controller('CarIndexController',CarIndexController);

	CarIndexController.$inject = [];
	function CarIndexController(){

	};

})();
(function(){
	'use strict';

	/**
	* app.car Module
	*
	* Description
	*/
	angular
		.module('app.car')
		.serice('CarSvc',CarSvc);

	CarSvc.$inject = ['$http'];
	
	function CarSvc($http){
		var vm = this; 
		vm.fetchByCorps  = fetchByCorps;
		vm.fetchByBranch = fetchByBranch;
		vm.update 		 = update; 

		function fetchByCorps(corps){
			return $http.get('/api/cars?corps=' + corps);
		};

		function fetchByBranch( branch ){
			return $http.get('/api/cars?branch=' + branch );
		};
		
		function update(data){
			return $http.put('/api/cars/' + data.id , data);
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseConfirmController',CaseConfirmController);

	CaseConfirmController.$inject = ['UserSvc', 'CaseSvc', '$stateParams','$state','$modalInstance'];
	function CaseConfirmController(UserSvc, CaseSvc, $stateParams,$state,$modalInstance){
		var vm = this;
		
		vm.user = {};
		vm.send = send; 
		vm.caseInfo = {
			id : $stateParams.id,
			endAt : moment().format('YYYY-MMM-DD, h:mm:ss a')
		}; 

		function send(){
			UserSvc.login(vm.user).success(function(data){
				CaseSvc.closeCase(vm.caseInfo).success(function(){
					$modalInstance.dismiss('cancel');
					$state.go('dutyDesk.case.index');
				})
			});
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseEditController',CaseEditController);

	CaseEditController.$inject = ['$stateParams', 'CaseSvc', 'CarSvc', 'UserSvc', 'BranchSvc', '$window', '$modal','NtfSvc'];

	function CaseEditController($stateParams, CaseSvc, CarSvc, UserSvc, BranchSvc, $window, $modal,NtfSvc){
		var vm = this; 
		var dispatchCars  = [];
		vm.terminateCase  = terminateCase;
		vm.dispatch 	  = dispatch;
		vm.selectBranch   = selectBranch;
		vm.cancelDispatch = cancelDispatch;
		vm.save 		  = save; 

		angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 17
	        },
	        controls: {
	            draw: {}
	        }
	    });

		var caseId = $stateParams.id;

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		    vm.currentBranch = branches[0].name
		});

		function selectBranch(branch){
	    	vm.currentBranch = branch.name;
	    };

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		    vm.currentBranch = branches[0].name
		})

		CaseSvc.fetchById(caseId).success(function(_case){
			vm.currentCase = _case;
			vm.dispatchList = _.pluck(_case.cars, 'radioCode').join(' ')
			vm.currentCase.carIds = _.pluck(_case.cars,'_id');
		}).then(function(){
			CarSvc.fetchByCorps(UserSvc.userCorps()).success(function(cars){
				vm.cars = cars
				for (var i = 0; i < vm.cars.length; i++) {
					if ( vm.currentCase.carIds.indexOf(vm.cars[i]._id) > -1 ) {
						vm.cars[i].isChecked = true;
						dispatchCars.push(vm.cars[i]);
					};
				};
			});

			NtfSvc.fetch().success(function(ntfs){
				vm.ntfs = ntfs;
				vm.currentCase.ntfs = _.pluck(ntfs,'type')
				vm.currentCase.ntf  = vm.currentCase.ntfs[0];
			});
		});

		function getBranchId(branchesList){
			var branches = _.unique(branchesList);
			var branchIds = [];
			for (var i = 0; i < vm.branches.length; i++) {
				if (branches.indexOf(vm.branches[i].name) > -1) {
					branchIds.push(vm.branches[i]._id);
				};
			};
			return  branchIds;
		};

		function dispatch( car ){
			car.isChecked = true; 
			dispatchCars.push(car);
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ")
		};

		function cancelDispatch(car){
			car.isChecked = false;
			dispatchCars.splice(_.pluck(dispatchCars, '_id').indexOf(car._id),1)
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ")
		};

		function save(){
			var currentNtf;

			vm.ntfs.forEach(function(ntf,id){
				if (ntf.type == vm.currentCase.ntf ) {
					currentNtf  = vm.ntfs[id];
				};
			});
			CaseSvc.update({
				caseId    : vm.currentCase._id,
				address   : vm.currentCase.address || "測試",
				officerReceiver : UserSvc.currentUser() ||  "劉曉曼",
				type      : vm.currentCase.type || "火警",
				types 	  : vm.currentCase.types,
				phone     : vm.currentCase.phone || "測試",
				branches  : _.unique(_.pluck(dispatchCars, 'branch')),
				branchIds : getBranchId(vm.currentCase.branches),
		  		cars      : _.pluck(dispatchCars,'_id'),
				isOngoing : true,
				corps 	  : UserSvc.userCorps(),
				env 	  : vm.currentCase.env,
				envs 	  : vm.currentCase.envs,
				floor 	  : vm.currentCase.floor,
				ntf       : currentNtf._id,
				lastUpdate : moment().format('YYYY-MMM-DD h:mm:ss a')
			}).success(function(){
				$window.history.back();
			})
		};

		function terminateCase (){
			var modalInstance = $modal.open({
			  	templateUrl: 'views/case/case.confirm.modal.html',
			    controller: 'CaseConfirmCtrl',
			    size: "md"	    
			});
		};
	}
})();
(function(){
	'use strict';

	angular
		.module('app.case')
		.controller('CaseController',CaseController);
	
	CaseController.$inject = ['$stateParams','$modal','CaseSvc', '$log', 'SocketSvc', 'UserSvc', '$location'];
	function CaseController($stateParams,$modal,CaseSvc, $log, SocketSvc, UserSvc, $location){
		var vm = this; 
		vm.maxSize 		= 5; 
		vm.itemsPerPage = 3;
		vm.currentPage  = 1;
		vm.pageChanged  = pageChanged;
		vm.queryCases   = queryCases;
		vm.choose 		= choose;
		
		vm.queryCases();

		function pageChanged(){
			CaseSvc.fetch(UserSvc.userCorps(), vm.currentPage , vm.itemsPerPage ).success(function(data){
				vm.cases = data.cases;
			});
		};

		function queryCases(){
			CaseSvc.fetch(UserSvc.userCorps(), vm.currentPage, vm.itemsPerPage).success(function(data){
				vm.cases = data.cases;
				vm.totalItems = data.totalCases;
			});
		};

		function choose(id){
			CaseSvc.fetchById(vm.cases[id]._id).success(function(_case){
					vm.caseDetails = _case;
			});
		};

		SocketSvc.on('newCase',function(_case){
			vm.cases.unshift(_case);
		});

		SocketSvc.on('caseModified',function(_case){
			vm.cases[_case.caseId-1] = _case;
		});
	};

})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseModalController',CaseModalController);

	CaseModalController.$inject = ['CarSvc', '$modalInstance', 'CaseSvc','$state', 'caseId','caseDetails', 'StSvc', '$window', 'BranchSvc', 'UserSvc', 'NtfSvc'];

	function CaseModalController(CarSvc, $modalInstance, CaseSvc,$state, caseId,caseDetails, StSvc, $window, BranchSvc, UserSvc, NtfSvc){
		var vm = this; 
		vm.nftOption = {};
		vm.dispatchList = vm.caseObj.dispatchList.join(" ");
		vm.caseObj = {
			address : caseDetails.address || null,
			phone : caseDetails.phone || null,
		    type : caseDetails.type ||  "火警", 
		    types : [ "火警", "救護", "災害", "檢舉","其他"],
		    env   : "住宅火警",
		    envs  : ["住宅火警","高樓、地下與工廠","搶救困難區","其他"],
		    floor : 1, 
		    carIds : getCarsDetail(caseDetails).carIds  || [],
		    dispatchList : getCarsDetail(caseDetails).dispatchList ||  [],
		    branches : getCarsDetail(caseDetails).branches ||  []
		};
		vm.update 	 = update;
		vm.getCars 	 = getCars;
		vm.cancel 	 = cancel;
		vm.cancelDispatch = cancelDispatch;
		vm.dispatch  = dispatch;
		vm.closeCase = closeCase;
		vm.save 	 = save;

		if (_.isEmpty(caseDetails)) {
			vm.isNew = true;
			carObjs = [];
		}else{
			vm.isNew = false;
			var carObjs = caseDetails.cars;
		};

		NtfSvc.fetch().success(function(nfts){
			vm.nftOption.nfts = nfts;
		}).then(function(){
			vm.nftOption.nft = vm.nftOption.nfts[0];
		})

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		});

		function getCarsDetail(obj){
			var dispatchList = [];
			var carIds = [];
			var branches = [];

			if (obj.cars) {
				for (var i = obj.cars.length - 1; i >= 0; i--) {
					dispatchList.push(obj.cars[i].radioCode);
					carIds.push(obj.cars[i]._id);
					branches.push(obj.cars[i].branch); 
				};
				return {dispatchList : dispatchList , carIds : carIds , branches :  branches}

			}else{
				return {};
			};
		};

		function getBranchId(branchesList){
			var branches = _.unique(branchesList);
			var branchIds = [];
			for (var i = 0; i < vm.branches.length; i++) {
				if (branches.indexOf(vm.branches[i].name) > -1) {
					branchIds.push(vm.branches[i]._id);
				};
			};
			return  branchIds;
		};
		
		function getCars( branch ){
			 CarSvc.fetchByBranch(branch.name).success(function(cars){
			 	for (var i = cars.length - 1; i >= 0; i--) {
			 		if (vm.caseObj.carIds.indexOf(cars[i]._id) > -1 ) {
			 			cars[i].isChecked = true; 
			 		};
			 	};
			 	vm.cars = cars;
			 });
		};

		function cancel() {
			$modalInstance.dismiss('cancel');
		};

		function cancelDispatch(car){
			car.isChecked = false;
			carObjs.splice(carObjs.indexOf(car),1)
			vm.caseObj.carIds.splice(vm.caseObj.dispatchList.indexOf(car._id),1);
			vm.caseObj.dispatchList.splice(vm.caseObj.dispatchList.indexOf(car.radioCode),1);
			vm.caseObj.branches.splice(vm.caseObj.dispatchList.indexOf(car.branch),1);
			vm.dispatchList = vm.caseObj.dispatchList.join(" ");
		};
		
		function dispatch( car ){
			car.isChecked = true; 
			carObjs.push(car);
			vm.caseObj.carIds.push(car._id);
			vm.caseObj.dispatchList.push(car.radioCode);
			vm.caseObj.branches.push(car.branch);
			vm.dispatchList = vm.caseObj.dispatchList.join(" ");
		};

		function closeCase(){
			StSvc.count(caseDetails._id).success(function(total){
				if (total > 0 ) {
					$window.alert("尚有隊員在安全管制")
				}else{
					CaseSvc.closeCase({
						id : caseDetails._id,
						isOngoing : false
					}).success(function(msg){
						console.log(msg)
					});
					$modalInstance.dismiss('cancel');
					$state.reload()
				};
			});
		};

		function save(){
			CaseSvc.create({
				caseId   : caseId + 1, 
				address   : vm.caseObj.address || "測試",
				officerReceiver : UserSvc.currentUser() ||  "劉曉曼",
				type      : vm.caseObj.type || "救護",
				phone     : vm.caseObj.phone || "測試",
				branches  : _.unique(vm.caseObj.branches),
				branchIds : getBranchId(vm.caseObj.branches),
		  		cars      : vm.caseObj.carIds,
				isOngoing : true,
				corps 	  : UserSvc.userCorps(),
				env 	  : vm.caseObj.env,
				floor 	  : vm.caseObj.floor
			}).success(function(newCase){
				$modalInstance.close(newCase)
			});
		};

		function update(){
			var content = {
				id : caseDetails._id,
				caseId   : caseId, 
				address   : vm.caseObj.address,
				officerReceiver : UserSvc.currentUser() || "劉曉曼",
				type      : vm.caseObj.type,
				phone     : vm.caseObj.phone,
				branches  : _.unique(vm.caseObj.branches),
				branchIds : getBranchId(vm.caseObj.branches),
		  		cars      : vm.caseObj.carIds,
				isOngoing : true,
				env 	  : vm.caseObj.env,
				floor 	  : vm.caseObj.floor
			};
			
			CaseSvc.update(content);
			$modalInstance.dismiss('cancel');
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseNewController',CaseNewController);

	CaseNewController.$inject = ['CarSvc', 'BranchSvc', 'NtfSvc', 'UserSvc','$location','leafletData', '$stateParams', 'CaseSvc', '$window', '$state', 'GeoSvc'];

	function CaseNewController(CarSvc, BranchSvc, NtfSvc, UserSvc,$location,leafletData, $stateParams, CaseSvc, $window, $state, GeoSvc){
		var vm = this;
		vm.selectBranch = selectBranch;
		vm.save = save;
		vm.locateAddress = locateAddress;
		vm.cancelDispatch = cancelDispatch;
		vm.dispatch = dispatch;
		vm.currentTime =  moment().format('h:mm:ss a'); 
		var battleRadiuss = [];
		var dispatchCars = [];
		var notifications;
		vm.dispatchList = vm.currentCase.dispatchList.join(' ');
		
		vm.currentCase = {
			phone 	: null,
		    type 	: '火警', 
		    types 	: [ '火警', '救護', '災害', '檢舉','其他'],
		    env   	: '住宅火警',
		    envs  	: ['住宅火警','高樓、地下與工廠','搶救困難區','其他'],
		    floor 	: 1, 
		    carIds  : [],
		    dispatchList : [],
		    branches :  [],
		    location : GeoSvc.defaultLocation()
		}; 

		GeoSvc.fetchBaseLocation(UserSvc.userCorps()).success(function(locations){
			vm.locations = locations;
		});

	    angular.extend(vm, {
	        nowPos: {
	            lat: GeoSvc.defaultLocation().lat,
	            lng: GeoSvc.defaultLocation().lng,
	            zoom: 17
	        },
	       markers: {},
	    });

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    vm.branches = branches;
		    vm.currentBranch = branches[0].name
		});

		CarSvc.fetchByCorps(UserSvc.userCorps()).success(function(cars){
			vm.cars = cars; 
		});

		NtfSvc.fetch().success(function(ntfs){
			notifications = ntfs;
			vm.currentCase.ntfs = _.pluck(ntfs,'type')
			vm.currentCase.ntf  = vm.currentCase.ntfs[0];
		});

		function locateAddress(){
			if (vm.currentCase.address) {
				GeoSvc.getGeoEncodedInfo(vm.currentCase.address).then(function(res){
			        vm.nowPos.lat = res.J;
			        vm.nowPos.lng = res.M;
		            vm.markers.mainMarker = {
		            	lat: res.J,
		                lng: res.M,
		                focus: true,
		                message: "案件標的",
		            };

		            if (res) {
		            	vm.locations.forEach(function(location){
			            	var r = GeoSvc.getDistance( location, { lat : res.J , lng : res.M } );
			            	var battleRadius =  { base : location.branch,  to : { lat : res.J, lng :  res.M }, from : { lat : location.lat, lng : location.lng }, d : r }; 
			            	battleRadiuss.push( JSON.stringify(battleRadius));
			            });
		            };
				});
			};
		};

		function selectBranch(branch){
	    	vm.currentBranch = branch.name;
	    };

		function dispatch( car ){
			car.isChecked = true; 
			dispatchCars.push(car);
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ");
		};

		function cancelDispatch(car){
			car.isChecked = false;
			dispatchCars.splice(_.pluck(dispatchCars, '_id').indexOf(car._id),1);
			vm.dispatchList = _.pluck(dispatchCars, 'radioCode').join(" ");
			vm.dispatchList = vm.currentCase.dispatchList.join(" ");
		};
	
		function save(){
			var currentNtf;
			var branches  = _.unique(_.pluck(dispatchCars, 'branch'));
			var dispatch = vm.branches.filter(function(branch) { return branches.indexOf(branch.name) > -1 });

			notifications.forEach(function(ntf,id){
				if (ntf.type == vm.currentCase.ntf ){
					currentNtf  = notifications[id]
				};
			});

			CaseSvc.create({
				officerReceiver : UserSvc.currentUser() ||  '劉曉曼',
				type      		: vm.currentCase.type || '火警',
				types 	  		: vm.currentCase.types,
				phone     		: vm.currentCase.phone || '測試',
				branches  		: _.unique(_.pluck(dispatchCars, 'branch')),
				branchIds 		: _.pluck(dispatch, '_id'),
		  		cars      		: _.pluck(dispatchCars,'_id'),
				corps 	  		: UserSvc.userCorps(),
				env 	  		: vm.currentCase.env,
				envs 	  		: vm.currentCase.envs,
				floor 	  		: vm.currentCase.floor,
				ntf       		: currentNtf._id,
				createAt  		: moment().format('YYYY-MMM-DD, h:mm:ss a'),
				lastUpdate 		: moment().format('YYYY-MMM-DD, h:mm:ss a'),
				location  		:  {
					lat 	: vm.currentCase.location.lat,
					lng 	: vm.currentCase.location.lng,
					address : vm.currentCase.location.address || '測試'
				},
				battleRadiuss 	: battleRadiuss
			}).success(function(){
				$window.history.back();
			});
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.service('CaseSvc', CaseSvc);

	CaseSvc.$inject = ['$http'];

	function CaseSvc( $http ) {
		var svc = this;
		svc.fetch 		= fetch;
		svc.fetchAll 	= fetchAll;
		svc.closeCase 	= closeCase;
		svc.fetchRelativeCase = fetchRelativeCase; 
		svc.fetchDetails = fetchDetails;
		svc.fetchById 	= fetchById;
		svc.create 		= create;
		svc.delete 		= deleteCase;
		svc.update 		= update;
		
		function fetch(corps, page, itemsPerPage){
			return $http.get('/api/cases?corps=' + corps + '&page=' + page + '&ipp=' + itemsPerPage );
		};

		function fetchAll(){
			return $http.get('/api/cases/details');
		};
		
		function fetchRelativeCase(con){
			return $http.get('/api/cases/branch?branch=' + con.branch + '&accessLevel=' + con.accessLevel + '&corps=' + con.corps );
		};
		
		function fetchDetails(caseId){
			return $http.get('/api/cases/details/' + caseId);
		};

		function fetchById( caseId ){
			return $http.get('/api/cases/' + caseId );
		};
		
		function create(case_info){
			return $http.post('/api/cases', case_info);
		};

		function deleteCase(caseId){
			return $http.post('/api/cases/' + caseId);
		};

		function update(updated_case){
			return $http.put('/api/cases/' + updated_case.caseId , updated_case);
		};
		
		function closeCase(data){
			return $http.put('/api/cases/close?id=' + data.id, data );
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.case Module
	*
	* Description
	*/
	angular
		.module('app.case')
		.controller('CaseShowController', CaseShowController);

		CaseShowController.$inject =  [ 'StSvc', '$stateParams', '$interval', '$state', 'SocketSvc', 'CaseSvc', 'BranchSvc', 'StMissionFac'];

		function CaseShowController(){
			var vm = this; 
			vm.isCollapsed = true ;
			vm.members = [];
			vm.positions = StMissionFac.position().poss;

			SocketSvc.on('newSt', function(st){
				if ( angular.equals(caseId,st.caseId)) {
					var newSt = angular.copy(st);
					vm.strikeTeams.push(newSt);
				};
				vm.deploys = initTable(vm.strikeTeams);
				vm.deployDetails = initDeploy(vm.strikeTeams);
			});

			SocketSvc.on('updateSt', function(data){
				StSvc.fetchByCase(caseId).success(function(strikeTeams){
					vm.strikeTeams = strikeTeams;
					vm.strikeTeams.forEach(function(st){
						st.limitTime = moment.duration(st.workingTime,'seconds');
					});
					vm.deploys = initTable(vm.strikeTeams);
					vm.deployDetails = initDeploy(vm.strikeTeams);
				});

			})

			SocketSvc.on('dismiss', function(data){
				StSvc.fetchByCase(caseId).success(function(strikeTeams){
					vm.strikeTeams 	 = strikeTeams;
					vm.deploys 		 = initTable(vm.strikeTeams);
					vm.deployDetails = initDeploy(vm.strikeTeams);
				});
			});


			var caseId = $stateParams.id;
			CaseSvc.fetchDetails(caseId).success(function(_case){
				_case.env == '住宅火警' ? vm.apartment = true : vm.apartment = false;
				vm.caseDetail = _case;
				vm.position = {
					defaultPos 	: "第一面",
					positions 	: ["第一面","第二面","第三面","第四面"],
					floor 		: vm.caseDetail.floor,
					floors  	: vm.caseDetail.floor < 5? _.range(1,6,1) : _.range(vm.caseDetail.floor-2,vm.caseDetail.floor+3,1)
				};
			});

			StSvc.fetchByCase(caseId).success(function(strikeTeams){
				if (strikeTeams) {
					vm.strikeTeams = strikeTeams;
					vm.strikeTeams.forEach(function(st){
						st.limitTime = moment.duration(st.workingTime,'seconds');
					});
					vm.deploys = initTable(vm.strikeTeams);
					vm.deployDetails =initDeploy(vm.strikeTeams);
					
				} else {
					return 
				};
			});


			var initDeploy = function(strikeTeams){
				return  _.groupBy(strikeTeams,function(st){
						return st.position;
				});
			};

			var initTable =  function(strikeTeams){
			  	var deployArray = _.range(4).map(function () {
			        return _.range(5).map(function () {
			            return { totalMember : 0, stTotal : 0 , sts : [] } ;
			        });
			    });

				if ( strikeTeams ){
					for (var i = strikeTeams.length - 1; i >= 0; i--) {
						var totalMember = 0;
						var y = null;
						var st = 0;
						var x = _.indexOf(strikeTeams[i].positions, strikeTeams[i].position);
						vm.apartment ? y = _.indexOf(strikeTeams[i].floors, strikeTeams[i].floor) : y = _.indexOf(strikeTeams[i].areas, strikeTeams[i].area)
						deployArray[x][y].stTotal += 1;
						deployArray[x][y].totalMember += strikeTeams[i].members.length;
						var stInFo = {};
						stInFo.id = strikeTeams[i].branch + strikeTeams[i].id
						stInFo.number = strikeTeams[i].members.length;
						stInFo.group = strikeTeams[i].group;
						deployArray[x][y].sts.push(stInFo);
					};
				}
				return deployArray
			};
			
			vm.$on('$destroy', function (event) {
		        SocketSvc.removeAllListeners();
		    });
		}
})();
;(function(){
	'use strict';
	/**
	* app Module
	*
	* Description
	*/
	angular
		.module('app')
		.controller('LoginController',LoginController);

		LoginController.$inject = ['UserSvc', 'store', '$state','jwtHelper','$http', 'SocketSvc'];

		function LoginController(UserSvc, store, $state,jwtHelper,$http, SocketSvc ){
			var vm 	 = this; 
			vm.login = login;
			vm.user  = {};

			function login(){
				UserSvc.login(vm.user).success(function(data){
					if (data.success) {
						store.set('jwt',data.token);
						$http.defaults.headers.common['x-access-token'] = data.token;
						return data.token; 
					} else { 
						return console.log("password is not existed");
					}
				}).then(function(token){
					SocketSvc.init(token);
					SocketSvc.emit('login');
				}).then(function(){
					if (jwtHelper.decodeToken(token).role == "admin") {
						var userBranch = jwtHelper.decodeToken(token).branch;
						if (userBranch.slice(userBranch.length-2 ,userBranch.length) == "大隊") {
							return $state.go('dutyDesk.corps')
						} else{
							return $state.go('dutyDesk.branch')
						};
					}else{
						return $state.go('director.safety.index')
					}
				})
			};
		};
})();
;(function(){
	'use strict';
	angular
		.module('app.router',['ui.router'])
		.config(routerConfig)

		routerConfig.$inject = ['$stateProvider','$urlRouterProvider','$locationProvider'];
		
		function routerConfig($stateProvider,$urlRouterProvider, $locationProvider) {
		    $urlRouterProvider
    			.otherwise('/login');

		    $stateProvider
		        .state('anon',{
		            url : "",
		            abstract : true,
		            template : "<ui-view>",
		        })
		        .state('anon.login',{
		            url : "/login",
		            templateUrl :"login.html",
		            controller : "LoginController",
		            controllerAs : "LoginCtrl"
		        })
		        .state('anon.404',{
		            url : "/404",
		            templateUrl : "404.html"
		        })

    			// duty desk 
			$stateProvider
				.state('dutyDesk', {
		            abstract: true,
		            url: "/dutyDesk",
		            templateUrl: "views/common/content.html",
		            data : {
		                requiredLogin : true,
		                role : ["admin"]
		            }
		        })
		        .state('dutyDesk.corps', {
		            url: "/corps",
		            templateUrl: "views/dashboard/corps.dashboard.html",
		            controller : "DashboardController",
		            controllerAs : "DashboardCtrl",
		            data : {
		                requiredLogin : true,
		                role : ["admin"]
		            }
		        })
		        .state('dutyDesk.branch',{
		            url : "/branch",
		            templateUrl : "views/dashboard/branch.dashboard.html",
		            controller : "DashboardController",
		            controllerAs : "DashboardCtrl",
		            date : {
		                requiredLogin : true,
		                role : ["admin"]
		            }
		        })
		        .state('dutyDesk.case',{
		            abstract : true,
		            template : "<ui-view>"
		        })
		        .state('dutyDesk.case.index', {
		            url: "/case",
		            templateUrl: "case/case.index.html",
		            controller : "CaseController",
		            controllerAs : "CaseCtrl"
		        })
		        .state('dutyDesk.case.new',{
		            url : "/case/new",
		            templateUrl : "case/case.new.html",
		            controller : "CaseNewController",
		            controllerAs : "CaseNewCtrl"
		        })
		        .state('dutyDesk.case.show',{
		            url : "/case/:id/show",
		            templateUrl : "case/case.show.html",
		            controller : "CaseShowController",
		            controllerAs : "CaseShowCtrl"
		        })
		        .state('dutyDesk.case.edit',{
		            url : "/case/:id/edit",
		            templateUrl : "case/case.edit.html",
		            controller : "CaseEditController",
		            controllerAs : "CaseEditCtrl"
		        })
		        .state('dutyDesk.safety',{
		            url : "/case/:id",
		            templateUrl : "summary/summary.index.html",
		            controller : "SummaryController",
		            controllerAs : "SummaryCtrl"
		        })
		        .state('dutyDesk.dutylist',{
		            abstract : true,
		            template : "<ui-view>"
		        })
		        .state('dutyDesk.dutylist.index', {
		            url: "/dutylist/:branch",
		            templateUrl: "views/dutylist/dutylist.index.html",
		            controller : "DutyListController",
		            controllerAs : "DutyListCtrl"
		        })
		        .state('dutyDesk.dutylist.show',{
		        	url : "/dutylist/:branch/index",
		        	template : "<h2> show </h2>"
		        })
		        .state('dutyDesk.dutylist.edit', {
		            url: "/dutylist/:branch/edit",
		            templateUrl  : "views/dutylist/dutylist.edit.html",
		            controller   : "DutyListEditController",
		            controllerAs : "DutyListEditCtrl"
		        })
		        .state('dutyDesk.member',{
		            abstract : true,
		            template : "<ui-view>"
		        })
		        .state('dutyDesk.member.show', {
		            url: "/member/:branch",
		            templateUrl  : "views/member/member.index.html",
		            controller   : "MemberController",
		            controllerAs : "MemberCtrl"
		        })
		        .state('dutyDesk.member.edit', {
		            url: "/member/:branch/edit",
		            templateUrl  : "views/member/member.edit.html",
		            controller 	 : "MemberEditController",
		            controllerAs : "MemberEditCtrl"
		        })
		        .state('dutyDesk.car', {
		            abstract : true,
		            template : "<ui-view>"
		        })
		        .state('dutyDesk.car.show',{
		            url: "/car/:branch",
		            templateUrl : "views/cars/car.index.html",
		            controller : "CarIndexController",
		            controllerAs : "CarIndexCtrl"
		        })
		        .state('dutyDesk.car.edit',{
		            url: "/car/:branch/edit",
		            templateUrl : "views/cars/car.edit.html",
		            controller : "CarEditController",
		            controllerAs : "CarEditCtrl"
		        })
		}
})();

(function(){
	/**
	* app.dashboard Module
	*
	* Description
	*/
	angular
		.module('app.dashboard')
		.controller('DashboardController',DashboardController);

	DashboardController.$inject = ['$location', 'SocketSvc', 'UserSvc', 'BranchSvc'];
	function DashboardController($location, SocketSvc, UserSvc, BranchSvc){
		var vm = this; 

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
			return vm.branches = branches;
		});

		UserSvc.fetchOnlineUser().success(function(users){
			return vm.users = users;
		});

		SocketSvc.on('userLogin',function(user){
			return vm.users.push(user);
		});

		SocketSvc.on('userDisconnect',function(disconnectUser){
			vm.users = vm.users.filter(function(user) {
				return user.username != disconnectUser.username
			});
		});

		SocketSvc.on('userLogout',function(logoutUser){
			vm.users = vm.users.filter(function(user) {
				return user.username != logoutUser.username
			});
		});

		vm.$on('$destroy', function (event) {
	        return SocketSvc.removeAllListeners();
	    });
	}
})();
(function(){
	'use strict';
	/**
	* app.director Module
	*
	* Description
	*/
	angular
		.module('app.director')
		.controller('DirDutyListController',DirDutyListController);

	DirDutyListController.$inject = ['UserSvc', 'BranchSvc'];

	function DirDutyListController( UserSvc , BranchSvc ){
		var vm = this;
		var branch = UserSvc.userBranch();
		
		BranchSvc.fetchByName(branch).success(function(branch){
			vm.branch 		= branch;
			vm.onDutyTotal 	= vm.branch.members.filter(function(member) {
				return member.onDuty == true 
			});
		}); 
	};
})();
(function(){
	'use strict';
	/**
	* app.dashboard Module
	*
	* Description
	*/
	angular
		.module('app.director')
		.controller('DirDutyListEditController',DirDutyListEditController);

	DirDutyListEditController.$inject = ['BranchSvc', '$stateParams','MemberSvc', '$location', '$window', 'UserSvc', 'CarSvc', 'StMissionFac'];

	function DirDutyListEditController(BranchSvc, $stateParams,MemberSvc, $location, $window, UserSvc, CarSvc, StMissionFac){
		var vm = this;
		var branch 	= UserSvc.userBranch();
		vm.check 	= check;
		vm.save 	= save;   

		BranchSvc.fetchByName(branch).success(function(branch){
			vm.branch = branch;
			vm.isCorps =  true ? branch.name.split("救災救護")[1] : false 
			var members = _.pluck(branch.members.filter(function(member) { return member.level < 2.4 }), 'name')
			vm.branch.safetyManager 	= branch.safetyManager;
			vm.branch.safetyManagers 	= members;
			vm.onDutyTotal = 0;
			_.map(vm.branch.members,function(member){ 
				member.groupIds = _.range(1,Math.round(vm.branch.members.length/6),1);
				member.groupID = member.group + member.groupId 
			})
		})

		function check(member){
			member.onDuty 	 = !member.onDuty;
			member.isChecked = !member.isChecked;
			member.groupID 	 = member.group + member.groupId
		};

		
		function save(){
			var DispatchNumber = vm.branch.members.filter(function(member) {
				return member.onDuty
			});

			BranchSvc.updateMission({
				branch   		: vm.branch.name,
				director 		: vm.branch.director,
				dispatchNum 	: DispatchNumber.length,
				safetyManager 	: vm.branch.safetyManager,
				members 		: vm.branch.members
			});
			$window.history.back();
		};
	};

})();
(function(){
	'use strict';

	/**
	* app.dispatch Module
	*
	* Description
	*/
	angular
		.module('app.dispatch', [])
		.controller('DispatchController',DispatchController);

	DispatchController.$inject = ['$stateParams','$modal','CaseSvc','BranchSvc', 'CarSvc', 'UserSvc'];
	function DispatchController($stateParams,$modal,CaseSvc,BranchSvc, CarSvc, UserSvc){
		var vm = this; 
		CaseSvc.fetch(UserSvc.userCorps()).success(function(cases){
			vm.cases = cases;
			CaseSvc.fetchById(vm.cases[$stateParams.caseId]._id).success(function(_case){
					return vm.caseDetails = _case;
			});
		});

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
		    return vm.branchList = branches;
		 });

		CarSvc.fetch().success(function(data){
		    return vm.carsData = data;
		});

		vm.addNewCase = function () {
		  	var modalInstance = $modal.open({
			    templateUrl: '/partials/casePanel/caseAddModal',
			    controller: 'CaseAddModalCtrl',
			    size: "lg",
			    resolve : {
			    	caseId : function(){
			    		return vm.id = "新增案件"
			    	},
			    	branchList : function(){
			    		return vm.branchList;
			    	},
			    	carsData : function(){
			    		return vm.carsData;
			    	},
			    	isNew : function(){
			    		return true;
			    	},
			    	caseDetails : function(){
			    		return {}
			    	}
			    }
		    });
		 };

		 vm.editCase = function(){
		 	var modalInstance = $modal.open({
			    templateUrl: '/partials/casePanel/caseAddModal',
			    controller: 'CaseAddModalCtrl',
			    size: "lg",
			    resolve : {
			    	caseId : function(){
			    		return vm.id = vm.cases[$stateParams.caseId].caseId; 
			    	},
			    	branchList : function(){
			    		return vm.branchList;
			    	},
			    	carsData : function(){
			    		for (var i = vm.carsData.length - 1; i >= 0; i--) {
			    			for (var j = vm.caseDetails.cars.length - 1; j >= 0; j--) {
			    				if ( vm.carsData[i].radioCode === vm.caseDetails.cars[j].radio_code) {
			    					return vm.carsData[i].isChecked = true ;
			    				};
			    			};		    			
			    		};
			    		return vm.carsData;
			    	},
			    	isNew : function(){
			    		return false; 
			    	},
			    	caseDetails : function(){
			    		return vm.caseDetails;
			    	}
			    }
		    });
		 };
	}
})();
(function(){
	/**
	* app.dutylist Module
	*
	* Description
	*/
	angular
		.module('app.dutylist', [])
		.controller('DutyListController',DutyListController);

	DutyListController.$inject = ['BranchSvc', '$stateParams', 'SocketSvc', 'UserSvc', '$q'];
	function DutyListController(BranchSvc, $stateParams, SocketSvc, UserSvc, $q){
		var vm = this; 
		var branchId = $stateParams.branch;
		
		BranchSvc.totalListFindByName(branchId).success(function(branch){
			vm.branch = branch;
			vm.onDutyTotal = vm.branch.members.filter(function(member) {
				return member.onDuty == true
			});
		});
	}

})();
(function(){
	'use strict';
	/**
	* app.geo Module
	*
	* Description
	*/
	angular
		.module('app.geo')
		.service('GeoSvc',GeoSvc);

	GeoSvc.$inject = ['$q','$http'];

	function GeoSvc(){
		var svc = this; 
		svc.getGeolocationCoordinates = function() {
	        var deferred = $q.defer();
	        navigator.geolocation.getCurrentPosition(
	            function(position) { deferred.resolve(position.coords); },
	            function(error) { deferred.resolve(null); }
	        );
	        return deferred.promise;
	    };

	    svc.getGeoEncodedInfo = function(address){
	    	var deferred = $q.defer();
	    	// return $http.get('https://maps.googleapis.com/maps/api/geocode/json?address='+ address +'&key=AIzaSyAxq-ZkxRr1ZArBXFDOo8xgi4Cl2PeitAo')
	    	var geocoder = new google.maps.Geocoder();
	    	if (geocoder) {
		      geocoder.geocode({ 'address': address }, function (results, status) {
		         if (status == google.maps.GeocoderStatus.OK) {
		            deferred.resolve(results[0].geometry.location) 
		         }
		         else {
		            deferred.resolve( "Geocoding failed: " + status )
		         }
		      });
		   } 
		   return deferred.promise;  
	    };

	    svc.fetchBaseLocation = function(corps){
	    	return $http.get('/api/geolocations?corps=' + corps)
	    };

	    svc.getDistance = function( from_loc , to_loc ){

	    	if (typeof(Number.prototype.toRad) === "undefined") {
			  Number.prototype.toRad = function() {
			    return svc * Math.PI / 180;
			  }
			}
			var R = 6371; // Radius of the earth in km
			var dLat = (to_loc.lat - from_loc.lat ).toRad();  // Javascript functions in radians
			var dLon = (to_loc.lng - from_loc.lng ).toRad(); 
			var a = Math.sin(dLat/2) * Math.sin(dLat/2) +
			        Math.cos(from_loc.lat.toRad()) * Math.cos(to_loc.lat.toRad()) * 
			        Math.sin(dLon/2) * Math.sin(dLon/2); 
			var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
			return R * c;
	    };

	    svc.defaultLocation = function(){
	    	return { lat : 25.0927297 , lng :  121.4608639, address : null};
	    };
	};
})();
(function(){
	'use strict';
	/**
	* app Module
	*
	* Description
	*/
	angular
		.module('app.topnav', [])
		.controller('TopNavController',TopNavController);

	TopNavController.$inject = [];
	function TopNavController($location,$state, $interval, store, SocketSvc, UserSvc, $window){
		var vm = this; 
		vm.currentTime =  moment().format('MMM Do, h:mm:ss a');
		vm.logout = logout;


		$interval(function(){
			moment.locale('zh-tw');
			vm.currentTime =  moment().format('MMM Do, h:mm:ss a');
		}, 1000);
		 
		function logout(){
			var account = UserSvc.currentAccount();
			SocketSvc.emit('logout');
			$state.go('anon.login');
		};
	}

})();
(function(){
	'use strict';
	/**
	* app.map Module
	*
	* Description
	*/
	angular
		.module('app.map', [])
		.controller('MapIndexController',MapIndexController);

	MapIndexController.$inject = ['leafletData', 'GeoSvc'];
	function MapIndexController(leafletData, GeoSvc){
		var vm = this; 

		GeoSvc.getGeolocationCoordinates().then(function(coord){
	        vm.nowPos.lat = coord.latitude;
	        vm.nowPos.lng = coord.longitude;
	        vm.nowPos.zoom = 17;
	    })

	    angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 17
	        },
	        controls: {
	            draw: {}
	        }
	    })

	    leafletData.getMap().then(function(map) {
	      var drawnItems = vm.controls.edit.featureGroup;
	      map.on('draw:created', function (e) {
	        var layer = e.layer;
	        drawnItems.addLayer(layer);
	        
	        FeatureCollections.push(layer.toGeoJSON())
	        
	      });
	    })
	}
})();
(function(){
	'use strict';
	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.controller('MemberAccountModalController',MemberAccountModalController);

	MemberAccountModalController.$inject = ['UserSvc', 'MemberSvc', 'member', '$modalInstance'];
	function MemberAccountModalController(UserSvc, MemberSvc, member, $modalInstance){
		var vm = this; 
		vm.user = member;
		vm.save = save;
		vm.cancel = cancel; 

		function save(){
			if (_.isEmpty(vm.user)) {
				console.log("please enter your account and password!")
			} else{
				if (!vm.user.account) {
					console.log("account can't be blank!")
					if (!vm.user.password) {
						console.log("passwod can't be blank!")
					};
				} else if (!vm.user.password) {
					console.log("password can't be blank")
				}else{
					UserSvc.activate(vm.user);
					MemberSvc.updateUser(member.name);
					$modalInstance.close(vm.user);
				};
			};
		};

		function cancel(){
			$modalInstance.dismiss('cancel');
		};
	};
})();
(function(){
	'use strict';

	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.controller('MemberEditController',MemberEditController);
	
	MemberEditController.$inject = ['MemberSvc', 'BranchSvc', '$stateParams', '$window','$modal', '$state', 'UserSvc'];
	
	function MemberEditController( MemberSvc, BranchSvc, $stateParams, $window,$modal, $state, UserSvc){
		var vm = this; 

		vm.alerts = [];
		vm.memberDeleted = false;
		var tempDelMember = null;
		vm.accessLevel = UserSvc.accessLevel();
		vm.closeAlert = closeAlert;
		vm.save = save;
		vm.addNewMember = addNewMember;
		vm.update = update;
		vm.activateAccount = activateAccount;
		vm.deleteAlert = deleteAlert;
		vm.deActivateAlert = deActivateAlert;
		
		var memberInit = function(){
			MemberSvc.findByBranch($stateParams.branch).success(function(members){
				vm.members = members;
				vm.members.forEach(function(member){
					member.workingTime = moment.duration(member.workingTime,'seconds');
				});
			});
		};

		memberInit();

		var deActivateAccount = function(index){
			UserSvc.removeUser(tempDelMember.name).success(function(user){
				MemberSvc.removeUser(user.username);
				vm.closeAlert(index);
				memberInit();
			});
		};

		var deleteMember = function(index){
			vm.memberDeleted = true;
			MemberSvc.deleteMember(tempDelMember).success(function(){
				vm.memberDeleted = false;
			});
			vm.closeAlert(index);
			memberInit();
		};

		var cancelDel = function(index){
			vm.memberDeleted = false;
			vm.closeAlert(index);
		};

		function save(){
			var directors = _.pluck( vm.members.filter(function(member) { return member.level > 1.3  }) , 'name');
			BranchSvc.update({
				branch : $stateParams.branch,
				members : _.pluck( vm.members , '_id'),
				directors : directors,
				director : directors[0],
				safetyManager : directors[0]
			}).success(function(){
				$window.history.back();
			});		
		};

		function addNewMember(){
			var modalInstance = $modal.open({
			    templateUrl: 'views/member/member.modal.html',
			    controller: 'MemberModalCtrl',
			    size: "md",
			    resolve : {
			    	branch : function(){
			    		return $stateParams.branch 
			    	},
			    	member : function(){
			    		return { workingTime : null };
			    	}
			    }
		    });

		    modalInstance.result.then(function(member){
		    	if (member) {
		    		memberInit();
		    	}
		    	vm.alerts.push({ type : "success" ,  msg: '人員新增成功！ ' + member.name + ' 已加入 ' + member.branch});
		    })
		};

		function update(member){
			var oldMember = member;
			var modalInstance = $modal.open({
			    templateUrl: 'views/member/member.modal.html',
			    controller: 'MemberModalCtrl',
			    size: "md",
			    resolve : {
			    	branch : function(){
			    		return $stateParams.branch 
			    	},
			    	member : function(){
			    		return {
			    			memberId : member._id,
			    			id : member.id,
			    			name : member.name,
			    			title : member.title,
			    			branches : member.branches,
			    			corps : member.corps,
			    			radioCode : member.radioCode, 
			    			workingTime : member.workingTime.minutes() * 60 + member.workingTime.seconds()
			    		}
			    	}
			    }
		    });

		    modalInstance.result.then(function(member){
		    	memberInit();
		    	vm.alerts.push({ type : "info" ,  msg:  oldMember.name + '修改成功!' });
		    });
		};

		function activateAccount(member){
			var users = vm.members.filter(function(member) {
				return member.isUser;
			});

			if (users.length < 3 ) {
				var modalInstance = $modal.open({
				    templateUrl: 'views/member/member.account.html',
				    controller: 'MemberAccountModalCtrl',
				    size: "md",
				    resolve : {
				    	member : function(){
				    		return member
				    	}
				    }
				});

				modalInstance.result.then(function(member){
					memberInit();
					vm.alerts.push({ type : "info" , msg : member.name + " 已開通為使用者" })
				});
			} else {
				vm.alerts.push({ type : "warning" , msg : "無法開通" + member.name + " 因為使用者已超過3位，請解除其他人帳號後再開通 "});
			};
		};

		function deleteAlert(member){
			vm.alerts.push({ 	
				type : "danger" ,  
				msg: '是否確定要刪除！' + member.name, 
				execute : deleteMember,
				cancel :  cancelDel
			});
			tempDelMember = member;
		};

		function deActivateAlert(member){
			var users = vm.members.filter(function(member) {
				return member.isUser;
			});
			if (users.length == 1 ) {
				vm.alerts.push({ 
					type : "warning",  
					msg: '每分隊至少要有1個使用者，無法取消' + member.name + "的登入權限",
				});
			} else{
				vm.alerts.push({ 
					type : "danger",  
					msg: '是否確定要解除' + member.name + "登入權限",
					execute : deActivateAccount,
					cancel : cancelDel
				});
				tempDelMember = member;
			};
		};
	
		function closeAlert(index){
			vm.alerts.splice(index,1)
		};
	}
})();
(function(){
	'use strict';

	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member', [])
		.controller('MemberIndexController',MemberIndexController);

	MemberIndexController.$inject = [ MemberSvc , $stateParams ];
	function MemberIndexController( MemberSvc , $stateParams ){
		var vm = this; 

		vm.branch = $stateParams.branch;
		MemberSvc.findByBranch($stateParams.branch).success(function(members){
			vm.members = members;
			vm.members.forEach(function(member){
				return member.workingTime = moment.duration(member.workingTime,'seconds');
			});
		});
	};
})();
(function(){
	'use strict';
	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.controller('MemberModalController',MemberModalController);

	MemberModalController.$inject = ['branch', 'MemberSvc', '$modalInstance', '$state', 'member','BranchSvc', 'UserSvc'];
	function MemberModalController(branch, MemberSvc, $modalInstance, $state, member,BranchSvc, UserSvc){
		var vm = this; 
		vm.alerts = [];
		vm.isNew  = _.isNull(member.workingTime);
		vm.save   = save;
		vm.update = update;
		vm.cancel = canel;

		vm.member = {
			id 		 	: member.id ||  "", 
			name 	 	: member.name || null , 
			title    	: "消防隊員",
			titles   	: ["消防隊員","小隊長","分隊長","中隊長","大隊長","副大隊長"],
			branch   	: member.branch || branch,
			workingTime : member.workingTime ||  1200,
			radioCode 	: member.radioCode ||  null, 
			mission  	: "瞄子手",
			missions 	: ["瞄子手","副瞄子手","司機","小組長","安全管制員","聯絡官",],
			corps	 	: UserSvc.userCorps(),
			corpss 	 	: ["第一救災救護大隊","第三救災救護大隊"],
		};

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
			vm.branches = branches; 
			if (!vm.isNew) {
				var branchArry = [];
				for (var i = branches.length - 1; i >= 0; i--) {
					branchArry.push(branches[i].name);
				};
				vm.member.branches = branchArry;
			}; 
		});

		var radioCodePrefix = function(branch){
			var suffix =  branch.split('').slice(-2).join('');
			if (suffix == "大隊" || suffix == "中隊") {
				return "北海";
			} else{
				return branch.split('').slice(0,2).join('');
			};
		};

		function save(){
			if (vm.member.name) {
				vm.member.radioCodePrefix = radioCodePrefix(vm.member.branch);
				MemberSvc.create(vm.member).success(function(){
					vm.member.workingTime = moment.duration(parseInt(vm.member.workingTime),'seconds');
				}).then(function(){
					$modalInstance.close(vm.member);
				})
			} else{

			};
		};

		function update(){
			var updateMember = {
				  memberId  : member.memberId,
				  id 		: "",
				  name 		: vm.member.name,
				  corps 	: vm.member.corps,
				  branch 	: vm.member.branch,
				  title 	: vm.member.title,
				  workingTime : vm.member.workingTime,
				  radioCode  : vm.member.radioCode,
				  radioCodePrefix : radioCodePrefix(vm.member.branch)
			}

			if (vm.member.name) {
				MemberSvc.updateByMemberId(updateMember);
				$modalInstance.close(updateMember);
			} else {
				
			};
		};
	
		function cancel(){
			$modalInstance.dismiss('cancel');
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.member Module
	*
	* Description
	*/
	angular
		.module('app.member')
		.service('MemberSvc',MemberSvc)
	
	MemberSvc.$inject = ['$http'];
	
	function MemberSvc(){
		var svc = this; 
		svc.fetch = fetch;
		svc.findByBranch = findByBranch;
		svc.fetchOnDuty = fetchOnDuty;
		svc.create = create; 
		svc.update = update; 
		svc.updateOnDuty = updateOnDuty;
		svc.updateByMemberId = updateByMemberId;
		svc.updateIsChecked = updateIsChecked;
		svc.updateUser = updateUser;
		svc.removeUser = removeUser;
		svc.deleteMember = deleteMember;

		function fetch(){
			return $http.get('/api/members');
		};

		function findByBranch( branch ){
			return $http.get('/api/members/' + branch );
		};

		function fetchOnDuty(branch){
			return $http.get('/api/members/onDuty?branch=' + branch);
		};

		function create(member){
			return $http.post('/api/members/', member);
		};

		function update(member){
			return $http.put('/api/members/', member.id);
		};

		function updateOnDuty(member){
			return $http.put('/api/members/onDuty/findById?memberId=' + member.memberId, member);
		};

		function updateByMemberId(updateMember){
			return $http.put('/api/members/findById/' + updateMember.memberId , updateMember);
		}
		
		function updateIsChecked(memberData){
			return $http.put('/api/members?id=' + memberData.memberId, memberData)
		};
		
		function updateUser(username){
			return $http.put('/api/members/user?username='+ username);
		};
		
		function removeUser(username){
			return $http.put('/api/members/user/remove?username=' + username);
		};

		function deleteMember(member){
			return $http.delete('/api/members/' + member._id);
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.notification Module
	*
	* Description
	*/
	angular
		.module('app.notification')
		.service('NtfSvc',NtfSvc);

	NtfSvc.$inject = ['$http'];
	
	function NtfSvc($http){
		var svc = this;
		svc.fetch = fetch; 
		function fetch(){
			return $http.get('/api/ntfs');
		} ;
	};

})();
(function(){
	'use strict';

	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyCmdShowController',SafetyCmdShowController);

	SafetyCmdShowController.$inject = ['CaseSvc', 'BranchSvc', 'UserSvc', '$stateParams', 'GeoSvc'];
	
	function SafetyCmdShowController(CaseSvc, BranchSvc, UserSvc, $stateParams, GeoSvc){
		
		var vm = this; 
		var branch = UserSvc.userBranch();
	
		BranchSvc.totalListFindByName(branch).success(function(branch){
			vm.members = branch.members.filter(function(member) {
				member.limitTime = moment.duration(member.workingTime, 'seconds');
				return member.onDuty == true 
			});
		});

		CaseSvc.fetchDetails($stateParams.caseId).success(function(_case){
			vm.caseDetail = _case;
			vm.onDutyBranches = _case.branchIds;
			if (_case.location) {
				var location = JSON.parse(_case.location);
				vm.markers.mainMarker = {
					lat : Number(location.lat),
					lng : Number(location.lng),
					message : "案件標的"
				};

				vm.battleRadiuss = _case.battleRadiuss;
			};
		}).then(function(){
			vm.onDutyBranches.forEach(function(branch){
				branch.members.forEach(function(member){
					if (branch.director == member.name ) {
						branch.directorRadioCode = member.radioCodePrefix +  String(member.radioCode);
					};
					if (branch.safetyManager == member.name) {
						branch.safetyManagerRadioCode = member.radioCodePrefix + String(member.radioCode);
					};
				});

				if (vm.battleRadius) {
					vm.battleRadiuss.forEach(function(battleRadius){
						var radius = JSON.parse(battleRadius)
						if (branch.name == radius.base) {
							branch.estimatedArrivingTime =  Math.round(( radius.d / 50 ) * 60);
						};
					})		
				};
			});
		});

       GeoSvc.getGeolocationCoordinates().then(function(coord){
	        vm.nowPos.lat = coord.latitude;
	        vm.nowPos.lng = coord.longitude;
	        vm.nowPos.zoom = 17;
	        vm.markers.nowPos = {
	        	lat : vm.nowPos.lat,
	        	lng : vm.nowPos.lng,
	        	message : "現在位置"
	        }
	    })

	    angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 13
	        },
	        markers: {},
	    });		
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyIndexController',SafetyIndexController);
	SafetyIndexController.$inject = ['CaseSvc', 'UserSvc'];
	function SafetyIndexController(){
		var vm = this; 
		var userCondition = {
			branch 		: UserSvc.userBranch(),
			accessLevel : UserSvc.accessLevel(),
			corps 		: UserSvc.userCorps()
		};

		CaseSvc.fetchRelativeCase(userCondition).success(function(cases){ 
			vm.cases = cases;
			cases.forEach(function(_case){
				_case.dispatchBranches = ''
				_case.branches.forEach(function(branch){
					_case.dispatchBranches += branch + ' '
				});
			});
		});

		vm.isBranchMember = true ? UserSvc.accessLevel() < 2  : false ; 
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyManageController',SafetyManageController);
	
	SafetyManageController.$inject = ['$stateParams', '$modal', 'StSvc', '$state', 'MemberSvc','$log', 'UserSvc', 'BranchSvc', 'SocketSvc', 'CaseSvc', 'StMissionFac'];
	
	function SafetyManageController($stateParams, $modal, StSvc, $state, MemberSvc,$log, UserSvc, BranchSvc, SocketSvc, CaseSvc, StMissionFac){
		var vm = this; 
		var BRANCH 		= UserSvc.userBranch();
		var caseDetail 	= null;
		vm.quickStart 	= false;
		vm.apartment 	= true; 
		vm.ACCESSLEVEL 	= UserSvc.accessLevel();
		vm.quickOrganizing = quickOrganizing;
		vm.strikeTeam = strikeTeam;
		vm.openSettingModal = openSettingModal;
		vm.dismiss = dismiss; 

		vm.branchOptions = {
			branch : BRANCH,
			branches : []
		};

		CaseSvc.fetchById($stateParams.caseId).success(function(_case){
			caseDetail = _case;
			_case.env == '住宅火警'? vm.apartment = true : vm.apartment = false; 
			vm.branchOptions.branches = _case.branches
			vm.branchOptions.branches.splice(0,0,BRANCH);
		});

		BranchSvc.fetchByName(BRANCH).success(function(details){
			vm.details = details;
		}).then(function(){
			if (vm.ACCESSLEVEL > 1 ) {
				StSvc.fetchByCase($stateParams.caseId).success(function(sts){
					vm.strikeTeams = sts; 
				});
			} else {
				StSvc.fetch($stateParams.caseId,BRANCH).success(function(sts){
					vm.strikeTeams = sts;
					if (vm.details.dispatchNum < 8 && _.isEmpty(vm.strikeTeams)) { vm.quickStart = true  }; 
				}); 
			};
		});

		SocketSvc.on('newSt', function(st){
			if (vm.ACCESSLEVEL > 1 && angular.equals($stateParams.caseId,st.caseId) ) {
					vm.strikeTeams.push(st);
			} else {
				if (angular.equals(BRANCH,st.branch) && angular.equals($stateParams.caseId,st.caseId) ) {
					vm.strikeTeams.push(st);
				};
			};
		});

		SocketSvc.on('updateSt', function(data){
			var members = angular.copy(data.members);
			for (var i = vm.strikeTeams.length - 1; i >= 0; i--) {
				if(angular.equals(vm.strikeTeams[i]._id,data.id)){
					vm.strikeTeams[i].position 	= data.position;
					vm.strikeTeams[i].area 		= data.area;
					vm.strikeTeams[i].floor 	= data.floor;
					vm.strikeTeams[i].mission 	= data.mission;
				};
			};
		})

		SocketSvc.on('dismiss', function(st){
			var _stId = st.stId;
			vm.strikeTeams = vm.strikeTeams.filter(function(st) {				
				return st._id != _stId;
			});
		});
		
		function strikeTeam(){
			var modalInstance = $modal.open({
			  	templateUrl: 'views/safety/safety.modal.html',
			    controller: 'SafetyModalCtrl',
			    size: "md",
			    resolve : {
			    	stId : function(){
			    		if ( _.isEmpty(vm.strikeTeams)) {
			    			return 0
			    		} else{
			    			return vm.strikeTeams[vm.strikeTeams.length-1].id;
			    		};
			    	},
			    	branch : function(){
			    		return vm.branchOptions.branch;
			    	},
			    	caseDetail : function(){
			    		return caseDetail
			    	}
			    }
		    });
		};

		
		function openSettingModal(strikeTeam, id){
	        var modalInstance = $modal.open({
	            templateUrl: 'views/safety/safety.setting.modal.html',
	            controller: 'SafetySettingCtrl',
	            size: "lg",
	            resolve: {
	                strikeTeam : function(){
	                    return strikeTeam;
	                },
	                caseDetail : function(){
	                	return caseDetail;
	                }
	            }
	        });
	    };

		
		function dismiss(strikeTeam , id){

			SocketSvc.emit("dismissStrikeTeam",{
				id : strikeTeam._id,
				members : strikeTeam.members 
			});
	       	vm.strikeTeams.splice(id,1);
		};

		
		function quickOrganizing(){
			vm.quickStart = false;
		
			var members =  vm.details.members.filter(function(member) {
				if ( member.mission == '司機' || member.mission == '安全管制員' || member.mission == '救護人員') {
					return false  
				}else {
					member.isChecked = true;
					return member.onDuty;
				}
			});

			var strikeTeam = {
				id 		  : 1,
				caseId 	  : caseDetail._id,
				branch 	  : UserSvc.userBranch(),
				director  : _.pluck(members.filter(function(member) { return member.mission == '帶隊官'}),'name')[0],
				position  : StMissionFac.position().defaultPos,
				positions : StMissionFac.position().poss,
				group     : StMissionFac.groups().branch[1],
				groups    : StMissionFac.groups().branch,
				area 	  : StMissionFac.area().defaultArea,
				areas 	  : StMissionFac.area().areas,
				floor 	  : 1, 
				floors    : [1,2,3,4,5],
				memberIds : _.pluck(members,'_id'),
				members   : members,
				creator   : UserSvc.currentUser(),
			};
	      	SocketSvc.emit("createStrikeTeam", strikeTeam);
		};

		vm.$on('$destroy', function (event) {
	        SocketSvc.removeAllListeners();
	    })
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('MemberModalController',MemberModalController);

	MemberModalController.$inject = ['branch', 'MemberSvc', '$modalInstance', '$state', 'member','BranchSvc', 'UserSvc'];
	function MemberModalController(){
		var vm = this; 
		vm.alerts = [];
		vm.isNew = _.isNull(member.workingTime);
		vm.save = save;
		vm.update = update; 
		vm.cancel = cancel;  

		vm.member = {
			id 		 	: member.id ||  "", 
			name 	 	: member.name || null , 
			title    	: "消防隊員",
			titles   	: ["消防隊員","小隊長","分隊長","中隊長","大隊長","副大隊長"],
			branch   	: member.branch || branch,
			workingTime : member.workingTime ||  1200,
			radioCode 	: member.radioCode ||  null, 
			mission  	: "瞄子手",
			missions 	: ["瞄子手","副瞄子手","司機","小組長","安全管制員","聯絡官",],
			corps	 	: UserSvc.userCorps(),
			corpss 	 	: ["第一救災救護大隊","第三救災救護大隊"],
		};

		BranchSvc.fetchByCorps(UserSvc.userCorps()).success(function(branches){
			vm.branches = branches; 
			if (!vm.isNew) {
				var branchArry = [];
				for (var i = branches.length - 1; i >= 0; i--) {
					branchArry.push(branches[i].name);
				};
				vm.member.branches = branchArry;
			}; 
		});

		var radioCodePrefix = function(branch){
			var suffix =  branch.split('').slice(-2).join('');
			if (suffix == "大隊" || suffix == "中隊") {
				return "北海";
			} else{
				return branch.split('').slice(0,2).join('');
			};
		};

		function save(){
			if (vm.member.name) {
				vm.member.radioCodePrefix = radioCodePrefix(vm.member.branch);
				MemberSvc.create(vm.member).success(function(){
					vm.member.workingTime = moment.duration(parseInt(vm.member.workingTime),'seconds');
				}).then(function(){
					$modalInstance.close(vm.member);
				})
			};
		};

		function update(){
			var updateMember = {
				  memberId  : member.memberId,
				  id 		: "",
				  name 		: vm.member.name,
				  corps 	: vm.member.corps,
				  branch 	: vm.member.branch,
				  title 	: vm.member.title,
				  workingTime : vm.member.workingTime,
				  radioCode  : vm.member.radioCode,
				  radioCodePrefix : radioCodePrefix(vm.member.branch)
			}

			if (vm.member.name) {
				MemberSvc.updateByMemberId(updateMember);
				$modalInstance.close(updateMember);
			} else {
				
			};
		};

		function cancel(){
			$modalInstance.dismiss('cancel');
		};
	}
})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetySettingController',SafetySettingController);

	SafetySettingController.$inject = ['strikeTeam', '$modalInstance', 'StSvc', '$state', 'MemberSvc', 'CaseSvc', '$stateParams', 'SocketSvc', 'caseDetail'];
	
	function SafetySettingController(strikeTeam, $modalInstance, StSvc, $state, MemberSvc, CaseSvc, $stateParams, SocketSvc, caseDetail){
		var vm = this; 
		vm.strikeTeam = strikeTeam;
		vm.chooseBranch = chooseBranch;
		vm.cancel = cancel;
		vm.check = check;
		vm.uncheck = uncheck;
		vm.save = save;   
		caseDetail.env == '住宅火警'? vm.apartment =  true  : vm.apartment = false 

		var newMembers = [];

		CaseSvc.fetchDetails($stateParams.caseId).success(function(details){
			vm.dispatch = details.branchIds;
			vm.currentBranch = vm.dispatch[0].name;
			var memberList = _.pluck(details.branchIds,'members');
			vm.members = []
			memberList.forEach(function(branchMembers){
				vm.members.push.apply(vm.members, branchMembers)
			});
			vm.members = vm.members.filter(function(member) { return !member.isChecked });
		})

		function chooseBranch(branch){
			vm.currentBranch = branch;
		};

		function cancel(){
			$modalInstance.dismiss('cancel');
		};

		function check(member){
			member.isChecked = !member.isChecked;
			newMembers.push(member);
		};

		function uncheck(member, id){
			member.isChecked = !member.isChecked;
			newMembers.splice(_.pluck(newMembers, '_id').indexOf(member._id),1);
		};

		function save(){
			vm.strikeTeam.members.push.apply(vm.strikeTeam.members, newMembers);
			SocketSvc.emit('updateStrikeTeam',{
				id : strikeTeam._id, 
				position : strikeTeam.position,
				area : strikeTeam.area, 
				floor : strikeTeam.floor,
				group : strikeTeam.group,
				memberIds : _.pluck(vm.strikeTeam.members,'_id'), 
				members : vm.strikeTeam.members
			});

			$modalInstance.close('dismiss');			
		};
	};

})();
(function(){
	'use strict';
	/**
	* app.safety Module
	*
	* Description
	*/
	angular
		.module('app.safety')
		.controller('SafetyShowController',SafetyShowController);

	SafetyShowController.$inject = ['CaseSvc', 'UserSvc', 'SocketSvc','GeoSvc', 'BranchSvc', '$stateParams'];

	function SafetyShowController(){
		var vm = this; 
		var branch = UserSvc.userBranch();
		
		BranchSvc.fetchByName(branch).success(function(branch){
			vm.members = branch.members.filter(function(member) {
				member.limitTime = moment.duration(member.workingTime, 'seconds');
				return member.onDuty == true 
			});
		});

		CaseSvc.fetchDetails($stateParams.caseId).success(function(_case){
			vm.caseDetail = _case;
			if (_case.location) {
				var location = JSON.parse(_case.location);
				vm.markers.mainMarker = {
					lat : Number(location.lat),
					lng : Number(location.lng),
					message : "案件標的"
				};
			};
		});

       GeoSvc.getGeolocationCoordinates().then(function(coord){
	        vm.nowPos.lat = coord.latitude;
	        vm.nowPos.lng = coord.longitude;
	        vm.nowPos.zoom = 17;
	        vm.markers.nowPos ={
	        	lat : vm.nowPos.lat,
	        	lng : vm.nowPos.lng,
	        	message : "現在位置"
	        }
	    })

	    angular.extend(vm, {
	        nowPos: {
	            lat: 24.988,
	            lng: 121.5752,
	            zoom: 13
	        },
	        markers: {},
	    });		
	}
})();
(function(){
	'use strict';
	/**
	* app.socket Module
	*
	* Description
	*/
	angular
		.module('app.socket')
		.service('SocketSvc',SocketSvc);

	SocketSvc.$inject = ['$rootScope', 'store', '$q', '$timeout'];
	
	function SocketSvc($rootScope, store, $q, $timeout){
		var svc = this; 
		svc.init =  function(token){
	    	var authToken = null
	    	if (token) {
		      authToken = token 
			} else {
		      authToken = store.get('jwt')
		    };
		    return io.connect('http://localhost:3000',{ query : 'token=' + authToken , 'forceNew':true });
		}

	  	var socket = svc.init();

	  	svc.on =  function (eventName, callback) {
	    	svc.init().on(eventName, function () {  
		      var args = arguments;
		      $rootScope.$apply(function () {
		        callback.apply(socket, args);
		      });
		    });
		};

	  	svc.emit =  function (eventName, data, callback) {
	    	svc.init().emit(eventName, data, function () {
	      		var args = arguments;
	      		$rootScope.$apply(function () {
	        		if (callback) {
	          			callback.apply(socket, args);
	        		};
	      		});
	    	})
	  	};

		svc.removeAllListeners = function (eventName, callback) {
		    svc.init().removeAllListeners(eventName, function() {
		        var args = arguments;
		        $rootScope.$apply(function () {
		          callback.apply(socket, args);
		        });
		    }); 
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.strikeTeam Module
	*
	* Description
	*/
	angular
		.module('app.strikeTeam', [])
		.factory('StMissionFac',StMissionFac);

	StMissionFac.$inject = [];
	function StMissionFac(){
		return {
			groups: function(){
				return {
					corps : [ "聯絡組" , "水源組" , "後勤組"],
					squadron : [""],
					branch : ["帶隊官","滅火小組","搜救小組","搶救小組","後勤小組"],
					preSt  : ["搜救小組","搶救小組","滅火小組"]
				}
			},
			position : function(){
				return {
					defaultPos : "第一面",
					poss : ["第一面","第二面","第三面","第四面"]
				}
			},
			area : function(){
				return {
					defaultArea : "第一區",
					areas : ["第一區","第二區","第三區","第四區","第五區"]
				};
			}
		};
	};
})();
(function(){
	'use strict';
	/**
	* app.strikTeam Module
	*
	* Description
	*/
	angular
		.module('app.strikTeam')
		.serivce('StSvc',StSvc);
		
	StSvc.$inject = ['$http'];

	function StSvc(){
		var svc = this; 
		svc.fetch = fetch;
		svc.fetchByCase = fetchByCase;
		svc.findById = findById;
		svc.dismissSt = dismissSt;
		svc.updateSt = updateSt;
		svc.updateTimeRecord = updateTimeRecord;
		svc.create = create;
		svc.count = count; 

		function fetch(caseId, branch){
			return $http.get('/api/strikeTeams?caseId=' + caseId + '&branch=' + branch);
		};
	
		function fetchByCase(caseId){
			return $http.get('/api/strikeTeams/total?caseId=' + caseId);
		};
		
		function findById(caseId){
			return $http.get('/api/strikeTeams/' + caseId);
		};

		function dismissSt(data){
			return $http.put('/api/strikeTeams/dismiss?id=' + data.id);
		};

		function updateSt(data){
			return $http.put('/api/strikeTeams/update?id=' + data.id, data);
		};

		function updateTimeRecord(data){
			return $http.put('/api/strikeTeams/time?id=' + data.id, data);
		};

		function create(strikeTeam){
			return $http.post('/api/strikeTeams', strikeTeam);
		};
		
		function count(caseId){
			return $http.get('/api/strikeTeams/count?caseId=' + caseId);
		};
	}

})();
(function(){
	'use strict';
	/**
	* app.summary Module
	*
	* Description
	*/
	angular
		.module('app.summary')
		.controller('SummaryController',SummaryController);

	SummaryController.$inject = ['StSvc', '$stateParams', '$interval', '$state', 'SocketSvc', 'CaseSvc'];
	function SummaryController(){
		var vm = this; 
		vm.isCollapsed = true ;
		vm.members = [];

		SocketSvc.on('timerRunning',function(st){
			for (var i = vm.strikeTeams.length - 1; i >= 0; i--) {
				if( angular.equals(vm.strikeTeams[i]._id, st.stId)){
					return vm.strikeTeams[i].timerRunning = st.timerRunning;
				}
			};
		})

		SocketSvc.on('progressUpdate',function(data){
			for (var i = vm.strikeTeams.length - 1; i >= 0; i--) {
				if( angular.equals(vm.strikeTeams[i]._id, data.id) ){
					vm.strikeTeams[i].timer	= moment.duration(data.millis); 
					vm.strikeTeams[i].progress  = data.progress;
					vm.strikeTeams[i].progressState =  data.progressState;
				}
			};
		})

		SocketSvc.on('newSt', function(st){
			if ( angular.equals(caseId,st.caseId)) {
				var newSt = angular.copy(st);
				return vm.strikeTeams.push(newSt);
			};
			vm.deploys = initTable(vm.strikeTeams);
		});

		

		SocketSvc.on('updateSt', function(data){
			StSvc.fetchByCase(caseId).success(function(strikeTeams){
				vm.strikeTeams = strikeTeams;
				vm.strikeTeams.forEach(function(st){
					st.limitTime = moment.duration(st.workingTime,'seconds');
				});
				vm.deploys = initTable(vm.strikeTeams);
			});

		})

		SocketSvc.on('dismiss', function(data){
			StSvc.fetchByCase(caseId).success(function(strikeTeams){
				vm.strikeTeams = strikeTeams;
				vm.deploys = initTable(vm.strikeTeams);
			});
		});


		var caseId = $stateParams.caseId;
		CaseSvc.fetchById(caseId).success(function(_case){
			_case.env == '住宅火警' ? vm.apartment = true : vm.apartment = false;
			vm.caseDetail = _case;
			vm.position = {
				defaultPos 	: "第一面",
				positions 	: ["第一面","第二面","第三面","第四面"],
				floor 		: vm.caseDetail.floor,
				floors  	: vm.caseDetail.floor < 5? _.range(1,6,1) : _.range(vm.caseDetail.floor-2,vm.caseDetail.floor+3,1)
			};
		})

		StSvc.fetchByCase(caseId).success(function(strikeTeams){
			if (strikeTeams) {
				vm.strikeTeams = strikeTeams;
				vm.strikeTeams.forEach(function(st){
					st.limitTime = moment.duration(st.workingTime,'seconds');
				});
				vm.deploys = initTable(vm.strikeTeams);
			} else {
				return 
			};
		});



		var initTable =  function(strikeTeams){
		  	var deployArray = _.range(4).map(function () {
		        return _.range(5).map(function () {
		            return { totalMember : 0, stTotal : 0 , sts : [] } ;
		        });
		    });

			if ( strikeTeams ){
				for (var i = strikeTeams.length - 1; i >= 0; i--) {
					var totalMember = 0;
					var y = null;
					var st = 0;
					var x = _.indexOf(strikeTeams[i].positions, strikeTeams[i].position);
					vm.apartment ? y = _.indexOf(strikeTeams[i].floors, strikeTeams[i].floor) : y = _.indexOf(strikeTeams[i].areas, strikeTeams[i].area)
					deployArray[x][y].stTotal += 1;
					deployArray[x][y].totalMember += strikeTeams[i].members.length;
					var stInFo = {};
					stInFo.id = strikeTeams[i].branch + strikeTeams[i].id
					stInFo.number = strikeTeams[i].members.length;
					stInFo.group = strikeTeams[i].group;
					deployArray[x][y].sts.push(stInFo);
				};
			}
			return deployArray
		};
		
		vm.$on('$destroy', function (event) {
	        SocketSvc.removeAllListeners();
	    });
	};
})();
(function(){
	'use strict';

	/**
	* app.timer Module
	*
	* Description
	*/
	angular
		.module('app.timer')
		.controller('TimerController',TimerController);

	TimerController.$inject = ['SocketSvc'];

	function TimerController(){
		var vm = this; 
		vm.timerRunning = false;
		vm.startTimer = startTimer;
		vm.stopTimer = stopTimer;
	    
	    function startTimer(st, id){
	    	vm.$broadcast('timer-start');
	    	vm.timerRunning = true;
	        SocketSvc.emit('timer', { stId : st._id, timerRunning : true } )
	    };
	    
	    function stopTimer(st,id){
	    	vm.$broadcast('timer-stop');
	    	vm.timerRunning = false;
	        SocketSvc.emit('timer', { stId : st._id, timerRunning : false } )
	    };
	};

})();
(function(){
	'use strict';
	/**
	* app.user Module
	*
	* Description
	*/
	angular
		.module('app.user')
		.service('UserSvc',UserSvc);

	UserSvc.$inject = ['$http', 'store', 'jwtHelper'];
	function UserSvc(){
		var svc = this; 
		svc.fetchOnlineUser = fetchOnlineUser;
		svc.activate = activate;
		svc.removeUser = removeUser;
		svc.login = login;
		svc.isLoggedIn = isLoggedIn;
		svc.isValid = isValid;
		svc.userBranch = userBranch;
		svc.userCorps = userCorps;
		svc.currentUser = currentUser;
		svc.currentAccount = currentAccount;
		svc.accessLevel = accessLevel;
		svc.caseId = caseId;


		function fetchOnlineUser(){
			return $http.get('/api/users/userState');
		};

		function activate(user){
			return $http.post('/api/users', user);
		};

		function removeUser(username){
			return $http.delete('/api/users/delete?username=' + username);
		};

		function login(user){
			return $http.post('/api/users/authenticate', user);
		};

		function isLoggedIn(){
			return store.get('jwt');
		};

		function isValid( branch ){
			if (svc.isLoggedIn) {
				if (jwtHelper.decodeToken(store.get('jwt')).accessLevel > 1   || jwtHelper.decodeToken(store.get('jwt')).branch == branch) {
					return true; 
				}else {
					return false;
				};
			};

			return false 
		};

		function userBranch(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).branch;
			};
		};
	
		function userCorps(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).corps;
			};
		};
	
		function currentUser(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).username;
			};
		};
	
		function currentAccount(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).account;
			}; 
		};
	
		function accessLevel(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).accessLevel;
			};
		};
	
		function caseId(){
			if (svc.isLoggedIn) {
				return jwtHelper.decodeToken(store.get('jwt')).caseId;
			};
		};
	};

})();
//# sourceMappingURL=data:application/json;base64,
